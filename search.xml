<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人常用器件手册合集</title>
      <link href="2021/12/31/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%99%A8%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C%E5%90%88%E9%9B%86/"/>
      <url>2021/12/31/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%99%A8%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="基础器件"><a class="markdownIt-Anchor" href="#基础器件"></a> 基础器件</h2><h3 id="电阻"><a class="markdownIt-Anchor" href="#电阻"></a> 电阻</h3><h4 id="厚声-常规厚膜片式固定电阻器"><a class="markdownIt-Anchor" href="#厚声-常规厚膜片式固定电阻器"></a> 厚声 - 常规厚膜片式固定电阻器 ：</h4><div class="row">    <embed src="./res_hsres.pdf" width="100%" height="550" type="application/pdf"></div><h4 id="风华高科-常规厚膜片式固定电阻器"><a class="markdownIt-Anchor" href="#风华高科-常规厚膜片式固定电阻器"></a> 风华高科 - 常规厚膜片式固定电阻器 ：</h4><div class="row">    <embed src="./res_fhgkres.pdf" width="100%" height="550" type="application/pdf"></div><h4 id="b型热敏电阻"><a class="markdownIt-Anchor" href="#b型热敏电阻"></a> B型热敏电阻：</h4><div class="row">    <embed src="./res_ntcres.pdf" width="100%" height="550" type="application/pdf"></div><h4 id="ptc-自恢复保险丝"><a class="markdownIt-Anchor" href="#ptc-自恢复保险丝"></a> PTC - 自恢复保险丝：</h4><div class="row">    <embed src="./res_reminres.pdf" width="100%" height="550" type="application/pdf"></div><h4 id="ntc"><a class="markdownIt-Anchor" href="#ntc"></a> NTC</h4><div class="row">    <embed src="./res_ntcres.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="电容"><a class="markdownIt-Anchor" href="#电容"></a> 电容</h3><h4 id="风华高科-陶瓷电容"><a class="markdownIt-Anchor" href="#风华高科-陶瓷电容"></a> 风华高科 - 陶瓷电容：</h4><div class="row">    <embed src="./cap_cercap.pdf" width="100%" height="550" type="application/pdf"></div><h4 id="rvt系列贴片型铝电解电容"><a class="markdownIt-Anchor" href="#rvt系列贴片型铝电解电容"></a> RVT系列贴片型铝电解电容：</h4><div class="row">    <embed src="./cap_rvtcap.pdf" width="100%" height="550" type="application/pdf"></div><h4 id="taj系列钽电解电容"><a class="markdownIt-Anchor" href="#taj系列钽电解电容"></a> TAJ系列钽电解电容：</h4><div class="row">    <embed src="./cap_tajcap.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="电感"><a class="markdownIt-Anchor" href="#电感"></a> 电感</h3><h4 id="功率电感"><a class="markdownIt-Anchor" href="#功率电感"></a> 功率电感</h4><p>顺络 SWPA系列：</p><div class="row">    <embed src="./inductor_swpa.pdf" width="100%" height="550" type="application/pdf"></div><p>chilisin(奇力新) MHCC、MHCI系列：</p><div class="row">    <embed src="./inductor_mhcc.pdf" width="100%" height="550" type="application/pdf"></div><h4 id="贴片电感"><a class="markdownIt-Anchor" href="#贴片电感"></a> 贴片电感</h4><p>风华 叠层片式高频电感：</p><div class="row">    <embed src="./inductor_smdl.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="二极管"><a class="markdownIt-Anchor" href="#二极管"></a> 二极管</h3><p>通用二极管1N4007：</p><div class="row">    <embed src="./diode_1n4007.pdf" width="100%" height="550" type="application/pdf"></div><p>开关二极管BAS316：</p><div class="row">    <embed src="./diode_1n4007.pdf" width="100%" height="550" type="application/pdf"></div><p>开关二极管1N4148WS</p><div class="row">    <embed src="./diode_in4148ws.pdf" width="100%" height="550" type="application/pdf"></div><p>肖特基二极管DSK34：</p><div class="row">    <embed src="./diode_dsk34.pdf" width="100%" height="550" type="application/pdf"></div><p>肖特基二极管SS34：</p><div class="row">    <embed src="./diode_ss34.pdf" width="100%" height="550" type="application/pdf"></div><p>肖特基二极管SS54：</p><div class="row">    <embed src="./diode_ss54.pdf" width="100%" height="550" type="application/pdf"></div><p>稳压二极管LM3Z7V5t1G：</p><div class="row">    <embed src="./diode_lm3z7v5t1g.pdf" width="100%" height="550" type="application/pdf"></div><p>TVS管SMAJ：</p><div class="row">    <embed src="./diode_smaj.pdf" width="100%" height="550" type="application/pdf"></div><p>发光二极管：</p><div class="row">    <embed src="./diode_light-emitting.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="bjt晶体管"><a class="markdownIt-Anchor" href="#bjt晶体管"></a> BJT晶体管</h3><p>NPN晶体管S8050：</p><div class="row">    <embed src="./bjt_s8050.pdf" width="100%" height="550" type="application/pdf"></div><p>NPN晶体管SS8050：</p><div class="row">    <embed src="./bjt_ss8050.pdf" width="100%" height="550" type="application/pdf"></div><p>NPN晶体管S9014：</p><div class="row">    <embed src="./bjt_s9014.pdf" width="100%" height="550" type="application/pdf"></div><p>PNP晶体管S8550：</p><div class="row">    <embed src="./bjt_s8550.pdf" width="100%" height="550" type="application/pdf"></div><p>PNP晶体管SS8550：</p><div class="row">    <embed src="./bjt_ss8550.pdf" width="100%" height="550" type="application/pdf"></div><p>PNPP晶体管S9015：</p><div class="row">    <embed src="./bjt_s9015.pdf" width="100%" height="550" type="application/pdf"></div><p>光电三极管PC817B：</p><div class="row">    <embed src="./bjt_pc817b.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="mos管"><a class="markdownIt-Anchor" href="#mos管"></a> MOS管</h3><p>NMOS管AO3400A：</p><div class="row">    <embed src="./mos_ao3400a.pdf" width="100%" height="550" type="application/pdf"></div><p>NMOS管AOD4184A：</p><div class="row">    <embed src="./mos_aod4184a.pdf" width="100%" height="550" type="application/pdf"></div><p>PMOS管AO3401A：</p><div class="row">    <embed src="./mos_ao3401a.pdf" width="100%" height="550" type="application/pdf"></div><p>PMOS管AOD4185：</p><div class="row">    <embed src="./mos_ao4185a.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="集成运放"><a class="markdownIt-Anchor" href="#集成运放"></a> 集成运放</h3><p>LM358：</p><div class="row">    <embed src="./operational_amplifier_lm358.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="光耦"><a class="markdownIt-Anchor" href="#光耦"></a> 光耦</h3><div class="row">    <embed src="./optocoupler_pc817b.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="蜂鸣器"><a class="markdownIt-Anchor" href="#蜂鸣器"></a> 蜂鸣器</h3><p>有源蜂鸣器：</p><div class="row">    <embed src="./buzzer_cy9042-5029.pdf" width="100%" height="550" type="application/pdf"></div><p>无源蜂鸣器：</p><div class="row">    <embed src="./buzzer_8540.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="继电器"><a class="markdownIt-Anchor" href="#继电器"></a> 继电器</h3><div class="row">    <embed src="./relay_jzc-33f-012-zs3.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="可控硅"><a class="markdownIt-Anchor" href="#可控硅"></a> 可控硅</h3><p>CYMOC3020：</p><div class="row">    <embed src="./siliconcontrolled_cymoc3020.pdf" width="100%" height="550" type="application/pdf"></div><p>过零点触发双硅输出光耦MOC3061：</p><div class="row">    <embed src="./siliconcontrolled_moc3061.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="电源芯片"><a class="markdownIt-Anchor" href="#电源芯片"></a> 电源芯片</h2><h3 id="buck"><a class="markdownIt-Anchor" href="#buck"></a> BUCK</h3><p>MP2451：</p><div class="row">    <embed src="./buck_mp2451.pdf" width="100%" height="550" type="application/pdf"></div><p>SY8205FCC：</p><div class="row">    <embed src="./buck_sy8205fcc.pdf" width="100%" height="550" type="application/pdf"></div><p>TMI3253：</p><div class="row">    <embed src="./buck_tmi3253.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="boost"><a class="markdownIt-Anchor" href="#boost"></a> BOOST</h3><p>ME2159AM6G：</p><div class="row">    <embed src="./boost_me2159am6g.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="ldo"><a class="markdownIt-Anchor" href="#ldo"></a> LDO</h3><div class="row">    <embed src="./ldo_ams1117.pdf" width="100%" height="550" type="application/pdf"></div><p>HT7333-3：</p><div class="row">    <embed src="./ldo_ht7333-3.pdf" width="100%" height="550" type="application/pdf"></div><p>662K：</p><div class="row">    <embed src="./ldo_662k.pdf" width="100%" height="550" type="application/pdf"></div><p>78M05：</p><div class="row">    <embed src="./ldo_78m05.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="电压基准"><a class="markdownIt-Anchor" href="#电压基准"></a> 电压基准</h3><p>TL431：</p><div class="row">    <embed src="./tl431.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="锂电池充电"><a class="markdownIt-Anchor" href="#锂电池充电"></a> 锂电池充电</h3><p>TP4056：</p><div class="row">    <embed src="./charge_tp4056.pdf" width="100%" height="550" type="application/pdf"></div><p>TP5400：</p><div class="row">    <embed src="./charge_tp5400.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="驱动芯片"><a class="markdownIt-Anchor" href="#驱动芯片"></a> 驱动芯片</h2><p>半桥驱动IR2104STRPBF：</p><div class="row">    <embed src="./drivetrip_r2104strpbf.pdf" width="100%" height="550" type="application/pdf"></div><p>全桥驱动LV8548MC-AH：</p><div class="row">    <embed src="./drivetrip_lv8548mc-ah.pdf" width="100%" height="550" type="application/pdf"></div><p>全桥驱动TB67H450：</p><div class="row">    <embed src="./drivetrip_tb67h450.pdf" width="100%" height="550" type="application/pdf"></div><p>全桥驱动TB6612：</p><div class="row">    <embed src="./drivetrip_tb6612.pdf" width="100%" height="550" type="application/pdf"></div><p>全桥驱动AT8236：</p><div class="row">    <embed src="./drivetrip_at8236.pdf" width="100%" height="550" type="application/pdf"></div><p>全桥驱动TC78H660：</p><div class="row">    <embed src="./drivetrip_tc78h660.pdf" width="100%" height="550" type="application/pdf"></div><p>达林顿晶体管阵列uln2003a：</p><div class="row">    <embed src="./drivetrip_uln2003a.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="mcu"><a class="markdownIt-Anchor" href="#mcu"></a> MCU</h2><h3 id="stm32"><a class="markdownIt-Anchor" href="#stm32"></a> STM32</h3><p>STM32F103x8xb数据手册：</p><div class="row">    <embed src="./stm32f103x8xbdatasheet.pdf" width="100%" height="550" type="application/pdf"></div><p>STM32中文参考手册：</p><div class="row">    <embed src="./stm32f10xx-reference-manual.pdf" width="100%" height="550" type="application/pdf"></div><p>Cortex-M3权威指南(中文)：</p><div class="row">    <embed src="./cortex-m3.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="stc"><a class="markdownIt-Anchor" href="#stc"></a> STC</h3><p>STC15：</p><div class="row">    <embed src="https://www.stcmcudata.com/datasheet/stc/STC-AD-PDF/STC15.pdf" width="100%" height="550" type="application/pdf"></div><p>STC8A：</p><div class="row">    <embed src="https://www.stcmcudata.com/STC8F-DATASHEET/STC8A-STC8F.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="蓝牙芯片"><a class="markdownIt-Anchor" href="#蓝牙芯片"></a> 蓝牙芯片</h3><div class="row">    <embed src="./bluetooth_cc2540.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="传感器"><a class="markdownIt-Anchor" href="#传感器"></a> 传感器</h2>]]></content>
      
      
      <categories>
          
          <category> 电子技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIY STM32F103ZET6开发板</title>
      <link href="2021/01/04/DIY%20STM32F103ZET6%E5%BC%80%E5%8F%91%E6%9D%BF/"/>
      <url>2021/01/04/DIY%20STM32F103ZET6%E5%BC%80%E5%8F%91%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h2><h2 id="电源设计"><a class="markdownIt-Anchor" href="#电源设计"></a> 电源设计</h2><h2 id="显示部分"><a class="markdownIt-Anchor" href="#显示部分"></a> 显示部分</h2><h2 id="电机部分"><a class="markdownIt-Anchor" href="#电机部分"></a> 电机部分</h2><h2 id="输入部分"><a class="markdownIt-Anchor" href="#输入部分"></a> 输入部分</h2><h2 id="输出部分"><a class="markdownIt-Anchor" href="#输出部分"></a> 输出部分</h2><h2 id="无线部分"><a class="markdownIt-Anchor" href="#无线部分"></a> 无线部分</h2><h2 id="stm32主控"><a class="markdownIt-Anchor" href="#stm32主控"></a> STM32主控</h2>]]></content>
      
      
      <categories>
          
          <category> 开源项目合集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华硕UX433FN安装Win黑苹果双系统</title>
      <link href="2020/09/03/%E5%8D%8E%E7%A1%95UX433FN%E5%AE%89%E8%A3%85Win%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/09/03/%E5%8D%8E%E7%A1%95UX433FN%E5%AE%89%E8%A3%85Win%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>只针对本型号电脑，快速安装Win，黑苹果双系统，以下内容假设你已经安装可以用的Win系统，操作都在Win系统下进行。</p><h2 id="电脑配置"><a class="markdownIt-Anchor" href="#电脑配置"></a> 电脑配置</h2><p>型号：华硕UX433FN（U4300FN，灵耀U2）</p><p>CPU：i5-8265u</p><p>显卡：Intel® UHD Graphics 620（独显MX150用不了）</p><p>内存：8G</p><p>SSD:  512GB NVME</p><h2 id="测试正常的功能"><a class="markdownIt-Anchor" href="#测试正常的功能"></a> 测试正常的功能</h2><ol><li>显卡</li><li>声卡（没有声音，但是能控制输出设备音量，可以用蓝牙设备播放声音）</li><li>USB</li><li>Type-C</li><li>WIFI</li><li>键盘</li><li>触摸板</li><li>其他自行测试</li></ol><h2 id="测试不正常的功能"><a class="markdownIt-Anchor" href="#测试不正常的功能"></a> 测试不正常的功能</h2><ol><li>HDMI视频、音频输出</li><li>虚拟化</li><li>其他自行测试</li></ol><h2 id="efi"><a class="markdownIt-Anchor" href="#efi"></a> EFI</h2><p>使用OpenCore引导，GitHub地址：</p><p>克隆到本地，将BOOT文件夹的BOOTx64.efi改名BOOT1x64.efi，不然会覆盖原来系统的引导</p><h2 id="开始"><a class="markdownIt-Anchor" href="#开始"></a> 开始</h2><ol><li>下载黑苹果镜像，可以区黑果小兵下载，也可以其他地方下载；</li><li>制作启动盘，制作工具下载：<a href="https://www.balena.io/etcher/">etcher下载</a>；</li><li>分区：添加一个分区用来安装系统，直接从win系统的磁盘管理压缩和添加卷；</li><li>从启动盘启动，进入recovery，打开磁盘工具，选择格式化刚才加的分区为Apfs格式；</li><li>然后选择安装系统，选择刚刚格式化的分区进行安装；</li><li>安装完成重启进入Win系统，你也可以再从启动盘引导进入安装的黑苹果系统看一下安装的系统怎么样（可跳过此步）</li><li>在Win系统中，打开EasyUEFI，（<a href="https://pan.baidu.com/s/16o5YCie91bxoOjrFJdVjhg">下载地址</a>，提取码：85su），选择管理EFI系统分区-EFI系统分区资源管理器，将EFI文件上传到EFI分区；</li><li>返回EasyUEFI主窗口，打开管理EFI启动项，新建启动项，选择其他系统，描述随便输入，浏览文件找到上传的BOOT1x64.efi，完成后将添加的启动项移到最前面；</li><li>重启电脑，选择进入mac系统，OK</li></ol><h2 id="一些常见问题解决"><a class="markdownIt-Anchor" href="#一些常见问题解决"></a> 一些常见问题解决</h2><ol><li><p>即使是Root模式也无法移动和修改文件的问题：</p><ul><li><p>重启进入recovery，打开终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure></li><li><p>重启系统</p></li></ul></li><li><p>Appstore无法登录id问题：</p><p>将com.apple.Boot.plist文件复制替换到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Preferences/SystemConfiguration</span><br></pre></td></tr></table></figure><p>该文件下载地址：<a href="https://pan.baidu.com/s/1JXaV8iHINyYWFCdXX0AWjg">com.apple.Boot.plist</a>，提取码：6cok</p></li><li><p>NTFS格式U盘硬盘只能读不能写的问题：下载安装Mounty软件，下载地址：<a href="https://pan.baidu.com/s/1p5yOWIOXQkh_frWY5ZBwWw">Mounty</a>，提取码：aijg</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
            <tag> Macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows to go</title>
      <link href="2020/05/12/Windows%20to%20go/"/>
      <url>2020/05/12/Windows%20to%20go/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><ol><li>U盘1个，最好大于16G，速度要快一点的，不然运行起来很卡，现在USB3.0的U盘很便宜了</li><li>Windows镜像文件，可以直接去<a href="https://msdn.itellyou.cn/">MSDN，我告诉你</a>下载</li><li>WTG辅助工具，<a href="https://pan.baidu.com/s/18tmZtEWyu-zsDbf5DQPR6g">点击下载</a>，提取码h3aq</li><li>Win系统电脑一台</li></ol><h2 id="开始制作"><a class="markdownIt-Anchor" href="#开始制作"></a> 开始制作</h2><ol><li><p>解压镜像文件</p></li><li><p>打开WTG辅助工具，选择镜像解压目录下的/source/install.vim</p><p><img src="https://s1.ax1x.com/2020/10/09/0BzSsI.png" alt="0BzSsI.png" /></p></li><li><p>选择安装win版本</p></li><li><p>右边可以选择UEFI+GPT或UEFI+MBR，分区可选择分1-3个区</p></li><li><p>点击部署，等在完成就制作好了</p></li></ol><h2 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h2><p>进电脑UEFI设置页面设置U盘启动，启动后根据提示设置好各种选项</p><h2 id="驱动安装"><a class="markdownIt-Anchor" href="#驱动安装"></a> 驱动安装</h2><ol><li>在磁盘管理选择电脑的磁盘联机</li><li>在设备管理看哪些是黄色的，选择更新驱动，目录选择原电脑系统盘的Windows/system32</li><li>等待驱动安装完成</li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel生成CSV格式文件</title>
      <link href="2020/04/12/Excel%E7%94%9F%E6%88%90CSV%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/"/>
      <url>2020/04/12/Excel%E7%94%9F%E6%88%90CSV%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是csv格式文件"><a class="markdownIt-Anchor" href="#什么是csv格式文件"></a> 什么是CSV格式文件</h2><p>​ 逗号分隔值（Comma-Separated Values，CSV），其文件以纯文本形式存储表格数据（数字和文本），文件的每一行都是一个数据记录。每个记录由一个或多个字段组成，用逗号分隔。使用逗号作为字段分隔符是此文件格式的名称的来源，因为分隔字符也可以不是逗号，有时也称为字符分隔值。</p><p>​    CSV广泛用于不同体系结构的应用程序之间交换数据表格信息，解决不兼容数据格式的互通问题，一般按照传输双方既定标准进行格式定义，而其本身并无明确格式标准。</p><p>​    CSV泛指满足以下条件的文件：</p><ul><li>纯文本，使用某个字符集，比如ASCII、Unicode、EBCDIC或GB2312；</li><li>由记录组成（典型的是每行一条记录）；</li><li>每条记录被分隔符分隔为字段（典型分隔符有逗号、分号或制表符；有时分隔符可以包括可选的空格）；</li><li>每条记录都有同样的字段序列。</li></ul><h2 id="csv的格式规范"><a class="markdownIt-Anchor" href="#csv的格式规范"></a> CSV的格式规范</h2><ol><li><p>每一行记录位于一个单独的行上，用回车换行符CRLF(也就是\r\n)分割。</p></li><li><p>文件中的最后一行记录可以有结尾回车换行符，也可以没有。</p></li><li><p>第一行可以存在一个可选的标题头，格式和普通记录行的格式一样。标题头要包含文件记录字段对应的名称，应该有和记录字段一样的数量。（在MIME类型中，标题头行的存在与否可以通过MIME type中的可选”header”参数指明）。</p></li><li><p>在标题头行和普通行每行记录中，会存在一个或多个由半角逗号(,)分隔的字段。整个文件中每行应包含相同数量的字段，空格也是字段的一部分，不应被忽略。每一行记录最后一个字段后不能跟逗号。（通常用逗号分隔，也有其他字符分隔的CSV，需事先约定）。</p></li><li><p>每个字段可用也可不用半角双引号(“)括起来（不过有些程序，如Microsoft的Excel就根本不用双引号）。如果字段没有用引号括起来，那么该字段内部不能出现双引号字符。</p></li><li><p>字段中若包含回车换行符、双引号或者逗号，该字段需要用双引号括起来。</p></li><li><p>如果用双引号括字段，那么出现在字段内的双引号前必须加一个双引号进行转义。</p></li></ol><h2 id="生成csv文件"><a class="markdownIt-Anchor" href="#生成csv文件"></a> 生成CSV文件</h2><ol><li>用Excel编辑完成，选择另存为.csv文件，提示什么都选择是。</li><li>用Notepad++打开.csv文件，将编码格式改为UTF-8，顺便检查下是不是分割之间有多余空格，有空格就得重新制作。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS污染问题</title>
      <link href="2018/11/03/DNS%E6%B1%A1%E6%9F%93%E9%97%AE%E9%A2%98/"/>
      <url>2018/11/03/DNS%E6%B1%A1%E6%9F%93%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是dns污染"><a class="markdownIt-Anchor" href="#什么是dns污染"></a> 什么是DNS污染</h2><p>​某些网络运营商为了某些目的，对DNS进行了某些操作，导致使用ISP的正常上网设置无法通过域名取得正确的IP地址。某些国家或地区出于某些目的为了防止某网站被访问，而且其又掌握部分国际DNS根目录服务器或镜像，也会利用此方法进行屏蔽。<br />​常用的手段有：DNS劫持和DNS污染。</p><h2 id="防除方法"><a class="markdownIt-Anchor" href="#防除方法"></a> 防除方法</h2><p>​对付DNS劫持，只需要把系统的DNS设置手动切换为国外的DNS服务器的IP地址即可解决。<br />对于DNS污染，一般除了使用代理服务器和VPN之类的软件之外，并没有什么其它办法。但是利用我们对DNS污染的了解，还是可以做到不用代理服务器和VPN之类的软件就能解决DNS污染的问题，从而在不使用代理服务器或VPN的情况下访问原本访问不了的一些网站。当然这无法解决所有问题，当一些无法访问的网站本身并不是由DNS污染问题导致的时候，还是需要使用代理服务器或VPN才能访问的。<br />​DNS污染的数据包并不是在网络数据包经过的路由器上，而是在其旁路产生的。所以DNS污染并无法阻止正确的DNS解析结果返回，但由于旁路产生的数据包发回的速度较国外DNS服务器发回的快，操作系统认为第一个收到的数据包就是返回结果，从而忽略其后收到的数据包，从而使得DNS污染得逞。而某些国家的DNS污染在一段时期内的污染IP却是固定不变的，从而可以忽略返回结果是这些IP地址的数据包，直接解决DNS污染的问题。</p><h2 id="验证是否遭遇dns污染"><a class="markdownIt-Anchor" href="#验证是否遭遇dns污染"></a> 验证是否遭遇DNS污染</h2><ol><li><p>Powershell中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all </span><br></pre></td></tr></table></figure><p>在下“DNS 服务器”里找到你使用的DNS服务器地址。</p></li><li><p>再输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup https://letanga.github.io（你的域名） 你的DNS服务器IP</span><br></pre></td></tr></table></figure><p>查看是否能解析。</p></li><li><p>再输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup https://letanga.github.io8.<span class="number">8.8</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure><p>使用Google的DNS服务器验证。</p></li></ol><h2 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法</h2><ol><li>手动修改DNS地址</li><li>使用各种SSH加密代理，在加密代理里进行远程DNS解析，或者使用VPN上网</li><li>修改hosts文件，操作系统中hosts的权限优先级高于DNS服务器，操作系统在访问某个域名时，会先检测HOSTS文件，然后再查询DNS服务器。可以在hosts添加受到污染的DNS地址来解决DNS污染和DNS劫持。</li><li>通过一些软件编程处理，可以直接忽略返回结果是虚假IP地址的数据包，直接解决DNS污染的问题</li><li>如果你是Firefox only用户，并且只用Firefox，又懒得折腾，直接打开Firefox的远程DNS解析就行了。在地址栏中输入：about:config找到network.proxy.socks_remote_dns一项改成true</li><li>使用DNSCrypt软件，此软件与使用的OpenDNS直接建立相对安全的TCP连接并加密请求数据，从而不会被污染</li></ol><h2 id="手动修改dns地址"><a class="markdownIt-Anchor" href="#手动修改dns地址"></a> 手动修改DNS地址</h2><ol><li><p>任务栏按鼠标右键打开“网络和Internet”设置</p></li><li><p>打开更改适配器选项</p></li><li><p>鼠标右键点击连接的适配器属性</p></li><li><p>双击列表中的Internet协议版本4</p></li><li><p>弹出窗口中选择使用下面的DNS服务地址</p></li><li><p>修改需要更换的DNS服务地址</p></li><li><p>常用的DNS有：</p><ul><li>阿里DNS：223.5.5.5 / 223.6.6.6</li><li>114 DNS：114.114.114.114</li><li>Google DNS：8.8.8.8</li><li>百度DNS：180.76.76.76</li></ul></li></ol><h2 id="如何查看网址的ip地址"><a class="markdownIt-Anchor" href="#如何查看网址的ip地址"></a> 如何查看网址的ip地址</h2><ol><li>运行cmd，ping 网址，可以看到IP在网址后面</li><li>在站长之家，输入网址就可以查看IP</li></ol><h2 id="如何修改hosts文件"><a class="markdownIt-Anchor" href="#如何修改hosts文件"></a> 如何修改hosts文件</h2><p>hosts文件配置优先级比DSN服务器高，Windows 用户hosts文件是在“C:\Windows\system32\drivers\etc，注意这个文件一定是在系统盘，如果你的系统在D盘请自行修改前面的盘符，由于Win10系统默认是没有权限去编辑保存系统里的文件，解决方法：</p><p>方法一：把自己的帐户权限提高，在属性-安全里面修改权限，更改hosts为允许安全控制状态</p><p>方法二：将hosts文件复制/移动到桌面，用记事本打开！将修改后的hosts文件放入原来的位置替换以前的hosts文件即可</p><p>方法三：用Notepad++打开hosts文件，修改后保存时提示使用管理员模式修改点确定再次保存</p><p>解决DNS污染问题</p><p>打开hosts文件，在网址前面添加网址的IP，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.30.255.113 github.com</span><br></pre></td></tr></table></figure><p><a href="http://xn--github-917iw5sdtg9vgl9bmy4jmm6di7q.com">之后在浏览器输入github.com</a>，系统会跳过DNS服务器直接访问网址IP192.30.255.113</p>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10修改用户名及用户文件夹名</title>
      <link href="2018/08/03/Win10%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%8F%8A%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D/"/>
      <url>2018/08/03/Win10%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%8F%8A%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><ol><li>准备一个U盘制作PE启动盘</li><li>备份重要文件</li></ol><h2 id="修改用户名"><a class="markdownIt-Anchor" href="#修改用户名"></a> 修改用户名</h2><p>运行netplwiz，点属性，修改用户名即可</p><h2 id="修改注册表"><a class="markdownIt-Anchor" href="#修改注册表"></a> 修改注册表</h2><ol><li>运行regedit</li><li>依次展开<strong>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Profilelist</strong>，在Profilelist下的文件夹对应系统中用户，而文件夹中ProfileImagePath值是指向每个用户文件夹的地址，一个个点击查看，找到 之前用户名用户 的对应所在的ProfileImagePath值</li><li>修改ProfileImagePath的值，将地址改为修改成 后来你改为的文件夹名</li></ol><h2 id="修改用户文件夹名"><a class="markdownIt-Anchor" href="#修改用户文件夹名"></a> 修改用户文件夹名</h2><p>直接重启会找不到用户的，所以要重命名以前用户文件夹名为现在用户名</p><ol><li>插上提前做好的PE启动盘，重启电脑从U盘启动PE系统</li><li>进入C:\用户，找到以前用户名的文件夹，重命名为现在的用户名</li></ol><h2 id="环境变量设置"><a class="markdownIt-Anchor" href="#环境变量设置"></a> 环境变量设置</h2><p>如果以前配置了用户目录的环境变量，需要改一下</p><ol><li>鼠标右键此电脑图标选择属性</li><li>依次点击高级系统设置-环境变量</li><li>查看哪些有含以前用户名的环境变量，全部修改为现在的用户名</li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win系统将任意应用程序添加到运行命令</title>
      <link href="2018/03/15/Win%E7%B3%BB%E7%BB%9F%E5%B0%86%E4%BB%BB%E6%84%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%88%B0%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4/"/>
      <url>2018/03/15/Win%E7%B3%BB%E7%BB%9F%E5%B0%86%E4%BB%BB%E6%84%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%88%B0%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Win系统中，运行命令可以直接输入一些命令直接打开系统应用程序而不用找到其图标或者快捷方式所在位置，如运行gpedit.msc就可以直接打开注册表编辑器，运行calc就可以打开计算器等等，但是非系统程序想要运行只能找到应用图标才能打开，如果经常使用某个应用程序，但是桌面又有太多快捷图标，一时都找不到应用的图标，或者想直接用运行命令打开应用程序而不用鼠标双击应用，可以使用一种方法将应用程序添加到运行命令中，步骤：</p><ol><li>在C盘新建一个文件夹，可以任意命名，比如quickstar；</li><li>在环境变量-&gt;用户环境变量path设置中添加刚刚新建的文件夹所在目录；</li><li>只需将你想要添加应用程序的快捷方式复制到该目录下；</li><li>重命名快捷方式，如git重命名gt，火狐浏览器重命名hf；</li></ol><p>然后就可以直接运行gt，hf等直接打开git和火狐浏览器了，直接win+r键打开运行，输入命令，从此不用依靠鼠标打开应用程序了。</p>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIY STM32平衡小车</title>
      <link href="2018/03/04/DIY%20STM32%E5%B9%B3%E8%A1%A1%E5%B0%8F%E8%BD%A6/"/>
      <url>2018/03/04/DIY%20STM32%E5%B9%B3%E8%A1%A1%E5%B0%8F%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="平衡车原理"><a class="markdownIt-Anchor" href="#平衡车原理"></a> 平衡车原理</h2><p>先看一下成品是什么样子的</p><p><a href="https://imgtu.com/i/6lGgN8"><img src="https://s3.ax1x.com/2021/03/08/6lGgN8.jpg" alt="6lGgN8.jpg" /></a></p><p>准备就做成这个样子的。</p><p>想象在电机不供电不动的情况下，将车放在地上下松手后，车子肯定会向前或向后倒，就像人站在一根细的杆子上，大脑不控制肯定是站不稳的，因为重心不在适当的点，人通过大脑完成调节，而平衡车调节靠STM32控制电机的转速，转向来使车平衡不倒。</p><h2 id="材料购买"><a class="markdownIt-Anchor" href="#材料购买"></a> 材料购买</h2><p>电机带编码器x2，一般直接购买底盘；</p><p>电池座，18650电池x3；</p><p>M3铜柱、螺丝、螺母，多买一些备用，容易弄丢；</p><p>蓝牙模块；</p><p>亚克力板可以直接购买成品，也可以定制，会CAD用CAD画，不会用AD画，导出DXF格式，去某宝定制；</p><p>其他可能会用到的：2.4g模块，超声波模块，红外循迹模块，电机驱动模块，红外模块，MPU6050模块，STM32C8T6最小系统，MPU6050和STM32C8T6可以直接集成在板子上。</p><p>所需电子器件等硬件设计完成再购买。</p><h2 id="硬件分析设计"><a class="markdownIt-Anchor" href="#硬件分析设计"></a> 硬件分析设计</h2><h3 id="原理图设计"><a class="markdownIt-Anchor" href="#原理图设计"></a> 原理图设计</h3><h4 id="电源设计"><a class="markdownIt-Anchor" href="#电源设计"></a> 电源设计</h4><p>因为使用3个18650电池串联，所以需要先降压，可以使用7805稳压芯片先降到5V，然后再通过AMS11173.3,将5V降到3.3v</p><p><a href="https://imgtu.com/i/68Fqkn"><img src="https://s3.ax1x.com/2021/03/09/68Fqkn.jpg" alt="68Fqkn.jpg" /></a></p><p><a href="https://imgtu.com/i/68Fx6U"><img src="https://s3.ax1x.com/2021/03/09/68Fx6U.jpg" alt="68Fx6U.jpg" /></a></p><h4 id="stm32主控设计"><a class="markdownIt-Anchor" href="#stm32主控设计"></a> STM32主控设计</h4><p>因为用不到RTC，所以省略32.768KHz的晶振，只用8M的高速外部晶振</p><p><a href="https://imgtu.com/i/68kpm4"><img src="https://s3.ax1x.com/2021/03/09/68kpm4.jpg" alt="68kpm4.jpg" /></a></p><h4 id="mpu6050模块设计"><a class="markdownIt-Anchor" href="#mpu6050模块设计"></a> MPU6050模块设计</h4><p><a href="https://imgtu.com/i/68knne"><img src="https://s3.ax1x.com/2021/03/09/68knne.jpg" alt="68knne.jpg" /></a></p><h4 id="电机驱动模块设计"><a class="markdownIt-Anchor" href="#电机驱动模块设计"></a> 电机驱动模块设计</h4><p><a href="https://imgtu.com/i/68kG1f"><img src="https://s3.ax1x.com/2021/03/09/68kG1f.jpg" alt="68kG1f.jpg" /></a></p><h4 id="蓝牙模块"><a class="markdownIt-Anchor" href="#蓝牙模块"></a> 蓝牙模块</h4><p>蓝牙模块使用购买的模块直插，所以只要添加对应管脚数的排母</p><p><a href="https://imgtu.com/i/68kYjS"><img src="https://s3.ax1x.com/2021/03/09/68kYjS.jpg" alt="68kYjS.jpg" /></a></p><h3 id="pcb设计"><a class="markdownIt-Anchor" href="#pcb设计"></a> PCB设计</h3><p>TOP层：</p><p><a href="https://imgtu.com/i/68kXEd"><img src="https://s3.ax1x.com/2021/03/09/68kXEd.jpg" alt="68kXEd.jpg" /></a></p><p>BOTTOM层：</p><p><a href="https://imgtu.com/i/68AAEj"><img src="https://s3.ax1x.com/2021/03/09/68AAEj.jpg" alt="68AAEj.jpg" /></a></p><h2 id="bom表整理配单"><a class="markdownIt-Anchor" href="#bom表整理配单"></a> BOM表整理配单</h2><table><thead><tr><th>Comment</th><th>Description</th><th>Designator</th><th>Footprint</th><th>Value</th><th>Quantity</th></tr></thead><tbody><tr><td>Cap2</td><td>引线型铝电解电容</td><td>C1, C2</td><td>RADIAL,6X12MM</td><td>16v,330uF</td><td>2</td></tr><tr><td>Cap</td><td>0603贴片电容</td><td>C3, C6, C7, C9, C10,  C12, C13, C14, C16, C17, C18, C19, C20</td><td>0603C</td><td>100nF</td><td>13</td></tr><tr><td>Cap2</td><td>引线型铝电解电容</td><td>C4, C5</td><td>RADIAL,6X12MM</td><td>10v,470uF</td><td>2</td></tr><tr><td>Cap</td><td>0603贴片电容</td><td>C8</td><td>0603C</td><td>10nF</td><td>1</td></tr><tr><td>Cap2</td><td>引线型铝电解电容</td><td>C11</td><td>RADIAL,5X11MM</td><td>10uF,25V</td><td>1</td></tr><tr><td>Cap</td><td>0603贴片电容</td><td>C15</td><td>0603C</td><td>100pF</td><td>1</td></tr><tr><td>Cap</td><td>0603贴片电容</td><td>C22, C24</td><td>0603C</td><td>22pF</td><td>2</td></tr><tr><td>LED0</td><td>Red、Blue</td><td>D1, D2, D3, D4</td><td>0603LED</td><td></td><td>4</td></tr><tr><td>MF-NSMF050</td><td>保险丝</td><td>F1</td><td>1206F</td><td></td><td>1</td></tr><tr><td>Header 20P</td><td>20p排针</td><td>H1, H2</td><td>HDR1X20</td><td></td><td>2</td></tr><tr><td>CDS-2P</td><td>2p电源插座</td><td>J1</td><td>CDS-2P</td><td></td><td>1</td></tr><tr><td>BLUE</td><td>蓝牙模块</td><td>J2</td><td>BLUE</td><td></td><td>1</td></tr><tr><td>MSS22D18</td><td>贴片6脚开关</td><td>KG1</td><td>MSS22D18</td><td></td><td>1</td></tr><tr><td>PH-6P</td><td>PH2.0  6p插座</td><td>M1, M2</td><td>PH2.0 6P</td><td></td><td>2</td></tr><tr><td>Header 4</td><td>4p排针</td><td>P1</td><td>HDR1X4</td><td></td><td>1</td></tr><tr><td>Header 3X2</td><td>3x2p排针</td><td>P2</td><td>HDR2X3</td><td></td><td>1</td></tr><tr><td>Res2</td><td>0603贴片电阻</td><td>R1, R2, R4, R5, R6,  R9</td><td>0603R</td><td>10K</td><td>6</td></tr><tr><td>Res2</td><td>0603贴片电阻</td><td>R3</td><td>0603R</td><td>3.3K</td><td>1</td></tr><tr><td>Res2</td><td>0603贴片电阻</td><td>R7, R8</td><td>0603R</td><td>100K</td><td>2</td></tr><tr><td>Res2</td><td>0603贴片电阻</td><td>R10, R11</td><td>0603R</td><td>680R</td><td>2</td></tr><tr><td>SW1</td><td>轻触按键开关</td><td>S2</td><td>KEY_4(SOP)</td><td></td><td>1</td></tr><tr><td>78M05</td><td>DCDC芯片</td><td>U1</td><td>TO-252-2-180</td><td></td><td>1</td></tr><tr><td>MPU-6050</td><td>六轴传感器</td><td>U2</td><td>QFN-24_4x4x05P</td><td></td><td>1</td></tr><tr><td>TB6612FNG</td><td>电机驱动芯片</td><td>U3</td><td>LC-SSOP-24_208mil</td><td></td><td>1</td></tr><tr><td>STM32F103C8</td><td>STM32 MCU</td><td>U4</td><td>LQFP-48_7x7x05P</td><td></td><td>1</td></tr><tr><td>AMS1117-3.3</td><td>低压差线性稳压(LDO)</td><td>VR1</td><td>SOT-23(SOT-23-3)</td><td></td><td>1</td></tr><tr><td>XTAL</td><td>直插式晶振HC-49S</td><td>Y2</td><td>XTAL_US</td><td>8M</td><td>1</td></tr></tbody></table><p>拿着上面BOM表就可以配单了</p><h2 id="软件设计"><a class="markdownIt-Anchor" href="#软件设计"></a> 软件设计</h2><p>先实现基本的直立控制，再实现通过上位机，遥控等方式控制小车行驶，因为控制小车的基础是基本的直立。两种PID控制方法，串级和并级，关于串并PID可以参考<a href="">这里</a>，两种PID参数是完全不相同的，需要分别调参。</p><h3 id="串级pid"><a class="markdownIt-Anchor" href="#串级pid"></a> 串级PID</h3><p>主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;motor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;I2C.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;car.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//设置优先级分组2</span></span><br><span class="line">USART1_Config();<span class="comment">//串口1初始化，用于下载程序和打印MPU6050相关的日志</span></span><br><span class="line">TIM2_PWM_Init();<span class="comment">//定时器2初始化用于产生PWM波控制电机</span></span><br><span class="line">TIM3_Encoder_Init(); <span class="comment">//定时器3初始化，编码器模式用于测车速</span></span><br><span class="line">TIM4_Encoder_Init();<span class="comment">//定时器4初始化，编码器模式用于测车速</span></span><br><span class="line">MOTOR_GPIO_Config();<span class="comment">//电机GPIO初始化</span></span><br><span class="line">LED_GPIO_Config();<span class="comment">//LED初始化，用于显示MPU6050状态，异常亮，正常灭</span></span><br><span class="line">i2cInit();<span class="comment">//I2C初始化</span></span><br><span class="line">delay_nms(<span class="number">10</span>);</span><br><span class="line">MPU6050_Init();<span class="comment">//MPU6050初始化</span></span><br><span class="line">CarUpstandInit();<span class="comment">//直立参数初始化</span></span><br><span class="line">SysTick_Init();<span class="comment">//Systick初始化，使用systick中断控制整个系统的控制，用于整个系统运行</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">MPU6050_Pose();<span class="comment">//不断获取姿态</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>延时函数使用粗略的延时，因为Systick被用于系统控制了，也可以开一个定时器延时</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 j;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u32 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">delay_us(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ms</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> *time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_nms</span><span class="params">(u16 time)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">   u16 i=<span class="number">0</span>;  </span><br><span class="line">   <span class="keyword">while</span>(time--)</span><br><span class="line">   &#123;</span><br><span class="line">      i=<span class="number">12000</span>;</span><br><span class="line">      <span class="keyword">while</span>(i--) ;    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>串口配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;misc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x_usart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;<span class="comment">//定义初始化结构体</span></span><br><span class="line">USART_InitTypeDef USART_InitStructure;<span class="comment">//定义初始化结构体</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//使能GPIO和串口时钟</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO PA9</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO PA10</span></span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = <span class="number">115200</span>;<span class="comment">//设置波特率115200</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//8位数据位</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//1位停止位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No ;<span class="comment">//无奇偶校验位</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//不使用硬件流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//发送接收模式</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure); <span class="comment">//初始化串口1</span></span><br><span class="line">USART_Cmd(USART1, ENABLE);<span class="comment">//使能串口1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">USART_SendData(USART1, (<span class="keyword">unsigned</span> <span class="keyword">char</span>) ch);<span class="comment">//将Printf内容发往串口</span></span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TC)!= SET);</span><br><span class="line"><span class="keyword">return</span> (ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintChar</span><span class="params">(<span class="keyword">char</span> *s)</span><span class="comment">//输出字符串到串口1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">p=s;</span><br><span class="line"><span class="keyword">while</span>(*p != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, *p);        <span class="comment">//通过库函数  发送数据</span></span><br><span class="line">    <span class="keyword">while</span>( USART_GetFlagStatus(USART1,USART_FLAG_TC)!= SET);<span class="comment">//等待发送完成。   检测 USART_FLAG_TC 是否置1；    //见库函数 P359 介绍</span></span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定时器配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM2_PWM_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u16 CCR3_Val = <span class="number">0</span>;</span><br><span class="line">u16 CCR4_Val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;<span class="comment">//定义初始化结构体</span></span><br><span class="line">TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;<span class="comment">//定义初始化结构体</span></span><br><span class="line">TIM_OCInitTypeDef  TIM_OCInitStructure;<span class="comment">//定义初始化结构体</span></span><br><span class="line"></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); <span class="comment">//使能定时器2时钟，PCLK1经过2倍频后作为TIM2的时钟源等于72MHz</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); <span class="comment">//使能GPIOA时钟</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2 | GPIO_Pin_3;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line">    TIM_TimeBaseStructure.TIM_Period = <span class="number">999</span> ;<span class="comment">//ARR 当定时器从0计数到999，即为1000次，为一个定时周期</span></span><br><span class="line">    TIM_TimeBaseStructure.TIM_Prescaler = <span class="number">0</span>;<span class="comment">//设置预分频：不预分频，即为72MHz</span></span><br><span class="line">    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1 ;<span class="comment">//设置时钟分频系数：不分频</span></span><br><span class="line">    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//向上计数模式</span></span><br><span class="line"></span><br><span class="line">    TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseStructure);</span><br><span class="line"></span><br><span class="line">    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;<span class="comment">//配置为PWM模式1</span></span><br><span class="line">    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;<span class="comment">//比较输出使能</span></span><br><span class="line">    TIM_OCInitStructure.TIM_Pulse = CCR3_Val;<span class="comment">//设置跳变值，当计数器计数到这个值时，电平发生跳变</span></span><br><span class="line">    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;<span class="comment">//当定时器计数值小于CCR1_Val时为高电平</span></span><br><span class="line"></span><br><span class="line">    TIM_OC3Init(TIM2, &amp;TIM_OCInitStructure);<span class="comment">//使能通道3</span></span><br><span class="line">    TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);</span><br><span class="line"></span><br><span class="line">    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;</span><br><span class="line">    TIM_OCInitStructure.TIM_Pulse = CCR4_Val;<span class="comment">//设置通道2的电平跳变值，输出另外一个占空比的PWM</span></span><br><span class="line">    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;  <span class="comment">//当定时器计数值小于CCR1_Val时为高电平</span></span><br><span class="line"></span><br><span class="line">    TIM_OC4Init(TIM2, &amp;TIM_OCInitStructure);<span class="comment">//使能通道4</span></span><br><span class="line">    TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);</span><br><span class="line"></span><br><span class="line">    TIM_ARRPreloadConfig(TIM2, ENABLE);<span class="comment">// 使能TIM3重载寄存器ARR</span></span><br><span class="line">    TIM_Cmd(TIM2, ENABLE);<span class="comment">//使能定时器2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM3_Encoder_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;</span><br><span class="line">    TIM_ICInitTypeDef TIM_ICInitStructure;</span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);<span class="comment">//使能定时器3时钟</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//使能GPIO时钟</span></span><br><span class="line"></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO PA6 PA7作为编码器输入引脚</span></span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority =<span class="number">1</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//定时器3中断优先级初始化</span></span><br><span class="line"></span><br><span class="line">    TIM_DeInit(TIM3);<span class="comment">//重新初始化定时器3</span></span><br><span class="line"></span><br><span class="line">    TIM_TimeBaseStructure.TIM_Prescaler = <span class="number">0x0</span>;</span><br><span class="line">    TIM_TimeBaseStructure.TIM_Period = <span class="number">0xFFFF</span>;  </span><br><span class="line">    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//向上计数模式 </span></span><br><span class="line">    TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseStructure);</span><br><span class="line"></span><br><span class="line">    TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_BothEdge, TIM_ICPolarity_BothEdge); <span class="comment">//TIM_ICPolarity_Rising上升沿捕获</span></span><br><span class="line">    TIM_ICStructInit(&amp;TIM_ICInitStructure);</span><br><span class="line">    TIM_ICInitStructure.TIM_ICFilter = <span class="number">6</span>; <span class="comment">//无滤波器</span></span><br><span class="line">    TIM_ICInit(TIM3, &amp;TIM_ICInitStructure);</span><br><span class="line"></span><br><span class="line">    TIM_ClearFlag(TIM3, TIM_FLAG_Update);</span><br><span class="line">    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);<span class="comment">//使能中断</span></span><br><span class="line"></span><br><span class="line">    TIM_Cmd(TIM3, ENABLE);<span class="comment">//使能定时器3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM4_Encoder_Init</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//和TIM3一样</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;</span><br><span class="line">    TIM_ICInitTypeDef TIM_ICInitStructure;</span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure; </span><br><span class="line"></span><br><span class="line">    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_StructInit(&amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line">    TIM_DeInit(TIM4);</span><br><span class="line"></span><br><span class="line">    TIM_TimeBaseStructure.TIM_Prescaler = <span class="number">0x0</span>;  <span class="comment">// No prescaling </span></span><br><span class="line">    TIM_TimeBaseStructure.TIM_Period = <span class="number">0xFFFF</span>;  </span><br><span class="line">    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  <span class="comment">//向上计数模式 </span></span><br><span class="line">    TIM_TimeBaseInit(TIM4, &amp;TIM_TimeBaseStructure);</span><br><span class="line"></span><br><span class="line">    TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_BothEdge, TIM_ICPolarity_BothEdge); <span class="comment">//TIM_ICPolarity_Rising上升沿捕获</span></span><br><span class="line">    TIM_ICStructInit(&amp;TIM_ICInitStructure);</span><br><span class="line">    TIM_ICInitStructure.TIM_ICFilter = <span class="number">6</span>; <span class="comment">//无滤波器</span></span><br><span class="line">    TIM_ICInit(TIM4, &amp;TIM_ICInitStructure);</span><br><span class="line"></span><br><span class="line">    TIM_ClearFlag(TIM4, TIM_FLAG_Update);</span><br><span class="line">    TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);  <span class="comment">//使能中断</span></span><br><span class="line"></span><br><span class="line">    TIM_Cmd(TIM4, ENABLE);     <span class="comment">//使能定时器3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM3,TIM_IT_Update)!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">TIM_ClearITPendingBit(TIM3,TIM_IT_Update);<span class="comment">//清除中断标志位</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM4_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;           </span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM4,TIM_IT_Update)!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">TIM_ClearITPendingBit(TIM4,TIM_IT_Update);<span class="comment">//清除中断标志位</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电机配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;motor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MOTOR_GPIO_Config</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;<span class="comment">//定义初始化结构体</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<span class="comment">//使能GPIO时钟</span></span><br><span class="line"></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;<span class="comment">//选择要控制的GPIOB引脚</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//设置引脚模式为通用推挽输出  </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置引脚速率为50MHz</span></span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO  </span></span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_13 | GPIO_Pin_14|GPIO_Pin_12 | GPIO_Pin_15);<span class="comment">//全部初始化为高电平，制动状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LED配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_GPIO_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;<span class="comment">//定义初始化结构体</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC| RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//使能GPIOB和AFIO的外设时钟</span></span><br><span class="line"></span><br><span class="line">    GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable , ENABLE);<span class="comment">//改变指定管脚的映射 GPIO_Remap_SWJ_JTAGDisable ，JTAG-DP 禁用 + SW-DP 使能   </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;<span class="comment">//选择要控制的GPIOB引脚</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置引脚速率为50MHz</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;<span class="comment">//设置引脚模式为通用推挽输出</span></span><br><span class="line"></span><br><span class="line">  GPIO_Init(GPIOC, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIOB </span></span><br><span class="line"></span><br><span class="line">GPIO_SetBits(GPIOC, GPIO_Pin_13);<span class="comment">//打开led灯</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>软件I2C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;I2C.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCL_H         GPIOB-&gt;BSRR = GPIO_Pin_8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCL_L         GPIOB-&gt;BRR  = GPIO_Pin_8 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDA_H         GPIOB-&gt;BSRR = GPIO_Pin_9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDA_L         GPIOB-&gt;BRR  = GPIO_Pin_9 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCL_read      GPIOB-&gt;IDR  &amp; GPIO_Pin_8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDA_read      GPIOB-&gt;IDR  &amp; GPIO_Pin_9 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2C_delay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">while</span> (i)</span><br><span class="line">        i--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">I2C_Start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SDA_H;</span><br><span class="line">    SCL_H;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    <span class="keyword">if</span> (!SDA_read)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    SDA_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    <span class="keyword">if</span> (SDA_read)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    SDA_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2C_Stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SCL_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SDA_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SCL_H;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SDA_H;</span><br><span class="line">    I2C_delay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2C_Ack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SCL_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SDA_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SCL_H;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SCL_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2C_NoAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SCL_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SDA_H;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SCL_H;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SCL_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">I2C_WaitAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SCL_L;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SDA_H;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    SCL_H;</span><br><span class="line">    I2C_delay();</span><br><span class="line">    <span class="keyword">if</span> (SDA_read) &#123;</span><br><span class="line">        SCL_L;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SCL_L;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2C_SendByte</span><span class="params">(<span class="keyword">uint8_t</span> byte)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> i = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        SCL_L;</span><br><span class="line">        I2C_delay();</span><br><span class="line">        <span class="keyword">if</span> (byte &amp; <span class="number">0x80</span>)</span><br><span class="line">            SDA_H;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            SDA_L;</span><br><span class="line">        byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        I2C_delay();</span><br><span class="line">        SCL_H;</span><br><span class="line">        I2C_delay();</span><br><span class="line">    &#125;</span><br><span class="line">    SCL_L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint8_t</span> <span class="title">I2C_ReceiveByte</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> i = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">uint8_t</span> byte = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SDA_H;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        SCL_L;</span><br><span class="line">        I2C_delay();</span><br><span class="line">        SCL_H;</span><br><span class="line">        I2C_delay();</span><br><span class="line">        <span class="keyword">if</span> (SDA_read) &#123;</span><br><span class="line">            byte |= <span class="number">0x01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SCL_L;</span><br><span class="line">    <span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">i2cInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO_InitTypeDef gpio;</span><br><span class="line">    </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB , ENABLE); </span><br><span class="line">    </span><br><span class="line">    gpio.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;</span><br><span class="line">    gpio.GPIO_Speed = GPIO_Speed_2MHz;</span><br><span class="line">    gpio.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;gpio);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">i2cWriteBuffer</span><span class="params">(<span class="keyword">uint8_t</span> addr, <span class="keyword">uint8_t</span> reg, <span class="keyword">uint8_t</span> len, <span class="keyword">uint8_t</span> * data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (!I2C_Start())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    I2C_SendByte(addr &lt;&lt; <span class="number">1</span> | I2C_Direction_Transmitter);</span><br><span class="line">    <span class="keyword">if</span> (!I2C_WaitAck()) &#123;</span><br><span class="line">        I2C_Stop();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    I2C_SendByte(reg);</span><br><span class="line">    I2C_WaitAck();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        I2C_SendByte(data[i]);</span><br><span class="line">        <span class="keyword">if</span> (!I2C_WaitAck()) &#123;</span><br><span class="line">            I2C_Stop();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    I2C_Stop();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">i2cwrite</span><span class="params">(<span class="keyword">uint8_t</span> addr, <span class="keyword">uint8_t</span> reg, <span class="keyword">uint8_t</span> len, <span class="keyword">uint8_t</span> * data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i2cWriteBuffer(addr,reg,len,data))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return FALSE;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">i2cread</span><span class="params">(<span class="keyword">uint8_t</span> addr, <span class="keyword">uint8_t</span> reg, <span class="keyword">uint8_t</span> len, <span class="keyword">uint8_t</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i2cRead(addr,reg,len,buf))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return FALSE;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">i2cWrite</span><span class="params">(<span class="keyword">uint8_t</span> addr, <span class="keyword">uint8_t</span> reg, <span class="keyword">uint8_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!I2C_Start())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    I2C_SendByte(addr &lt;&lt; <span class="number">1</span> | I2C_Direction_Transmitter);</span><br><span class="line">    <span class="keyword">if</span> (!I2C_WaitAck()) &#123;</span><br><span class="line">        I2C_Stop();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    I2C_SendByte(reg);</span><br><span class="line">    I2C_WaitAck();</span><br><span class="line">    I2C_SendByte(data);</span><br><span class="line">    I2C_WaitAck();</span><br><span class="line">    I2C_Stop();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">i2cRead</span><span class="params">(<span class="keyword">uint8_t</span> addr, <span class="keyword">uint8_t</span> reg, <span class="keyword">uint8_t</span> len, <span class="keyword">uint8_t</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!I2C_Start())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    I2C_SendByte(addr &lt;&lt; <span class="number">1</span> | I2C_Direction_Transmitter);</span><br><span class="line">    <span class="keyword">if</span> (!I2C_WaitAck()) &#123;</span><br><span class="line">        I2C_Stop();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    I2C_SendByte(reg);</span><br><span class="line">    I2C_WaitAck();</span><br><span class="line">    I2C_Start();</span><br><span class="line">    I2C_SendByte(addr &lt;&lt; <span class="number">1</span> | I2C_Direction_Receiver);</span><br><span class="line">    I2C_WaitAck();</span><br><span class="line">    <span class="keyword">while</span> (len) &#123;</span><br><span class="line">        *buf = I2C_ReceiveByte();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">            I2C_NoAck();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            I2C_Ack();</span><br><span class="line">        buf++;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    I2C_Stop();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">i2cGetErrorCounter</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TODO maybe fix this, but since this is test code, doesn&#x27;t matter.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Systick配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;car.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">u16 TimeDelay=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">SysTick_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (SysTick_Config(SystemCoreClock / <span class="number">200</span>))<span class="comment">// 1s/x= a ms  即5ms产生一次systick中断</span></span><br><span class="line"> &#123; </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">SysTick-&gt;CTRL |=  SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//5ms定时器</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">GetMotorPulse();<span class="comment">//脉冲计算</span></span><br><span class="line">SpeedControl();<span class="comment">//速度环</span></span><br><span class="line">TurnControl(); <span class="comment">//转向环</span></span><br><span class="line">AngleControl();<span class="comment">//角度环</span></span><br><span class="line">MotorOutput();<span class="comment">//小车总PWM输出  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小车平衡控制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;car.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeed;<span class="comment">//车子当前速度值</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeedOld;<span class="comment">//车子上一次速度值</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarPosition;<span class="comment">//车子位置</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarAngle;<span class="comment">//车子角度</span></span><br><span class="line"><span class="keyword">float</span> BST_fAngleControlOut;<span class="comment">//角度控制PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOut;<span class="comment">//速度控制PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fTurnControlOut;<span class="comment">//转向环控制PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fLeftMotorOut;<span class="comment">//左电机输出PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fRightMotorOut;<span class="comment">//右电机输出PWM值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******电机控制参数******/</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOut;<span class="comment">//速度控制PWM</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOutOld;</span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOutNew;</span><br><span class="line"><span class="keyword">float</span> BST_fAngleControlOut;<span class="comment">//角度控制PWM</span></span><br><span class="line"><span class="keyword">float</span> BST_fTurnControlOut;<span class="comment">//转向控制PWM</span></span><br><span class="line"><span class="keyword">float</span> BST_fLeftMotorOut;<span class="comment">//左电机输出PWM</span></span><br><span class="line"><span class="keyword">float</span> BST_fRightMotorOut;<span class="comment">//右电机输出PWM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----角度环和速度环PID控制参数-----*/</span><span class="comment">//以下参考为重点调试参考，同电池电压有关，建议充好电再调试</span></span><br><span class="line"><span class="keyword">float</span>  BST_fCarAngle_P =<span class="number">84</span>;<span class="comment">//角度环P</span></span><br><span class="line"><span class="keyword">float</span>  BST_fCarAngle_D =<span class="number">0.3</span>;<span class="comment">//角度环D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span>  BST_fCarSpeed_P=<span class="number">-0.4</span>;<span class="comment">//速度环P</span></span><br><span class="line"><span class="keyword">float</span>  BST_fCarSpeed_I=<span class="number">-0.002</span>;<span class="comment">//速度环I</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarTurn=<span class="number">-0.28</span>;<span class="comment">//转向环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******速度控制参数******/</span></span><br><span class="line">s16   BST_s16LeftMotorPulse; <span class="comment">//左电机脉冲数</span></span><br><span class="line">s16  BST_s16RightMotorPulse;<span class="comment">//右电机脉冲数</span></span><br><span class="line"></span><br><span class="line">s32   BST_s32LeftMotorPulseOld;</span><br><span class="line">s32   BST_s32RightMotorPulseOld;</span><br><span class="line">s32   BST_s32LeftMotorPulseSigma;<span class="comment">//50ms左电机叠加值</span></span><br><span class="line">s32   BST_s32RightMotorPulseSigma;<span class="comment">//50ms右电机叠加值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeed;<span class="comment">//测速码盘得出的车速</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeedOld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarPosition;<span class="comment">//测速码盘通过计算得到的小车位移</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----悬停参数-----*/</span></span><br><span class="line"><span class="keyword">int</span> leftstop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rightstop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CarUpstandInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_s16LeftMotorPulse = BST_s16RightMotorPulse = <span class="number">0</span>;<span class="comment">//左右脉冲值初始化</span></span><br><span class="line">BST_s32LeftMotorPulseSigma = BST_s32RightMotorPulseSigma = <span class="number">0</span>;<span class="comment">//叠加脉冲数初始化</span></span><br><span class="line"></span><br><span class="line">BST_fCarSpeed = BST_fCarSpeedOld = <span class="number">0</span>;<span class="comment">//平衡小车车速初始化</span></span><br><span class="line">BST_fCarPosition = <span class="number">0</span>;<span class="comment">//平衡小车位移量初始化</span></span><br><span class="line">BST_fCarAngle= <span class="number">0</span>;<span class="comment">//平衡小车车速初始化</span></span><br><span class="line"></span><br><span class="line">BST_fAngleControlOut = BST_fSpeedControlOut=<span class="number">0</span>;<span class="comment">//角度PWM、车速PWM、蓝牙控制PWM初始化</span></span><br><span class="line">BST_fLeftMotorOut= BST_fRightMotorOut   = <span class="number">0</span>;<span class="comment">//左右车轮PWM输出值初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMotorPulse</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//采集电机速度脉冲</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">uint16_t</span> u16TempLeft;</span><br><span class="line"><span class="keyword">uint16_t</span> u16TempRight;</span><br><span class="line"></span><br><span class="line">u16TempLeft = TIM_GetCounter(TIM3);<span class="comment">//TIM3定时器计算调用</span></span><br><span class="line"> u16TempRight= TIM_GetCounter(TIM4);<span class="comment">//TIM4定时器计算调用</span></span><br><span class="line">leftstop=u16TempLeft;</span><br><span class="line">rightstop=u16TempRight;</span><br><span class="line">TIM_SetCounter(TIM3,<span class="number">0</span>);<span class="comment">//TIM3-&gt;CNT = 0;</span></span><br><span class="line">TIM_SetCounter(TIM4,<span class="number">0</span>);<span class="comment">//TIM4-&gt;CNT = 0;//清零</span></span><br><span class="line">BST_s16LeftMotorPulse=u16TempLeft;</span><br><span class="line">BST_s16RightMotorPulse=(-u16TempRight);</span><br><span class="line"></span><br><span class="line">BST_s32LeftMotorPulseSigma  +=BST_s16LeftMotorPulse;<span class="comment">//脉冲值叠加 40ms叠加值</span></span><br><span class="line">BST_s32RightMotorPulseSigma +=BST_s16RightMotorPulse;<span class="comment">//脉冲值叠加 40ms叠加值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AngleControl</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Pitch==<span class="number">0</span>||Pitch&lt;<span class="number">-20</span>||Pitch&gt;<span class="number">20</span>)<span class="comment">//MPU6050状态指示灯 STM32核心板 PC13 绿色灯亮起为不正常</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Pitch=1;</span></span><br><span class="line">  GPIO_ResetBits(GPIOC, GPIO_Pin_13);<span class="comment">//MPU6050状态指示灯 STM32核心板 PC13 绿色灯亮起为不正常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;GPIO_SetBits(GPIOC, GPIO_Pin_13);&#125;<span class="comment">//MPU6050状态正常时LED灯熄灭</span></span><br><span class="line"></span><br><span class="line">BST_fCarAngle = Roll- CAR_ZERO_ANGLE;<span class="comment">//DMP ROLL滚动方向角度与预设小车倾斜角度值的差得出角度   </span></span><br><span class="line">BST_fAngleControlOut =  (BST_fCarAngle-BST_fSpeedControlOutNew) * BST_fCarAngle_P + gyro[<span class="number">0</span>] * BST_fCarAngle_D ;<span class="comment">//角度PD控制   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TurnControl</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_fTurnControlOut=BST_fCarTurn*gyro[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeedControl</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_fCarSpeed = (BST_s32LeftMotorPulseSigma  + BST_s32RightMotorPulseSigma );<span class="comment">// * 0.5 ;//左右电机脉冲数平均值作为小车当前车速</span></span><br><span class="line">BST_s32LeftMotorPulseSigma =BST_s32RightMotorPulseSigma = <span class="number">0</span>;  <span class="comment">//全局变量 注意及时清零</span></span><br><span class="line">BST_fCarSpeedOld *= <span class="number">0.7</span>;</span><br><span class="line">BST_fCarSpeedOld +=BST_fCarSpeed*<span class="number">0.3</span>;</span><br><span class="line">BST_fCarPosition += BST_fCarSpeedOld;<span class="comment">//路程  即速度积分   1/11 3:03</span></span><br><span class="line"><span class="keyword">if</span>(stopflag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_fCarPosition=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//积分上限设限//</span></span><br><span class="line"><span class="keyword">if</span>((s32)BST_fCarPosition &gt; CAR_POSITION_MAX)    BST_fCarPosition = CAR_POSITION_MAX;</span><br><span class="line"><span class="keyword">if</span>((s32)BST_fCarPosition &lt; CAR_POSITION_MIN)    BST_fCarPosition = CAR_POSITION_MIN;</span><br><span class="line">  </span><br><span class="line">BST_fSpeedControlOutNew = (BST_fCarSpeedOld-CAR_SPEED_SET ) * BST_fCarSpeed_P + (BST_fCarPosition - CAR_POSITION_SET ) * BST_fCarSpeed_I; <span class="comment">//速度PI算法 速度*P +位移*I=速度PWM输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorOutput</span><span class="params">(<span class="keyword">void</span>)</span>  <span class="comment">//电机PWM输出函数</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="comment">//右电机转向PWM控制融合平衡角度、速度输出</span></span><br><span class="line"></span><br><span class="line">BST_fLeftMotorOut  = BST_fAngleControlOut-BST_fTurnControlOut;<span class="comment">//左电机转向PWM控制融合平衡角度、速度输出</span></span><br><span class="line">  BST_fRightMotorOut = BST_fAngleControlOut+BST_fTurnControlOut;<span class="comment">//右电机转向PWM控制融合平衡角度、速度输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((s16)BST_fLeftMotorOut  &gt; MOTOR_OUT_MAX)BST_fLeftMotorOut  = MOTOR_OUT_MAX;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fLeftMotorOut  &lt; MOTOR_OUT_MIN)BST_fLeftMotorOut  = MOTOR_OUT_MIN;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fRightMotorOut &gt; MOTOR_OUT_MAX)BST_fRightMotorOut = MOTOR_OUT_MAX;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fRightMotorOut &lt; MOTOR_OUT_MIN)BST_fRightMotorOut = MOTOR_OUT_MIN;</span><br><span class="line"></span><br><span class="line">  SetMotorVoltageAndDirection((s16)BST_fLeftMotorOut,(s16)BST_fRightMotorOut); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetMotorVoltageAndDirection</span><span class="params">(s16 s16LeftVoltage,s16 s16RightVoltage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u16 u16LeftMotorValue;</span><br><span class="line">  u16 u16RightMotorValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s16LeftVoltage&lt;<span class="number">0</span>)<span class="comment">//当左电机PWM输出为负时 PB14设为正 PB15设为负 （PB14 15 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">    &#123;</span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_14 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_15 );</span><br><span class="line">      s16LeftVoltage = (-s16LeftVoltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">      GPIO_SetBits(GPIOB, GPIO_Pin_15 );<span class="comment">//当左电机PWM输出为正时 PB14设为负 PB15设为正 （PB14 15 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_14 ); </span><br><span class="line">      s16LeftVoltage = s16LeftVoltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s16RightVoltage&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//当右电机PWM输出为负时 PB12设为正 PB13设为负 （PB12 13 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">      GPIO_SetBits(GPIOB, GPIO_Pin_13 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_12 );</span><br><span class="line">      s16RightVoltage = (-s16RightVoltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//当右电机PWM输出为正时 PB12设为负 PB13设为正 （PB12 13 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">    &#123;</span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_12 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_13 );</span><br><span class="line">     </span><br><span class="line">      s16RightVoltage = s16RightVoltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">u16RightMotorValue= (u16)s16RightVoltage;</span><br><span class="line">u16LeftMotorValue = (u16)s16LeftVoltage;</span><br><span class="line"></span><br><span class="line">TIM_SetCompare3(TIM2,u16LeftMotorValue);<span class="comment">//TIM2与 u16RightMotorValue对比，不相同则翻转波形，调节PWM占空比</span></span><br><span class="line">TIM_SetCompare4(TIM2,u16RightMotorValue);<span class="comment">//TIM3与 u16LeftMotorValue对比，不相同则翻转波形，调节PWM占空比</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1 <span class="comment">/*判断车辆 是否悬停或跌倒*/</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Pitch&gt;<span class="number">40</span>||Pitch&lt;<span class="number">-40</span>)</span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare3(TIM2,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare4(TIM2,<span class="number">0</span>);</span><br><span class="line">stopflag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(BST_fCarAngle &gt; <span class="number">50</span> || BST_fCarAngle &lt; (<span class="number">-50</span>))</span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare3(TIM2,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare4(TIM2,<span class="number">0</span>);  </span><br><span class="line">stopflag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MPU6050</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;i2c.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;inv_mpu.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;inv_mpu_dmp_motion_driver.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;math.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">signed</span> <span class="keyword">char</span> gyro_orientation[<span class="number">9</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                                           <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>,</span><br><span class="line">                                           <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> q0=<span class="number">1.0f</span>,q1=<span class="number">0.0f</span>,q2=<span class="number">0.0f</span>,q3=<span class="number">0.0f</span>;</span><br><span class="line"><span class="keyword">float</span> Pitch,Roll,Yaw;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> sensor_timestamp;</span><br><span class="line"><span class="keyword">short</span> gyro[<span class="number">3</span>], accel[<span class="number">3</span>], sensors;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> more;</span><br><span class="line"><span class="keyword">long</span> quat[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU6050_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//IIC_Init();</span></span><br><span class="line">result=mpu_init();</span><br><span class="line"><span class="keyword">if</span>(!result)</span><br><span class="line">&#123;  </span><br><span class="line"></span><br><span class="line">PrintChar(<span class="string">&quot;mpu initialization complete......\n &quot;</span>);<span class="comment">//mpu initialization complete   </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))<span class="comment">//mpu_set_sensor</span></span><br><span class="line">PrintChar(<span class="string">&quot;mpu_set_sensor complete ......\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PrintChar(<span class="string">&quot;mpu_set_sensor come across error ......\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))<span class="comment">//mpu_configure_fifo</span></span><br><span class="line">PrintChar(<span class="string">&quot;mpu_configure_fifo complete ......\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PrintChar(<span class="string">&quot;mpu_configure_fifo come across error ......\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!mpu_set_sample_rate(DEFAULT_MPU_HZ))     <span class="comment">//mpu_set_sample_rate</span></span><br><span class="line"> PrintChar(<span class="string">&quot;mpu_set_sample_rate complete ......\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> PrintChar(<span class="string">&quot;mpu_set_sample_rate error ......\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dmp_load_motion_driver_firmware())     <span class="comment">//dmp_load_motion_driver_firmvare</span></span><br><span class="line">PrintChar(<span class="string">&quot;dmp_load_motion_driver_firmware complete ......\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PrintChar(<span class="string">&quot;dmp_load_motion_driver_firmware come across error ......\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))   <span class="comment">//dmp_set_orientation</span></span><br><span class="line"> PrintChar(<span class="string">&quot;dmp_set_orientation complete ......\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> PrintChar(<span class="string">&quot;dmp_set_orientation come across error ......\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |</span><br><span class="line">    DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |</span><br><span class="line">    DMP_FEATURE_GYRO_CAL))     <span class="comment">//dmp_enable_feature</span></span><br><span class="line"> PrintChar(<span class="string">&quot;dmp_enable_feature complete ......\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> PrintChar(<span class="string">&quot;dmp_enable_feature come across error ......\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))     <span class="comment">//dmp_set_fifo_rate</span></span><br><span class="line"> PrintChar(<span class="string">&quot;dmp_set_fifo_rate complete ......\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> PrintChar(<span class="string">&quot;dmp_set_fifo_rate come across error ......\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">run_self_test();<span class="comment">//自检</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!mpu_set_dmp_state(<span class="number">1</span>))</span><br><span class="line"> PrintChar(<span class="string">&quot;mpu_set_dmp_state complete ......\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> PrintChar(<span class="string">&quot;mpu_set_dmp_state come across error ......\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//MPU6050状态指示灯 STM32核心板 PC13 绿色灯亮起为不正常</span></span><br><span class="line"> &#123;</span><br><span class="line">GPIO_ResetBits(GPIOC, GPIO_Pin_13);<span class="comment">//MPU6050状态指示灯 STM32核心板 PC13 绿色灯亮起为不正常</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU6050_Pose</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dmp_read_fifo(gyro, accel, quat, &amp;sensor_timestamp, &amp;sensors,&amp;more); </span><br><span class="line"><span class="comment">/* Gyro and accel data are written to the FIFO by the DMP in chip frame and hardware units.</span></span><br><span class="line"><span class="comment"> * This behavior is convenient because it keeps the gyro and accel outputs of dmp_read_fifo and mpu_read_fifo consistent.</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">/*if (sensors &amp; INV_XYZ_GYRO )</span></span><br><span class="line"><span class="comment">send_packet(PACKET_TYPE_GYRO, gyro);</span></span><br><span class="line"><span class="comment">if (sensors &amp; INV_XYZ_ACCEL)</span></span><br><span class="line"><span class="comment">send_packet(PACKET_TYPE_ACCEL, accel); */</span></span><br><span class="line"><span class="comment">/* Unlike gyro and accel, quaternions are written to the FIFO in the body frame, q30.</span></span><br><span class="line"><span class="comment"> * The orientation is set by the scalar passed to dmp_set_orientation during initialization. </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sensors &amp; INV_WXYZ_QUAT )</span><br><span class="line">&#123;</span><br><span class="line">q0 = quat[<span class="number">0</span>] / q30;</span><br><span class="line">q1 = quat[<span class="number">1</span>] / q30;</span><br><span class="line">q2 = quat[<span class="number">2</span>] / q30;</span><br><span class="line">q3 = quat[<span class="number">3</span>] / q30;</span><br><span class="line"></span><br><span class="line">Pitch = <span class="built_in">asin</span>(<span class="number">-2</span> * q1 * q3 + <span class="number">2</span> * q0* q2)* <span class="number">57.3</span>;<span class="comment">// pitch</span></span><br><span class="line">Roll  = <span class="built_in">atan2</span>(<span class="number">2</span> * q2 * q3 + <span class="number">2</span> * q0 * q1, <span class="number">-2</span> * q1 * q1 - <span class="number">2</span> * q2* q2 + <span class="number">1</span>)*<span class="number">57.3</span>;<span class="comment">// roll</span></span><br><span class="line">Yaw   = <span class="built_in">atan2</span>(<span class="number">2</span>*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * <span class="number">57.3</span>;<span class="comment">//yaw</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并级pid"><a class="markdownIt-Anchor" href="#并级pid"></a> 并级PID</h3><p>并级PID和串级PID只有Systick中断服务函数和小车控制部分不一样</p><p>Systick</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;car.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">u16 TimeDelay=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">SysTick_Init</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//1ms定时时钟</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (SysTick_Config(SystemCoreClock / <span class="number">200</span>))<span class="comment">// ST3.5.0库版本   1s/x= a ms  即5ms产生一次systick中断</span></span><br><span class="line"> &#123; </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">SysTick-&gt;CTRL |=  SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//5ms定时器</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">BST_u8SpeedControlCount++;</span><br><span class="line">GetMotorPulse();<span class="comment">//脉冲计算函数</span></span><br><span class="line"></span><br><span class="line">AngleControl();<span class="comment">//角度PD控制PWNM输出</span></span><br><span class="line">TurnControl();</span><br><span class="line">MotorOutput();<span class="comment">//小车总PWM输出  </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(BST_u8SpeedControlCount&gt;=<span class="number">8</span>)<span class="comment">//当计数值8时，即总系统运行40ms时候(每10个角度PWM输出中融入1个速度PWM输出，这样能保持速度PID输出不干扰角度PID输出，从而影响小车平衡)</span></span><br><span class="line">&#123;</span><br><span class="line">SpeedControl(); <span class="comment">//车模速度控制函数   每40ms调用一次</span></span><br><span class="line">BST_u8SpeedControlCount=<span class="number">0</span>;<span class="comment">//小车速度控制调用计数值清零</span></span><br><span class="line">BST_u8SpeedControlPeriod=<span class="number">0</span>;<span class="comment">//平滑输出比例值清零</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小车平衡控制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;car.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeed;<span class="comment">//车子当前速度值</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeedOld;<span class="comment">//车子上一次速度值</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarPosition;<span class="comment">//车子位置</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarAngle;<span class="comment">//车子角度</span></span><br><span class="line"><span class="keyword">float</span> BST_fAngleControlOut;<span class="comment">//角度控制PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOut;<span class="comment">//速度控制PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fLeftMotorOut;<span class="comment">//左电机输出PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fRightMotorOut;<span class="comment">//右电机输出PWM值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_u8MainEventCount=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中总中断计数位</span></span><br><span class="line"><span class="keyword">float</span> BST_u8SpeedControlCount=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中50ms速度平衡融入计数位</span></span><br><span class="line"><span class="keyword">float</span> BST_u8SpeedControlPeriod=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中50ms速度平衡融入计数位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u8 BST_u8DirectionControlPeriod;</span><br><span class="line">u8 BST_u8DirectionControlCount;<span class="comment">//转向控制循环计数  在SysTick_Handler(void)中使用 每5ms加1 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******电机控制参数******/</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOut;<span class="comment">//速度控制PWM</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOutOld;</span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOutNew;</span><br><span class="line"><span class="keyword">float</span> BST_fAngleControlOut;</span><br><span class="line"><span class="keyword">float</span> BST_fTurnControlOut;</span><br><span class="line"><span class="keyword">float</span> BST_fLeftMotorOut;</span><br><span class="line"><span class="keyword">float</span> BST_fRightMotorOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarAngle;<span class="comment">//角度控制PWM</span></span><br><span class="line"><span class="keyword">float</span> gyro_z;</span><br><span class="line"><span class="keyword">float</span> gyrx;</span><br><span class="line"><span class="keyword">float</span> gy0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----角度环和速度环PID控制参数-----*/</span><span class="comment">//以下参考为重点调试参考，同电池电压有关，建议充好电再调试</span></span><br><span class="line"><span class="keyword">float</span>  BST_fCarAngle_P =<span class="number">91.3</span>;<span class="comment">//91.3 //调大小时会左右摆，调大时会振动  请调到基本能够站立 P=91.3是用于给小车在运动过程使用</span></span><br><span class="line"><span class="keyword">float</span>  BST_fCarAngle_D =<span class="number">0.21</span>;<span class="comment">// 0.001 0.002 0.004 0.008 0.0010 0.011 调小时反应慢，调大时会干扰</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span>  BST_fCarSpeed_P=<span class="number">5.1</span>;</span><br><span class="line"><span class="keyword">float</span>  BST_fCarSpeed_I=<span class="number">0.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarTurn=<span class="number">0.4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PID_Original[<span class="number">4</span>] =&#123;<span class="number">91.3</span>, <span class="number">0.21</span>, <span class="number">5.1</span>, <span class="number">0.10</span>&#125;; </span><br><span class="line"><span class="keyword">char</span>  alldata[<span class="number">80</span>];</span><br><span class="line"><span class="keyword">char</span> *iap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******速度控制参数******/</span></span><br><span class="line">s16   BST_s16LeftMotorPulse;<span class="comment">//左电机脉冲数</span></span><br><span class="line">s16  BST_s16RightMotorPulse;<span class="comment">//右电机脉冲数</span></span><br><span class="line"></span><br><span class="line">s32   BST_s32LeftMotorPulseOld;</span><br><span class="line">s32   BST_s32RightMotorPulseOld;</span><br><span class="line">s32   BST_s32LeftMotorPulseSigma;<span class="comment">//50ms左电机叠加值</span></span><br><span class="line">s32   BST_s32RightMotorPulseSigma;<span class="comment">//50ms右电机叠加值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeed;<span class="comment">//测速码盘得出的车速</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeedOld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarPosition;<span class="comment">//测速码盘通过计算得到的小车位移</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----悬停参数-----*/</span></span><br><span class="line"><span class="keyword">int</span> leftstop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rightstop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CarUpstandInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_s16LeftMotorPulse = BST_s16RightMotorPulse = <span class="number">0</span>;<span class="comment">//左右脉冲值初始化</span></span><br><span class="line">BST_s32LeftMotorPulseSigma = BST_s32RightMotorPulseSigma = <span class="number">0</span>;<span class="comment">//叠加脉冲数初始化</span></span><br><span class="line"></span><br><span class="line">BST_fCarSpeed = BST_fCarSpeedOld = <span class="number">0</span>;<span class="comment">//平衡小车车速初始化</span></span><br><span class="line">BST_fCarPosition = <span class="number">0</span>;<span class="comment">//平衡小车位移量初始化</span></span><br><span class="line">BST_fCarAngle= <span class="number">0</span>;<span class="comment">//平衡小车车速初始化</span></span><br><span class="line"></span><br><span class="line">BST_fAngleControlOut = BST_fSpeedControlOut=<span class="number">0</span>;<span class="comment">//角度PWM、车速PWM、蓝牙控制PWM初始化</span></span><br><span class="line">BST_fLeftMotorOut= BST_fRightMotorOut   = <span class="number">0</span>;<span class="comment">//左右车轮PWM输出值初始化</span></span><br><span class="line"></span><br><span class="line">  BST_u8MainEventCount=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中总中断计数位</span></span><br><span class="line">BST_u8SpeedControlCount=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中50ms速度平衡融入计数位</span></span><br><span class="line">  BST_u8SpeedControlPeriod=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中50ms速度平衡融入计数位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMotorPulse</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//采集电机速度脉冲</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">uint16_t</span> u16TempLeft;</span><br><span class="line"><span class="keyword">uint16_t</span> u16TempRight;</span><br><span class="line"></span><br><span class="line">u16TempLeft = TIM_GetCounter(TIM3);<span class="comment">//TIM3定时器计算调用</span></span><br><span class="line"> u16TempRight= TIM_GetCounter(TIM4);<span class="comment">//TIM4定时器计算调用</span></span><br><span class="line">leftstop=u16TempLeft;</span><br><span class="line">rightstop=u16TempRight;</span><br><span class="line">TIM_SetCounter(TIM3,<span class="number">0</span>);<span class="comment">//TIM3-&gt;CNT = 0;</span></span><br><span class="line">TIM_SetCounter(TIM4,<span class="number">0</span>);<span class="comment">//TIM4-&gt;CNT = 0;//清零</span></span><br><span class="line">BST_s16LeftMotorPulse=u16TempLeft;</span><br><span class="line">BST_s16RightMotorPulse=(-u16TempRight);</span><br><span class="line"></span><br><span class="line">BST_s32LeftMotorPulseSigma  +=BST_s16LeftMotorPulse;<span class="comment">//脉冲值叠加 40ms叠加值</span></span><br><span class="line">BST_s32RightMotorPulseSigma +=BST_s16RightMotorPulse;<span class="comment">//脉冲值叠加 40ms叠加值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AngleControl</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Pitch==<span class="number">0</span>||Pitch&lt;<span class="number">-20</span>||Pitch&gt;<span class="number">20</span>)<span class="comment">//MPU6050状态指示灯 STM32核心板 PC13 绿色灯亮起为不正常</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Pitch=1;</span></span><br><span class="line">  GPIO_ResetBits(GPIOC, GPIO_Pin_13);<span class="comment">//MPU6050状态指示灯 STM32核心板 PC13 绿色灯亮起为不正常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;GPIO_SetBits(GPIOC, GPIO_Pin_13);&#125;<span class="comment">//MPU6050状态正常时LED灯熄灭</span></span><br><span class="line"></span><br><span class="line">BST_fCarAngle = Roll- CAR_ZERO_ANGLE;<span class="comment">//DMP ROLL滚动方向角度与预设小车倾斜角度值的差得出角度   </span></span><br><span class="line">BST_fAngleControlOut =  BST_fCarAngle * BST_fCarAngle_P + gyro[<span class="number">0</span>] * BST_fCarAngle_D ;  <span class="comment">//角度PD控制   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TurnControl</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_fTurnControlOut=BST_fCarTurn*gyro[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeedControl</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_fCarSpeed = (BST_s32LeftMotorPulseSigma  + BST_s32RightMotorPulseSigma );<span class="comment">// * 0.5 ;//左右电机脉冲数平均值作为小车当前车速</span></span><br><span class="line">BST_s32LeftMotorPulseSigma =BST_s32RightMotorPulseSigma = <span class="number">0</span>;<span class="comment">//全局变量 注意及时清零</span></span><br><span class="line">BST_fCarSpeedOld *= <span class="number">0.7</span>;</span><br><span class="line">BST_fCarSpeedOld +=BST_fCarSpeed*<span class="number">0.3</span>;</span><br><span class="line">BST_fCarPosition += BST_fCarSpeedOld;<span class="comment">//路程  即速度积分   1/11 3:03</span></span><br><span class="line"><span class="keyword">if</span>(stopflag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_fCarPosition=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//积分上限设限//</span></span><br><span class="line"><span class="keyword">if</span>((s32)BST_fCarPosition &gt; CAR_POSITION_MAX)    BST_fCarPosition = CAR_POSITION_MAX;</span><br><span class="line"><span class="keyword">if</span>((s32)BST_fCarPosition &lt; CAR_POSITION_MIN)    BST_fCarPosition = CAR_POSITION_MIN;</span><br><span class="line">  </span><br><span class="line">BST_fSpeedControlOutNew = (BST_fCarSpeedOld -CAR_SPEED_SET ) * BST_fCarSpeed_P + (BST_fCarPosition - CAR_POSITION_SET ) * BST_fCarSpeed_I; <span class="comment">//速度PI算法 速度*P +位移*I=速度PWM输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorOutput</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//电机PWM输出函数</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">BST_fLeftMotorOut  = BST_fAngleControlOut +BST_fSpeedControlOutNew+BST_fTurnControlOut;<span class="comment">//左电机PWM控制输出</span></span><br><span class="line">  BST_fRightMotorOut = BST_fAngleControlOut +BST_fSpeedControlOutNew-BST_fTurnControlOut;<span class="comment">//右电机PWM控输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((s16)BST_fLeftMotorOut  &gt; MOTOR_OUT_MAX)BST_fLeftMotorOut  = MOTOR_OUT_MAX;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fLeftMotorOut  &lt; MOTOR_OUT_MIN)BST_fLeftMotorOut  = MOTOR_OUT_MIN;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fRightMotorOut &gt; MOTOR_OUT_MAX)BST_fRightMotorOut = MOTOR_OUT_MAX;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fRightMotorOut &lt; MOTOR_OUT_MIN)BST_fRightMotorOut = MOTOR_OUT_MIN;</span><br><span class="line"></span><br><span class="line">  SetMotorVoltageAndDirection((s16)BST_fLeftMotorOut,(s16)BST_fRightMotorOut);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetMotorVoltageAndDirection</span><span class="params">(s16 s16LeftVoltage,s16 s16RightVoltage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u16 u16LeftMotorValue;</span><br><span class="line">  u16 u16RightMotorValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s16LeftVoltage&lt;<span class="number">0</span>)<span class="comment">//当左电机PWM输出为负时 PB14设为正 PB15设为负 （PB14 15 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">    &#123;</span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_14 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_15 );</span><br><span class="line">      s16LeftVoltage = (-s16LeftVoltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">      GPIO_SetBits(GPIOB, GPIO_Pin_15 );<span class="comment">//当左电机PWM输出为正时 PB14设为负 PB15设为正 （PB14 15 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_14 ); </span><br><span class="line">      s16LeftVoltage = s16LeftVoltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s16RightVoltage&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;<span class="comment">//当右电机PWM输出为负时 PB12设为正 PB13设为负 （PB12 13 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">      GPIO_SetBits(GPIOB, GPIO_Pin_13 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_12 );</span><br><span class="line">      s16RightVoltage = (-s16RightVoltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//当右电机PWM输出为正时 PB12设为负 PB13设为正 （PB12 13 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">    &#123;</span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_12 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_13 );</span><br><span class="line">     </span><br><span class="line">      s16RightVoltage = s16RightVoltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   u16RightMotorValue= (u16)s16RightVoltage;</span><br><span class="line">   u16LeftMotorValue = (u16)s16LeftVoltage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TIM_SetCompare3(TIM2,u16LeftMotorValue);<span class="comment">//TIM2与 u16RightMotorValue对比，不相同则翻转波形，调节PWM占空比</span></span><br><span class="line">TIM_SetCompare4(TIM2,u16RightMotorValue);<span class="comment">//TIM3与 u16LeftMotorValue对比，不相同则翻转波形，调节PWM占空比</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1 <span class="comment">/*判断车辆 是否悬停或跌倒*/</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Pitch&gt;<span class="number">40</span>||Pitch&lt;<span class="number">-40</span>)</span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare3(TIM2,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare4(TIM2,<span class="number">0</span>);</span><br><span class="line">stopflag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(BST_fCarAngle &gt; <span class="number">50</span> || BST_fCarAngle &lt; (<span class="number">-50</span>))</span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare3(TIM2,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare4(TIM2,<span class="number">0</span>);  </span><br><span class="line">stopflag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pid调参"><a class="markdownIt-Anchor" href="#pid调参"></a> PID调参</h2><p>步骤：</p><ol><li>把所有Kp和Ki设置为0；</li><li>从角度环开始调，先调Kp，确定Kp极性，现将Kp设定一个正值，如果轮子走向和倾斜的方向相同，则极性正确，Kp为正值，否则极性错误，Kp为负值，Kp绝对值从小到大开始调，直到车子出现明显抖动，之后调节Kd值，Kd值得极性确定，将Kp设置为0，将Kd设置为一个正值，将一个轮子用手转动，另一个轮子同向转动，则极性正确，Kd为正值，否则极性错误，Kd为负值，然后将刚刚调的Kp再填上，将Kd的绝对值从小到大调，直到车子出现高频抖动，之后将Kp，Kd的值 * 0.6作为最终Kp，Kd值；</li><li>然后调节速度环，ki=1/200Kp，极性和Kp相同，设置Kp同时设置Ki，确定Kp的极性，将角度环的Kp，Kd设为0，速度环Ki设为0，Kp设置为一个正值，将一个轮子用手转动，另一个轮子同向转动，则极性正确，Kp为正值，否则极性错误，Kp为负值，将Kp绝对值从小到大调，直到小车速度接近0，回位效果好，将此时的Kp，Ki作为最终Kp，Ki；</li><li>然后调转向环，将其他PID参数设置为0，将转向参数设置为一个正值，将车子往一个方向转动，如果车子是顺着转的方向转，则转向参数极性错误，转向参数应为负值，否则为正值，增大转向参数绝对值，直到车子能不往一个方向转动切没有抖动现象。</li></ol><h2 id="实现蓝牙控制方向"><a class="markdownIt-Anchor" href="#实现蓝牙控制方向"></a> 实现蓝牙控制方向</h2><p>Remote.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Remote.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;NRF24L01.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;car.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="keyword">float</span> BST_BluetoothSpeed=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remote_Control</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Fore==<span class="number">0</span>&amp;&amp;Back==<span class="number">0</span>&amp;&amp;Left==<span class="number">0</span>&amp;&amp;Right==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(BST_BluetoothSpeed&lt;=<span class="number">2.5</span>&amp;&amp;BST_BluetoothSpeed&gt;=<span class="number">-2.5</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_BluetoothSpeed=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(BST_BluetoothSpeed&gt;<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_BluetoothSpeed-=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(BST_BluetoothSpeed&lt;<span class="number">-5</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_BluetoothSpeed+=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(BST_BluetoothSpeed==<span class="number">0</span>&amp;&amp;BST_fCarSpeed&gt;=<span class="number">-2.5</span>&amp;&amp;BST_fCarSpeed&lt;=<span class="number">2.5</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_fCarTurn_Kd=<span class="number">0.24</span>;</span><br><span class="line">&#125;</span><br><span class="line">BST_fCarTurn_Kp=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Fore==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//BST_fCarTurn_Kd=0;</span></span><br><span class="line">BST_fCarTurn_Kd=<span class="number">0.24</span>;</span><br><span class="line">BST_BluetoothSpeed+=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Back==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//BST_fCarTurn_Kd=0;</span></span><br><span class="line">BST_fCarTurn_Kd=<span class="number">0.24</span>;</span><br><span class="line">BST_BluetoothSpeed-=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if(Left==0&amp;&amp;Right==0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//BST_fCarTurn_Kd=0.25;</span></span><br><span class="line"><span class="comment">//BST_fCarTurn_Kp=0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Left==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_fCarTurn_Kd=<span class="number">0</span>;</span><br><span class="line">BST_fCarTurn_Kp=<span class="number">1</span>;</span><br><span class="line">BST_TurnSpeed+=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Right==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_fCarTurn_Kd=<span class="number">0</span>;</span><br><span class="line">BST_fCarTurn_Kp=<span class="number">1</span>;</span><br><span class="line">BST_TurnSpeed-=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">BST_BluetoothSpeed=BST_BluetoothSpeed&gt;<span class="number">300</span>?<span class="number">300</span>:(BST_BluetoothSpeed&lt;<span class="number">-300</span>?<span class="number">-300</span>:BST_BluetoothSpeed);</span><br><span class="line">BST_TurnSpeed=BST_TurnSpeed&gt;<span class="number">500</span>?<span class="number">500</span>:(BST_TurnSpeed&lt;<span class="number">-500</span>?<span class="number">-500</span>:BST_TurnSpeed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Car.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;car.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Remote.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> CAR_SPEED_SET=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> CAR_ZERO_ANGLE=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeed;<span class="comment">//车子当前速度值</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeedOld;<span class="comment">//车子上一次速度值</span></span><br><span class="line"><span class="keyword">float</span> BST_TurnSpeed=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarPosition;<span class="comment">//车子位置</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarAngle;<span class="comment">//车子角度</span></span><br><span class="line"><span class="keyword">float</span> BST_fAngleControlOut;<span class="comment">//角度控制PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOut;<span class="comment">//速度控制PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fLeftMotorOut;<span class="comment">//左电机输出PWM值</span></span><br><span class="line"><span class="keyword">float</span> BST_fRightMotorOut;<span class="comment">//右电机输出PWM值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_u8MainEventCount=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中总中断计数位</span></span><br><span class="line"><span class="keyword">float</span> BST_u8SpeedControlCount=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中50ms速度平衡融入计数位</span></span><br><span class="line"><span class="keyword">float</span> BST_u8SpeedControlPeriod=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中50ms速度平衡融入计数位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u8 BST_u8DirectionControlPeriod;</span><br><span class="line">u8 BST_u8DirectionControlCount;<span class="comment">//转向控制循环计数  在SysTick_Handler(void)中使用 每5ms加1 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******电机控制参数******/</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOut;<span class="comment">//速度控制PWM</span></span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOutOld;</span><br><span class="line"><span class="keyword">float</span> BST_fSpeedControlOutNew;</span><br><span class="line"><span class="keyword">float</span> BST_fAngleControlOut;</span><br><span class="line"><span class="keyword">float</span> BST_fTurnControlOut;</span><br><span class="line"><span class="keyword">float</span> BST_fLeftMotorOut;</span><br><span class="line"><span class="keyword">float</span> BST_fRightMotorOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarAngle;<span class="comment">//角度控制PWM</span></span><br><span class="line"><span class="keyword">float</span> gyro_z;</span><br><span class="line"><span class="keyword">float</span> gyrx;</span><br><span class="line"><span class="keyword">float</span> gy0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----角度环和速度环PID控制参数-----*/</span><span class="comment">//以下参考为重点调试参考，同电池电压有关，建议充好电再调试</span></span><br><span class="line"><span class="keyword">float</span>  BST_fCarAngle_P =<span class="number">91.3</span>;<span class="comment">//91.3 //调大小时会左右摆，调大时会振动  请调到基本能够站立 P=91.3是用于给小车在运动过程使用</span></span><br><span class="line"><span class="keyword">float</span>  BST_fCarAngle_D =<span class="number">0.22</span>;<span class="comment">// 0.001 0.002 0.004 0.008 0.0010 0.011 调小时反应慢，调大时会干扰</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span>  BST_fCarSpeed_P=<span class="number">5.1</span>;</span><br><span class="line"><span class="keyword">float</span>  BST_fCarSpeed_I=<span class="number">0.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarTurn_Kd=<span class="number">0.24</span>;</span><br><span class="line"><span class="keyword">float</span> BST_fCarTurn_Kp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PID_Original[<span class="number">4</span>] =&#123;<span class="number">91.3</span>, <span class="number">0.21</span>, <span class="number">5.1</span>, <span class="number">0.10</span>&#125;; </span><br><span class="line"><span class="keyword">char</span>  alldata[<span class="number">80</span>];</span><br><span class="line"><span class="keyword">char</span> *iap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******速度控制参数******/</span></span><br><span class="line">s16   BST_s16LeftMotorPulse;<span class="comment">//左电机脉冲数</span></span><br><span class="line">s16  BST_s16RightMotorPulse;<span class="comment">//右电机脉冲数</span></span><br><span class="line"></span><br><span class="line">s32   BST_s32LeftMotorPulseOld;</span><br><span class="line">s32   BST_s32RightMotorPulseOld;</span><br><span class="line">s32   BST_s32LeftMotorPulseSigma;<span class="comment">//50ms左电机叠加值</span></span><br><span class="line">s32   BST_s32RightMotorPulseSigma;<span class="comment">//50ms右电机叠加值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeed;<span class="comment">//测速码盘得出的车速</span></span><br><span class="line"><span class="keyword">float</span> BST_fCarSpeedOld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> BST_fCarPosition;<span class="comment">//测速码盘通过计算得到的小车位移</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----悬停参数-----*/</span></span><br><span class="line"><span class="keyword">int</span> leftstop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rightstop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CarUpstandInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_s16LeftMotorPulse = BST_s16RightMotorPulse = <span class="number">0</span>;<span class="comment">//左右脉冲值初始化</span></span><br><span class="line">BST_s32LeftMotorPulseSigma = BST_s32RightMotorPulseSigma = <span class="number">0</span>;<span class="comment">//叠加脉冲数初始化</span></span><br><span class="line"></span><br><span class="line">BST_fCarSpeed = BST_fCarSpeedOld = <span class="number">0</span>;<span class="comment">//平衡小车车速初始化</span></span><br><span class="line">BST_fCarPosition = <span class="number">0</span>;<span class="comment">//平衡小车位移量初始化</span></span><br><span class="line">BST_fCarAngle= <span class="number">0</span>;<span class="comment">//平衡小车车速初始化</span></span><br><span class="line"></span><br><span class="line">BST_fAngleControlOut = BST_fSpeedControlOut=<span class="number">0</span>;<span class="comment">//角度PWM、车速PWM、蓝牙控制PWM初始化</span></span><br><span class="line">BST_fLeftMotorOut= BST_fRightMotorOut   = <span class="number">0</span>;<span class="comment">//左右车轮PWM输出值初始化</span></span><br><span class="line"></span><br><span class="line">  BST_u8MainEventCount=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中总中断计数位</span></span><br><span class="line">BST_u8SpeedControlCount=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中50ms速度平衡融入计数位</span></span><br><span class="line">  BST_u8SpeedControlPeriod=<span class="number">0</span>;<span class="comment">//用于5ms定时器子程序SysTick_Handler(void)中50ms速度平衡融入计数位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMotorPulse</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//采集电机速度脉冲</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">uint16_t</span> u16TempLeft;</span><br><span class="line"><span class="keyword">uint16_t</span> u16TempRight;</span><br><span class="line"></span><br><span class="line">u16TempLeft = TIM_GetCounter(TIM3);<span class="comment">//TIM3定时器计算调用</span></span><br><span class="line"> u16TempRight= TIM_GetCounter(TIM4);<span class="comment">//TIM4定时器计算调用</span></span><br><span class="line">leftstop=u16TempLeft;</span><br><span class="line">rightstop=u16TempRight;</span><br><span class="line">TIM_SetCounter(TIM3,<span class="number">0</span>);<span class="comment">//TIM3-&gt;CNT = 0;</span></span><br><span class="line">TIM_SetCounter(TIM4,<span class="number">0</span>);<span class="comment">//TIM4-&gt;CNT = 0;//清零</span></span><br><span class="line">BST_s16LeftMotorPulse=u16TempLeft;</span><br><span class="line">BST_s16RightMotorPulse=(-u16TempRight);</span><br><span class="line"></span><br><span class="line">BST_s32LeftMotorPulseSigma  +=BST_s16LeftMotorPulse;<span class="comment">//脉冲值叠加 40ms叠加值</span></span><br><span class="line">BST_s32RightMotorPulseSigma +=BST_s16RightMotorPulse;<span class="comment">//脉冲值叠加 40ms叠加值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AngleControl</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Pitch==<span class="number">0</span>||Pitch&lt;<span class="number">-20</span>||Pitch&gt;<span class="number">20</span>)<span class="comment">//MPU6050状态指示灯 STM32核心板 PC13 绿色灯亮起为不正常</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Pitch=1;</span></span><br><span class="line">  GPIO_ResetBits(GPIOC, GPIO_Pin_13);<span class="comment">//MPU6050状态指示灯 STM32核心板 PC13 绿色灯亮起为不正常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;GPIO_SetBits(GPIOC, GPIO_Pin_13);&#125;<span class="comment">//MPU6050状态正常时LED灯熄灭</span></span><br><span class="line"></span><br><span class="line">BST_fCarAngle = Roll- CAR_ZERO_ANGLE;<span class="comment">//DMP ROLL滚动方向角度与预设小车倾斜角度值的差得出角度   </span></span><br><span class="line">BST_fAngleControlOut =  BST_fCarAngle * BST_fCarAngle_P + gyro[<span class="number">0</span>] * BST_fCarAngle_D ;  <span class="comment">//角度PD控制   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TurnControl</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_fTurnControlOut=BST_fCarTurn_Kd*gyro[<span class="number">2</span>]+BST_fCarTurn_Kp*BST_TurnSpeed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeedControl</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BST_fCarSpeed = (BST_s32LeftMotorPulseSigma  + BST_s32RightMotorPulseSigma );<span class="comment">// * 0.5 ;//左右电机脉冲数平均值作为小车当前车速</span></span><br><span class="line">BST_s32LeftMotorPulseSigma =BST_s32RightMotorPulseSigma = <span class="number">0</span>;<span class="comment">//全局变量 注意及时清零</span></span><br><span class="line">BST_fCarSpeedOld *= <span class="number">0.7</span>;</span><br><span class="line">BST_fCarSpeedOld +=BST_fCarSpeed*<span class="number">0.3</span>;</span><br><span class="line">BST_fCarPosition += BST_fCarSpeedOld;<span class="comment">//路程  即速度积分   1/11 3:03</span></span><br><span class="line">BST_fCarPosition += BST_BluetoothSpeed;</span><br><span class="line"><span class="keyword">if</span>(stopflag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">BST_fCarPosition=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//积分上限设限//</span></span><br><span class="line"><span class="keyword">if</span>((s32)BST_fCarPosition &gt; CAR_POSITION_MAX)    BST_fCarPosition = CAR_POSITION_MAX;</span><br><span class="line"><span class="keyword">if</span>((s32)BST_fCarPosition &lt; CAR_POSITION_MIN)    BST_fCarPosition = CAR_POSITION_MIN;</span><br><span class="line">  </span><br><span class="line">BST_fSpeedControlOutNew = (BST_fCarSpeedOld -CAR_SPEED_SET ) * BST_fCarSpeed_P + (BST_fCarPosition - CAR_POSITION_SET ) * BST_fCarSpeed_I; <span class="comment">//速度PI算法 速度*P +位移*I=速度PWM输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorOutput</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//电机PWM输出函数</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="comment">//右电机转向PWM控制融合平衡角度、速度输出</span></span><br><span class="line"></span><br><span class="line">BST_fLeftMotorOut  = BST_fAngleControlOut +BST_fSpeedControlOutNew+BST_fTurnControlOut+BST_BluetoothSpeed;<span class="comment">//+directionl - BST_fBluetoothDirectionNew;//左电机转向PWM控制融合平衡角度、速度输出</span></span><br><span class="line">  BST_fRightMotorOut = BST_fAngleControlOut +BST_fSpeedControlOutNew-BST_fTurnControlOut+BST_BluetoothSpeed;<span class="comment">//-directionl+ BST_fBluetoothDirectionNew;//右电机转向PWM控制融合平衡角度、速度输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((s16)BST_fLeftMotorOut  &gt; MOTOR_OUT_MAX)BST_fLeftMotorOut  = MOTOR_OUT_MAX;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fLeftMotorOut  &lt; MOTOR_OUT_MIN)BST_fLeftMotorOut  = MOTOR_OUT_MIN;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fRightMotorOut &gt; MOTOR_OUT_MAX)BST_fRightMotorOut = MOTOR_OUT_MAX;</span><br><span class="line"><span class="keyword">if</span>((s16)BST_fRightMotorOut &lt; MOTOR_OUT_MIN)BST_fRightMotorOut = MOTOR_OUT_MIN;</span><br><span class="line"></span><br><span class="line">  SetMotorVoltageAndDirection((s16)BST_fLeftMotorOut,(s16)BST_fRightMotorOut);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetMotorVoltageAndDirection</span><span class="params">(s16 s16LeftVoltage,s16 s16RightVoltage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u16 u16LeftMotorValue;</span><br><span class="line">  u16 u16RightMotorValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s16LeftVoltage&lt;<span class="number">0</span>)<span class="comment">//当左电机PWM输出为负时 PB14设为正 PB15设为负 （PB14 15 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">    &#123;</span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_14 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_15 );</span><br><span class="line">      s16LeftVoltage = (-s16LeftVoltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">      GPIO_SetBits(GPIOB, GPIO_Pin_15 );<span class="comment">//当左电机PWM输出为正时 PB14设为负 PB15设为正 （PB14 15 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_14 ); </span><br><span class="line">      s16LeftVoltage = s16LeftVoltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s16RightVoltage&lt;<span class="number">0</span>)</span><br><span class="line">    &#123; <span class="comment">//当右电机PWM输出为负时 PB12设为正 PB13设为负 （PB12 13 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">      GPIO_SetBits(GPIOB, GPIO_Pin_13 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_12 );</span><br><span class="line">      s16RightVoltage = (-s16RightVoltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//当右电机PWM输出为正时 PB12设为负 PB13设为正 （PB12 13 分别控制TB6612fng驱动芯片，逻辑0 1可控制左电机正转反转）</span></span><br><span class="line">    &#123;</span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_12 );    </span><br><span class="line">      GPIO_ResetBits(GPIOB, GPIO_Pin_13 );</span><br><span class="line">     </span><br><span class="line">      s16RightVoltage = s16RightVoltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   u16RightMotorValue= (u16)s16RightVoltage;</span><br><span class="line">   u16LeftMotorValue = (u16)s16LeftVoltage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TIM_SetCompare3(TIM2,u16LeftMotorValue);<span class="comment">//TIM2与 u16RightMotorValue对比，不相同则翻转波形，调节PWM占空比</span></span><br><span class="line">TIM_SetCompare4(TIM2,u16RightMotorValue);<span class="comment">//TIM3与 u16LeftMotorValue对比，不相同则翻转波形，调节PWM占空比</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1 <span class="comment">/*判断车辆 是否悬停或跌倒，调试用*/</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Pitch&gt;<span class="number">40</span>||Pitch&lt;<span class="number">-40</span>)</span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare3(TIM2,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare4(TIM2,<span class="number">0</span>);</span><br><span class="line">stopflag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(BST_fCarAngle &gt; <span class="number">50</span> || BST_fCarAngle &lt; (<span class="number">-50</span>))</span><br><span class="line">&#123;</span><br><span class="line">TIM_SetCompare3(TIM2,<span class="number">0</span>);</span><br><span class="line">TIM_SetCompare4(TIM2,<span class="number">0</span>);  </span><br><span class="line">stopflag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> stopflag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源项目合集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware虚拟机安装黑苹果</title>
      <link href="2018/02/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
      <url>2018/02/27/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><p>以Vmware15为例:</p><ol><li>下载黑苹果镜像，地址：<a href="https://pan.baidu.com/s/17maORsJXqHmw0MXumBsNxQ">点击下载</a>，提取码e8qp；</li><li>安装Vmware15，步骤省略，<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">VMware15官方下载</a>；</li><li>安装VMware的mac os系统补丁unlock，开源地址：<a href="https://github.com/DrDonk/unlocker.git">点击进入</a>，不会使用用git的，直接点release，下载源码解压，点win-install.cmd安装；</li></ol><h2 id="新建虚拟机"><a class="markdownIt-Anchor" href="#新建虚拟机"></a> 新建虚拟机</h2><ol><li><p>打开VMware15，新建虚拟机；</p></li><li><p>选择下载的镜像，注意右下角要选择所有文件，不然看不到镜像；</p></li><li><p>选择Apple Mac os x(M)，版本选择10.14（根据镜像版本选择）；</p></li><li><p>设置虚拟机名称，安装位置，配置等，设置好了点击完成；</p></li></ol><h2 id="开始安装"><a class="markdownIt-Anchor" href="#开始安装"></a> 开始安装</h2><ol><li><p>开启虚拟机，可能会出现无法获取VMCI驱动程序版本错误（一般家庭版系统会出现这样的错误，我用的企业版win10不会出现此错误），解决方法见下面问题处理</p></li><li><p>等待</p></li><li><p>进入系统安装界面，选择语言；</p></li><li><p>点磁盘工具，格式化磁盘，点抹除</p><p>名称随意，</p><p>格式日志式或者APFS都行，</p><p>方案选择GUI分区图,</p><p>完成后，选择安装macos</p></li><li><p>选择刚格式化的磁盘，安装系统</p></li><li><p>等待完成重启</p></li><li><p>安装好就能进入系统了，但此时可能不能全屏，解决办法见下面常见问题解决办法。</p></li></ol><h2 id="问题处理"><a class="markdownIt-Anchor" href="#问题处理"></a> 问题处理</h2><ol><li><p>虚拟机无法获取 vmci 驱动程序</p><p>解决方法：以文本方式虚拟机安装位置的*.vmx文件，将vmci0.present=&quot;TRUE“的TRUE改为false；</p></li><li><p>VMware不可恢复错误</p><p>解决方法：以文本方式虚拟机安装位置的*.vmx文件，在vmci0.present后添加一行vmci0.version = ”0“，注意等号前面有空格；</p></li><li><p>不能全屏的问题</p><p>解决方法：</p><ol><li><p>桌面有个光盘图标，鼠标右键选择推出；</p></li><li><p>下载Darwin，<a href="https://pan.baidu.com/s/1VWxpQT4G3ApZnwV7M1vuTg">下载地址</a>，提取码qfm1，设置虚拟机挂载该文件，重启虚拟机；</p></li><li><p>桌面会多了VMware tools图标，打开安装vmtools；</p></li><li><p>关闭虚拟机，设置该虚拟机显示器，选择指定显示器，设置分辨率位你电脑的最大分辨率。</p></li><li><p>开启虚拟机就能全屏了，如果不行，重装vmtools重启，多试几次。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
            <tag> Macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIY STM32小四轴飞行器</title>
      <link href="2018/01/06/DIY%20STM32%E5%B0%8F%E5%9B%9B%E8%BD%B4%E9%A3%9E%E8%A1%8C%E5%99%A8/"/>
      <url>2018/01/06/DIY%20STM32%E5%B0%8F%E5%9B%9B%E8%BD%B4%E9%A3%9E%E8%A1%8C%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="飞机部分"><a class="markdownIt-Anchor" href="#飞机部分"></a> 飞机部分</h2><h3 id="硬件设计"><a class="markdownIt-Anchor" href="#硬件设计"></a> 硬件设计</h3><h4 id="电源设计"><a class="markdownIt-Anchor" href="#电源设计"></a> 电源设计</h4><p><a href="https://imgtu.com/i/6GUBtA"><img src="https://s3.ax1x.com/2021/03/10/6GUBtA.jpg" alt="6GUBtA.jpg" /></a></p><h4 id="stm32主控"><a class="markdownIt-Anchor" href="#stm32主控"></a> STM32主控</h4><p><a href="https://imgtu.com/i/6GNHdH"><img src="https://s3.ax1x.com/2021/03/10/6GNHdH.jpg" alt="6GNHdH.jpg" /></a></p><h4 id="mpu6050"><a class="markdownIt-Anchor" href="#mpu6050"></a> MPU6050</h4><p><a href="https://imgtu.com/i/6GUW7Q"><img src="https://s3.ax1x.com/2021/03/10/6GUW7Q.jpg" alt="6GUW7Q.jpg" /></a></p><h4 id="电机控制"><a class="markdownIt-Anchor" href="#电机控制"></a> 电机控制</h4><p><a href="https://imgtu.com/i/6GaZ4A"><img src="https://s3.ax1x.com/2021/03/10/6GaZ4A.jpg" alt="6GaZ4A.jpg" /></a></p><h4 id="蓝牙-24g"><a class="markdownIt-Anchor" href="#蓝牙-24g"></a> 蓝牙、2.4G</h4><p><a href="https://imgtu.com/i/6GaJ4s"><img src="https://s3.ax1x.com/2021/03/10/6GaJ4s.jpg" alt="6GaJ4s.jpg" /></a></p><h4 id="其他模块"><a class="markdownIt-Anchor" href="#其他模块"></a> 其他模块</h4><p><a href="https://imgtu.com/i/6GarE4"><img src="https://s3.ax1x.com/2021/03/10/6GarE4.jpg" alt="6GarE4.jpg" /></a></p><h4 id="bom表"><a class="markdownIt-Anchor" href="#bom表"></a> BOM表</h4><table><thead><tr><th>Comment</th><th>Description</th><th>Designator</th><th>Footprint</th><th>Quantity</th><th>Value</th></tr></thead><tbody><tr><td>CAP</td><td>0603电容</td><td>C1, C2, C3, C4, C5,  C9, C10, C11, C16, C17, C18, C19</td><td>C_0603</td><td>12</td><td>100nF</td></tr><tr><td>CAP</td><td>0603电容</td><td>C6, C7</td><td>C_0603</td><td>2</td><td>22pF</td></tr><tr><td>Cap</td><td>0603电容</td><td>C8</td><td>C_0603</td><td>1</td><td>2.2nF</td></tr><tr><td>47uF</td><td>1206钽电容</td><td>C12, C13, C20</td><td>C_1206</td><td>3</td><td>100pF</td></tr><tr><td>CAP</td><td>0603电容</td><td>C14, C15, C21</td><td>C_0603</td><td>3</td><td>100nF</td></tr><tr><td>S4</td><td>二极管</td><td>D1, D2</td><td>SOD-123</td><td>2</td><td></td></tr><tr><td>DC4.2V</td><td>2p排针</td><td>JP1</td><td>SIP2</td><td>1</td><td></td></tr><tr><td>MSS22D18</td><td>6p贴片拨动开关</td><td>KG1</td><td>MSS22D18</td><td>1</td><td></td></tr><tr><td>Inductor Chip</td><td>CD32电感</td><td>L1</td><td>47UH_3*3 150MA</td><td>1</td><td>33UH</td></tr><tr><td>蓝灯</td><td>发光二极管</td><td>LED1, LED3</td><td>0603_LED_S1</td><td>2</td><td></td></tr><tr><td>红灯</td><td>发光二极管</td><td>LED2, LED4</td><td>0603_LED_S1</td><td>2</td><td></td></tr><tr><td>Header 2</td><td>焊接电机用，不用器件</td><td>MOTO1, MOTO2, MOTO3,  MOTO4</td><td>SIP2D - duplicate</td><td>4</td><td></td></tr><tr><td>NRF24L01</td><td>2.4G模块</td><td>NRF1</td><td>24L01</td><td>1</td><td></td></tr><tr><td>串口</td><td>4p排针</td><td>P1</td><td>SIP4 - duplicate</td><td>1</td><td></td></tr><tr><td>IIC</td><td>4p排针</td><td>P2</td><td>SIP4 - duplicate</td><td>1</td><td></td></tr><tr><td>SW下载</td><td>4p排针</td><td>P3</td><td>SIP4 - duplicate</td><td>1</td><td></td></tr><tr><td>Header 4</td><td>4p排针</td><td>P4</td><td>SIP4 - duplicate</td><td>1</td><td></td></tr><tr><td>SI2302</td><td>SI2302场效应管</td><td>Q1, Q2, Q3, Q4</td><td>SOT-23(SOT-23-3)</td><td>4</td><td></td></tr><tr><td>Res2</td><td>0603电阻</td><td>R1</td><td>R0603</td><td>1</td><td>10K</td></tr><tr><td>Res2</td><td>0603电阻</td><td>R2, R3, R7, R9, R11,  R13</td><td>R0603</td><td>6</td><td>10K</td></tr><tr><td>Res2</td><td>0603电阻</td><td>R4, R5, R6, R8, R10,  R12, R14, R15</td><td>R0603</td><td>8</td><td>1K</td></tr><tr><td>STM32F103C8T6_LQFP48</td><td>STM32F103C8T6_LQFP48</td><td>U1</td><td>LQFP48_STM32</td><td>1</td><td></td></tr><tr><td>MPU6050</td><td>MPU6050</td><td>U2</td><td></td><td>1</td><td></td></tr><tr><td>BL8530</td><td>电源芯片</td><td>U3</td><td>SOT-89(SOT-89-3)</td><td>1</td><td></td></tr><tr><td>662K</td><td>LDO</td><td>U4</td><td>SOT-23-3L</td><td>1</td><td></td></tr><tr><td>BAT54A</td><td>BAT54A肖特基二极管</td><td>U5, U6, U7, U8</td><td>SOT-23(SOT-23-3)</td><td>4</td><td></td></tr><tr><td>XTAL</td><td>贴片晶振CSTCE8M00G55</td><td>Y1</td><td>CSTCE8M00G55</td><td>1</td><td>8M</td></tr></tbody></table><h3 id="软件设计"><a class="markdownIt-Anchor" href="#软件设计"></a> 软件设计</h3><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DEFINE.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;init.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//2个bit的抢占优先级，2个bit的子优先级</span></span><br><span class="line">ALL_Init();<span class="comment">//系统初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ANTO_polling(); <span class="comment">//匿名上位机</span></span><br><span class="line">LEDRefresh(); <span class="comment">//LED刷新</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delay.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;misc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DATA.h&quot;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">uint32_t</span> usTicks = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cycleCounterInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RCC_ClocksTypeDef clocks;</span><br><span class="line">    RCC_GetClocksFreq(&amp;clocks);</span><br><span class="line">    usTicks = clocks.SYSCLK_Frequency / <span class="number">1000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">GetSysTime_us</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">uint32_t</span> ms, cycle_cnt;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ms = SysTick_count;</span><br><span class="line">        cycle_cnt = SysTick-&gt;VAL;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ms != SysTick_count);</span><br><span class="line">    <span class="keyword">return</span> (ms * <span class="number">1000</span>) + (usTicks * <span class="number">1000</span> - cycle_cnt) / usTicks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    毫秒级延时函数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(<span class="keyword">uint16_t</span> nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> t0=GetSysTime_us();</span><br><span class="line"><span class="keyword">while</span>(GetSysTime_us() - t0 &lt; nms * <span class="number">1000</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"> </span>&#123;  </span><br><span class="line"><span class="keyword">char</span> x=<span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">while</span>( i--)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span>(x=<span class="number">1</span>;x&gt;<span class="number">0</span>;x--);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;  </span><br></pre></td></tr></table></figure><p>Init.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DEFINE.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">uint32_t</span> SysTick_count; <span class="comment">//系统时间计数</span></span><br><span class="line">_st_Mpu MPU6050;   <span class="comment">//MPU6050原始数据</span></span><br><span class="line">_st_Mag AK8975;</span><br><span class="line">_st_AngE Angle;    <span class="comment">//当前角度姿态值</span></span><br><span class="line">_st_Remote Remote; <span class="comment">//遥控通道值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_st_ALL_flag ALL_flag; <span class="comment">//系统标志位，包含解锁标志位等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PidObject pidRateX; <span class="comment">//内环PID数据</span></span><br><span class="line">PidObject pidRateY;</span><br><span class="line">PidObject pidRateZ;</span><br><span class="line"></span><br><span class="line">PidObject pidPitch; <span class="comment">//外环PID数据</span></span><br><span class="line">PidObject pidRoll;</span><br><span class="line">PidObject pidYaw;</span><br><span class="line"></span><br><span class="line">PidObject pidHeightRate;</span><br><span class="line">PidObject pidHeightHigh;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pid_param_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//PID控制参数初始化，改写PID并不会保存数据，请调试完成后直接在程序里更改 再烧录到飞控</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ALL_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cycleCounterInit();  <span class="comment">//得到系统每个us的系统CLK个数，为以后延时函数，和得到精准的当前执行时间使用</span></span><br><span class="line">SysTick_Config(SystemCoreClock / <span class="number">1000</span>);<span class="comment">//系统滴答时钟</span></span><br><span class="line">IIC_Init();             <span class="comment">//I2C初始化</span></span><br><span class="line">pid_param_Init();       <span class="comment">//PID参数初始化 </span></span><br><span class="line">LEDInit();              <span class="comment">//LED闪灯初始化</span></span><br><span class="line">MpuInit();              <span class="comment">//MPU6050初始化</span></span><br><span class="line">USART3_Config();        <span class="comment">//上位机串口初始化</span></span><br><span class="line">NRF24L01_init();<span class="comment">//2.4G遥控通信初始化</span></span><br><span class="line">TIM2_PWM_Config();<span class="comment">//4路PWM初始化</span></span><br><span class="line">TIM3_Config();<span class="comment">//系统工作周期初始化 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pid_param_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pidRateX.kp = <span class="number">2.0f</span>;</span><br><span class="line">pidRateY.kp = <span class="number">2.0f</span>;</span><br><span class="line">pidRateZ.kp = <span class="number">4.0f</span>;</span><br><span class="line"></span><br><span class="line">pidRateX.ki = <span class="number">0.0f</span>;</span><br><span class="line">pidRateY.ki = <span class="number">0.0f</span>;</span><br><span class="line">pidRateZ.ki = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">pidRateX.kd = <span class="number">0.08f</span>;</span><br><span class="line">pidRateY.kd = <span class="number">0.08f</span>;</span><br><span class="line">pidRateZ.kd = <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">pidPitch.kp = <span class="number">7.0f</span>;</span><br><span class="line">pidRoll.kp = <span class="number">7.0f</span>;</span><br><span class="line">pidYaw.kp = <span class="number">7.0f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IIC.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;i2c.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DEFINE.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> SUCCESS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> FAILED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAILED  1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: I2c_delay</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c 延时函数</span></span><br><span class="line"><span class="comment"> * 入口参数: 无</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2c_delay</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i)</span><br><span class="line">i--;\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: I2c_Init</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c  GPIO初始化</span></span><br><span class="line"><span class="comment"> * 入口参数: 无</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">IIC_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStrucSUCCESS;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB  , ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStrucSUCCESS.GPIO_Pin = SCL_PIN | SDA_PIN;</span><br><span class="line">GPIO_InitStrucSUCCESS.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStrucSUCCESS.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">GPIO_Init(IIC_GPIO, &amp;GPIO_InitStrucSUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: I2c_Start</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c  起始信号</span></span><br><span class="line"><span class="comment"> * 入口参数: 无</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint8_t</span> <span class="title">I2c_Start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SDA_H;</span><br><span class="line">SCL_H;</span><br><span class="line">I2c_delay();</span><br><span class="line"><span class="keyword">if</span> (!SDA_read)</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">SDA_L;</span><br><span class="line">I2c_delay();</span><br><span class="line"><span class="keyword">if</span> (SDA_read)</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: I2c_Stop</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c  停止信号</span></span><br><span class="line"><span class="comment"> * 入口参数: 无</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2c_Stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">SDA_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">SCL_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">SDA_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: I2c_Ack</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c  产生应答信号</span></span><br><span class="line"><span class="comment"> * 入口参数: 无</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2c_Ack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">SDA_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">SCL_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: I2c_NoAck</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c  产生NAck</span></span><br><span class="line"><span class="comment"> * 入口参数: 无</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2c_NoAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">SDA_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">SCL_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> *函数名称:I2c_WaitAck</span></span><br><span class="line"><span class="comment"> *函数功能:等待应答信号到来</span></span><br><span class="line"><span class="comment"> *返回值：   1，接收应答失败</span></span><br><span class="line"><span class="comment"> *           0，接收应答成功</span></span><br><span class="line"><span class="comment"> *******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint8_t</span> <span class="title">I2c_WaitAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">SDA_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">SCL_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line"><span class="keyword">if</span> (SDA_read) </span><br><span class="line">&#123;</span><br><span class="line">SCL_L;</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">&#125;</span><br><span class="line">SCL_L;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: I2c_SendByte</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c  发送一个字节数据</span></span><br><span class="line"><span class="comment"> * 入口参数: byte  发送的数据</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">I2c_SendByte</span><span class="params">(<span class="keyword">uint8_t</span> byte)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> i = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) </span><br><span class="line">&#123;</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line"><span class="keyword">if</span> (byte &amp; <span class="number">0x80</span>)</span><br><span class="line">SDA_H;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">SDA_L;</span><br><span class="line">byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">I2c_delay();</span><br><span class="line">SCL_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">&#125;</span><br><span class="line">SCL_L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: I2c_ReadByte</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c  读取一个字节数据</span></span><br><span class="line"><span class="comment"> * 入口参数: 无</span></span><br><span class="line"><span class="comment"> * 返回值 读取的数据</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint8_t</span> <span class="title">I2c_ReadByte</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> i = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">uint8_t</span> byte = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">SDA_H;</span><br><span class="line"><span class="keyword">while</span> (i--) </span><br><span class="line">&#123;</span><br><span class="line">byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">SCL_L;</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">SCL_H;</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line">I2c_delay();</span><br><span class="line"><span class="keyword">if</span> (SDA_read) </span><br><span class="line">&#123;</span><br><span class="line">byte |= <span class="number">0x01</span>;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line">SCL_L;</span><br><span class="line"><span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数名称: i2cWriteBuffer</span></span><br><span class="line"><span class="comment"> * 函数功能: I2c       向设备的某一个地址写入固定长度的数据</span></span><br><span class="line"><span class="comment"> * 入口参数: addr,     设备地址</span></span><br><span class="line"><span class="comment"> *           reg，     寄存器地址</span></span><br><span class="line"><span class="comment"> * len，     数据长度</span></span><br><span class="line"><span class="comment"> * *data   数据指针</span></span><br><span class="line"><span class="comment"> * 返回值 1</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">IIC_Write_Bytes</span><span class="params">(<span class="keyword">uint8_t</span> addr,<span class="keyword">uint8_t</span> reg,<span class="keyword">uint8_t</span> *data,<span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (I2c_Start() == FAILED)</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">I2c_SendByte(addr);</span><br><span class="line"><span class="keyword">if</span> (I2c_WaitAck() == FAILED) </span><br><span class="line">&#123;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">&#125;</span><br><span class="line">I2c_SendByte(reg);</span><br><span class="line">I2c_WaitAck();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) </span><br><span class="line">&#123;</span><br><span class="line">I2c_SendByte(data[i]);</span><br><span class="line"><span class="keyword">if</span> (I2c_WaitAck() == FAILED) </span><br><span class="line">&#123;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">IIC_Read_One_Byte</span><span class="params">(<span class="keyword">uint8_t</span> addr,<span class="keyword">uint8_t</span> reg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> recive = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (I2c_Start() == FAILED)</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">I2c_SendByte(addr);</span><br><span class="line"><span class="keyword">if</span> (I2c_WaitAck() == FAILED) </span><br><span class="line">&#123;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">&#125;</span><br><span class="line">I2c_SendByte(reg);</span><br><span class="line">I2c_WaitAck();</span><br><span class="line">I2c_Stop();</span><br><span class="line">I2c_Start();</span><br><span class="line">I2c_SendByte(addr+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (I2c_WaitAck() == FAILED) </span><br><span class="line">&#123;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">&#125;</span><br><span class="line">recive = I2c_ReadByte();</span><br><span class="line">I2c_NoAck();</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> recive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment"> *函数名称:i2cWrite</span></span><br><span class="line"><span class="comment"> *函数功能:写入指定设备 指定寄存器一个字节</span></span><br><span class="line"><span class="comment"> *入口参数： addr 目标设备地址</span></span><br><span class="line"><span class="comment"> *     reg   寄存器地址</span></span><br><span class="line"><span class="comment"> *     data 读出的数据将要存放的地址</span></span><br><span class="line"><span class="comment"> *******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">IIC_Write_One_Byte</span><span class="params">(<span class="keyword">uint8_t</span> addr,<span class="keyword">uint8_t</span> reg,<span class="keyword">uint8_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (I2c_Start() == FAILED)</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">I2c_SendByte(addr);</span><br><span class="line"><span class="keyword">if</span> (I2c_WaitAck() == FAILED) </span><br><span class="line">&#123;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">&#125;</span><br><span class="line">I2c_SendByte(reg);</span><br><span class="line">I2c_WaitAck();</span><br><span class="line">I2c_SendByte(data);</span><br><span class="line">I2c_WaitAck();</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">IIC_read_Bytes</span><span class="params">(<span class="keyword">uint8_t</span> addr,<span class="keyword">uint8_t</span> reg,<span class="keyword">uint8_t</span> *data,<span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (I2c_Start() == FAILED)</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">I2c_SendByte(addr);</span><br><span class="line"><span class="keyword">if</span> (I2c_WaitAck() == FAILED) </span><br><span class="line">&#123;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">&#125;</span><br><span class="line">I2c_SendByte(reg);</span><br><span class="line">I2c_WaitAck();</span><br><span class="line">I2c_Stop();</span><br><span class="line">I2c_Start();</span><br><span class="line">I2c_SendByte(addr+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (I2c_WaitAck() == FAILED) </span><br><span class="line">&#123;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (len) </span><br><span class="line">&#123;</span><br><span class="line">*data = I2c_ReadByte();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">I2c_NoAck();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">I2c_Ack();</span><br><span class="line">data++;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line">I2c_Stop();</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Usart.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;misc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：USART1_Config</span></span><br><span class="line"><span class="comment"> * 描述  ：USART1 GPIO 配置,工作模式配置。</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  : 无</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; </span><br><span class="line"><span class="comment">/* 配置串口1 （USART1） 时钟*/</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3 | RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能串口1中断 */</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;<span class="comment">//USART1  串口1全局中断 </span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;<span class="comment">//抢占优先级1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>; <span class="comment">//子优先级1</span></span><br><span class="line"><span class="comment">/*IRQ通道使能*/</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line"><span class="comment">/*根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器USART1*/</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*串口GPIO端口配置*/</span></span><br><span class="line">  <span class="comment">/* 配置串口1 （USART1 Tx (PA.09)）*/</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 配置串口1 USART1 Rx (PA.10)*/</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//USART 初始化设置</span></span><br><span class="line">USART_InitStructure.USART_BaudRate =<span class="number">500000</span>;<span class="comment">//串口波特率</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">USART_Init(USART3, &amp;USART_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);<span class="comment">//开启中断</span></span><br><span class="line"></span><br><span class="line">USART_Cmd(USART3, ENABLE); <span class="comment">//使能串口 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_SendByte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> *Data,<span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!(USART1-&gt;SR &amp; USART_FLAG_TXE)); <span class="comment">// while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)</span></span><br><span class="line">USART_SendData(USART1,*(Data+i)); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_SendByte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> *Data,<span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!(USART3-&gt;SR &amp; USART_FLAG_TXE)); <span class="comment">// while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)</span></span><br><span class="line">USART_SendData(USART3,*(Data+i)); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int8_t</span> CheckSend[<span class="number">7</span>]=&#123;<span class="number">0xAA</span>,<span class="number">0XAA</span>,<span class="number">0xEF</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_setBaudRate</span><span class="params">(<span class="keyword">uint32_t</span> baudRate)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">USART_InitStructure.USART_BaudRate =  baudRate;</span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：fputc</span></span><br><span class="line"><span class="comment"> * 描述  ：重定向c库函数printf到USART1</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：无</span></span><br><span class="line"><span class="comment"> * 调用  ：由printf调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 将Printf内容发往串口 */</span></span><br><span class="line">USART_SendData(USART1, (<span class="keyword">unsigned</span> <span class="keyword">char</span>) ch);</span><br><span class="line"><span class="keyword">while</span>( USART_GetFlagStatus(USART1,USART_FLAG_TC)!= SET);</span><br><span class="line"><span class="keyword">return</span> (ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TIM.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TIM.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DEFINE.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM2_PWM_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;</span><br><span class="line">  TIM_OCInitTypeDef TIM_OCInitStructure;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">  <span class="comment">/* 使能GPIOA时钟时钟 */</span></span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 |</span><br><span class="line">    GPIO_Pin_3;</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">  <span class="comment">/* 使能定时器2时钟 */</span></span><br><span class="line">  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);</span><br><span class="line">  <span class="comment">/* Time base configuration */</span></span><br><span class="line">  TIM_TimeBaseStructure.TIM_Period = <span class="number">999</span>; <span class="comment">//定时器计数周期 0-999  1000</span></span><br><span class="line">  TIM_TimeBaseStructure.TIM_Prescaler = <span class="number">8</span>; <span class="comment">//设置预分频：8+1分频   8K PWM频率</span></span><br><span class="line">  TIM_TimeBaseStructure.TIM_ClockDivision = <span class="number">0</span>; <span class="comment">//设置时钟分频系数：不分频</span></span><br><span class="line">  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//向上计数模式</span></span><br><span class="line"></span><br><span class="line">  TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseStructure);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* PWM1 Mode configuration: Channel */</span></span><br><span class="line">  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; <span class="comment">//配置为PWM模式1</span></span><br><span class="line">  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;</span><br><span class="line">  TIM_OCInitStructure.TIM_Pulse = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//设置跳变值，当计数器计数到这个值时，电平发生跳变(即占空比) 初始值0</span></span><br><span class="line">  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;</span><br><span class="line">    <span class="comment">//当定时器计数值小于定时设定值时为高电平</span></span><br><span class="line">  <span class="comment">/* 使能通道1 */</span></span><br><span class="line">  TIM_OC1Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line">  TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);</span><br><span class="line">  <span class="comment">/* 使能通道2 */</span></span><br><span class="line">  TIM_OC2Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line">  TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);</span><br><span class="line">  <span class="comment">/* 使能通道3 */</span></span><br><span class="line">  TIM_OC3Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line">  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);</span><br><span class="line">  <span class="comment">/* 使能通道4 */</span></span><br><span class="line">  TIM_OC4Init(TIM2, &amp;TIM_OCInitStructure);</span><br><span class="line">  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);</span><br><span class="line"></span><br><span class="line">  TIM_ARRPreloadConfig(TIM2, ENABLE); <span class="comment">// 使能TIM2重载寄存器ARR</span></span><br><span class="line">  TIM_Cmd(TIM2, ENABLE); <span class="comment">//使能定时器2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通用定时器中断初始化</span></span><br><span class="line"><span class="comment">//这里时钟选择为APB1的2倍，而APB1为36M</span></span><br><span class="line"><span class="comment">//arr：自动重装值。</span></span><br><span class="line"><span class="comment">//psc：时钟预分频数</span></span><br><span class="line"><span class="comment">//这里使用的是定时器3!</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM3_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; </span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); <span class="comment">//时钟使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  <span class="comment">//TIM3中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;  <span class="comment">//先占优先级1级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;  <span class="comment">//从优先级3级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//IRQ通道被使能</span></span><br><span class="line"></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);  <span class="comment">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span></span><br><span class="line">TIM_TimeBaseStructure.TIM_Period = <span class="number">299</span>; <span class="comment">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值 计数到300为3ms</span></span><br><span class="line">TIM_TimeBaseStructure.TIM_Prescaler =<span class="number">719</span>; <span class="comment">//设置用来作为TIMx时钟频率除数的预分频值  100Khz的计数频率  </span></span><br><span class="line">TIM_TimeBaseStructure.TIM_ClockDivision = <span class="number">0</span>; <span class="comment">//设置时钟分割:TDTS = Tck_tim</span></span><br><span class="line">TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  <span class="comment">//TIM向上计数模式</span></span><br><span class="line">TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseStructure); <span class="comment">//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位</span></span><br><span class="line"> </span><br><span class="line">TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);</span><br><span class="line"></span><br><span class="line">TIM_Cmd(TIM3, ENABLE);  <span class="comment">//使能TIMx外设 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>   <span class="comment">//TIM3中断 3ms</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) <span class="comment">//检查指定的TIM中断发生与否:TIM 中断源 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> cnt_3ms = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> cnt_6ms = <span class="number">0</span>; </span><br><span class="line">SysTick_count++;</span><br><span class="line">cnt_3ms++;</span><br><span class="line">cnt_6ms++;</span><br><span class="line"><span class="keyword">if</span>(cnt_3ms == <span class="number">1</span>)  <span class="comment">//1ms更新一次</span></span><br><span class="line">&#123;</span><br><span class="line">cnt_3ms = <span class="number">0</span>;</span><br><span class="line">MpuGetData();</span><br><span class="line">RC_Analy();</span><br><span class="line">FlightPidControl(<span class="number">0.003f</span>);</span><br><span class="line">MotorControl();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt_6ms == <span class="number">2</span>) <span class="comment">//6ms更新一次</span></span><br><span class="line">&#123;</span><br><span class="line">cnt_6ms = <span class="number">0</span>;</span><br><span class="line">GetAngle(&amp;MPU6050,&amp;Angle,<span class="number">0.00626f</span>);</span><br><span class="line">&#125;</span><br><span class="line">TIM_ClearITPendingBit(TIM3, TIM_IT_Update );  <span class="comment">//清除TIMx的中断待处理位:TIM 中断源 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SPI.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;spi.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      SPI_InitTypeDef  SPI_InitStructure;</span><br><span class="line">     GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);  </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO  , ENABLE);</span><br><span class="line">GPIO_SetBits(GPIOB, GPIO_Pin_12); <span class="comment">//NRF_CS预置为高 </span></span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15; </span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; </span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure); </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* SPI2 configuration */</span></span><br><span class="line">        SPI_Cmd(SPI2, DISABLE);             <span class="comment">//必须先禁能,才能改变MODE</span></span><br><span class="line">        SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;</span><br><span class="line">        SPI_InitStructure.SPI_Mode = SPI_Mode_Master;</span><br><span class="line">        SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;</span><br><span class="line">        SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;</span><br><span class="line">        SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;</span><br><span class="line">        SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;</span><br><span class="line">        SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;</span><br><span class="line">        SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;</span><br><span class="line">        SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        SPI_Init(SPI2, &amp;SPI_InitStructure);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* SPI2 enable */</span></span><br><span class="line">        SPI_Cmd(SPI2, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u8 <span class="title">SPI_RW</span><span class="params">(u8 dat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">/* Loop while DR register in not emplty */</span></span><br><span class="line">        <span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Send byte through the SPI2 peripheral */</span></span><br><span class="line">        SPI_I2S_SendData(SPI2, dat);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Wait to receive a byte */</span></span><br><span class="line">        <span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Return the byte read from the SPI bus */</span></span><br><span class="line">        <span class="keyword">return</span> SPI_I2S_ReceiveData(SPI2);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LED.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DATA.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">sLED LED = &#123;<span class="number">300</span>,AllFlashLight&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LEDInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB  , ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);</span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable,ENABLE);</span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2|GPIO_Pin_8 | GPIO_Pin_9;     <span class="comment">//LED12</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LEDRefresh</span><span class="params">()</span> <span class="comment">//flash 300MS interval</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint32_t</span> LastTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(SysTick_count - LastTime &lt; LED.FlashTime)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LastTime = SysTick_count;</span><br><span class="line"><span class="keyword">switch</span>(LED.status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> AlwaysOff:      <span class="comment">//常暗   </span></span><br><span class="line">bLED_H();</span><br><span class="line">fLED_H();</span><br><span class="line">bLED_H();</span><br><span class="line">hLED_H();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AllFlashLight:  <span class="comment">//全部同时闪烁</span></span><br><span class="line">fLED_Toggle();</span><br><span class="line">bLED_Toggle();</span><br><span class="line">hLED_Toggle();</span><br><span class="line">aLED_Toggle();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AlwaysOn:  <span class="comment">//常亮</span></span><br><span class="line">  bLED_L();</span><br><span class="line">fLED_L();</span><br><span class="line">aLED_L();</span><br><span class="line">hLED_L();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AlternateFlash: <span class="comment">//交替闪烁</span></span><br><span class="line">bLED_H();</span><br><span class="line">fLED_L();</span><br><span class="line">aLED_H();</span><br><span class="line">hLED_L();</span><br><span class="line">LED.status = AllFlashLight;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WARNING:</span><br><span class="line">fLED_L();</span><br><span class="line">hLED_L();</span><br><span class="line">bLED_Toggle();</span><br><span class="line">LED.FlashTime = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DANGEROURS:</span><br><span class="line">bLED_L();</span><br><span class="line">  aLED_L();</span><br><span class="line">fLED_Toggle();</span><br><span class="line">  hLED_Toggle();</span><br><span class="line">LED.FlashTime = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">LED.status = AlwaysOff;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NRF24L01.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nrf24l01.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SPI.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> SUCCESS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> FAILED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAILED  1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TX  0x10  <span class="comment">//达到最大发送次数中断</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TX_OK   0x20  <span class="comment">//TX发送完成中断</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RX_OK   0x40  <span class="comment">//接收到数据中断</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//24L01操作线   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_CSN_H    (GPIOB-&gt;BSRR = GPIO_Pin_12) <span class="comment">// PB12</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_CSN_L     (GPIOB-&gt;BRR = GPIO_Pin_12)    <span class="comment">// PB12</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NRF24L01_CE_H (GPIOA-&gt;BSRR = GPIO_Pin_11)    <span class="comment">// PB1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NRF24L01_CE_L  (GPIOA-&gt;BRR = GPIO_Pin_11)    <span class="comment">// PB1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NRF24L01_IRQ   (GPIOB-&gt;IDR&amp;GPIO_Pin_0)<span class="comment">//IRQ主机数据输入 PB0</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nrf24l01.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SPI.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> SUCCESS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> FAILED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAILED  1</span></span><br><span class="line"><span class="comment">//配对密码</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> TX_ADDRESS[]= &#123;<span class="number">0x11</span>,<span class="number">0x22</span>,<span class="number">0x33</span>,<span class="number">0x44</span>,<span class="number">0x55</span>&#125;;<span class="comment">//本地地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> RX_ADDRESS[]= &#123;<span class="number">0x11</span>,<span class="number">0x22</span>,<span class="number">0x33</span>,<span class="number">0x44</span>,<span class="number">0x55</span>&#125;;<span class="comment">//接收地址RX_ADDR_P0 == RX_ADDR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//24L01操作线   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Set_NRF24L01_CSN    (GPIOB-&gt;BSRR = GPIO_Pin_12) <span class="comment">// PB12</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Clr_NRF24L01_CSN     (GPIOB-&gt;BRR = GPIO_Pin_12)    <span class="comment">// PB12</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Set_NRF24L01_CE (GPIOA-&gt;BSRR = GPIO_Pin_11)    <span class="comment">// PB1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Clr_NRF24L01_CE  (GPIOA-&gt;BRR = GPIO_Pin_11)    <span class="comment">// PB1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_NRF24L01_IRQ   (GPIOA-&gt;IDR&amp;GPIO_Pin_8)<span class="comment">//IRQ主机数据输入 PB0</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化24L01的IO口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NRF24L01_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);    <span class="comment">//使能GPIO的时钟  CE</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;          <span class="comment">//NRF24L01  </span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);   <span class="comment">//使能GPIO的时钟 CSN</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;      </span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">Set_NRF24L01_CE;                                    <span class="comment">//初始化时先拉高</span></span><br><span class="line">Set_NRF24L01_CSN;                                   <span class="comment">//初始化时先拉高</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置NRF2401的IRQ</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU  ;     <span class="comment">//上拉输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">GPIO_SetBits(GPIOA,GPIO_Pin_8);</span><br><span class="line"></span><br><span class="line">SPI_Config();                                <span class="comment">//初始化SPI</span></span><br><span class="line">Clr_NRF24L01_CE;                                 <span class="comment">//使能24L01</span></span><br><span class="line">Set_NRF24L01_CSN;                                   <span class="comment">//SPI片选取消</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上电检测NRF24L01是否在位</span></span><br><span class="line"><span class="comment">//写5个数据然后再读回来进行比较，</span></span><br><span class="line"><span class="comment">//相同时返回值:0，表示在位;否则返回1，表示不在位</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Check</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 buf[<span class="number">5</span>]=&#123;<span class="number">0XA5</span>,<span class="number">0XA5</span>,<span class="number">0XA5</span>,<span class="number">0XA5</span>,<span class="number">0XA5</span>&#125;;</span><br><span class="line">u8 buf1[<span class="number">5</span>];</span><br><span class="line">u8 i;    </span><br><span class="line">NRF24L01_Write_Buf(SPI_WRITE_REG+TX_ADDR,buf,<span class="number">5</span>);<span class="comment">//写入5个字节的地址.</span></span><br><span class="line">NRF24L01_Read_Buf(TX_ADDR,buf1,<span class="number">5</span>);              <span class="comment">//读出写入的地址  </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)<span class="keyword">if</span>(buf1[i]!=<span class="number">0XA5</span>)<span class="keyword">break</span>;   </span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">5</span>)<span class="keyword">return</span> <span class="number">1</span>;                               <span class="comment">//NRF24L01不在位</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;                                <span class="comment">//NRF24L01在位</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//通过SPI写寄存器</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Write_Reg</span><span class="params">(u8 regaddr,u8 data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 status;</span><br><span class="line">    Clr_NRF24L01_CSN;                    <span class="comment">//使能SPI传输</span></span><br><span class="line">  status =SPI_RW(regaddr); <span class="comment">//发送寄存器号 </span></span><br><span class="line">  SPI_RW(data);            <span class="comment">//写入寄存器的值</span></span><br><span class="line">  Set_NRF24L01_CSN;                    <span class="comment">//禁止SPI传输   </span></span><br><span class="line">  <span class="keyword">return</span>(status);                <span class="comment">//返回状态值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取SPI寄存器值 ，regaddr:要读的寄存器</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Read_Reg</span><span class="params">(u8 regaddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 reg_val;    </span><br><span class="line">Clr_NRF24L01_CSN;                <span class="comment">//使能SPI传输</span></span><br><span class="line">  SPI_RW(regaddr);     <span class="comment">//发送寄存器号</span></span><br><span class="line">  reg_val=SPI_RW(<span class="number">0XFF</span>);<span class="comment">//读取寄存器内容</span></span><br><span class="line">  Set_NRF24L01_CSN;                <span class="comment">//禁止SPI传输    </span></span><br><span class="line">  <span class="keyword">return</span>(reg_val);                 <span class="comment">//返回状态值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置读出指定长度的数据</span></span><br><span class="line"><span class="comment">//*pBuf:数据指针</span></span><br><span class="line"><span class="comment">//返回值,此次读到的状态寄存器值 </span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Read_Buf</span><span class="params">(u8 regaddr,u8 *pBuf,u8 datalen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 status,u8_ctr;       </span><br><span class="line">  Clr_NRF24L01_CSN;                     <span class="comment">//使能SPI传输</span></span><br><span class="line">  status=SPI_RW(regaddr);   <span class="comment">//发送寄存器值(位置),并读取状态值      </span></span><br><span class="line"><span class="keyword">for</span>(u8_ctr=<span class="number">0</span>;u8_ctr&lt;datalen;u8_ctr++)pBuf[u8_ctr]=SPI_RW(<span class="number">0XFF</span>);<span class="comment">//读出数据</span></span><br><span class="line">  Set_NRF24L01_CSN;                     <span class="comment">//关闭SPI传输</span></span><br><span class="line">  <span class="keyword">return</span> status;                        <span class="comment">//返回读到的状态值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置写指定长度的数据</span></span><br><span class="line"><span class="comment">//*pBuf:数据指针</span></span><br><span class="line"><span class="comment">//返回值,此次读到的状态寄存器值</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Write_Buf</span><span class="params">(u8 regaddr, u8 *pBuf, u8 datalen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 status,u8_ctr;    </span><br><span class="line">Clr_NRF24L01_CSN;                                    <span class="comment">//使能SPI传输</span></span><br><span class="line">  status = SPI_RW(regaddr);                <span class="comment">//发送寄存器值(位置),并读取状态值</span></span><br><span class="line">  <span class="keyword">for</span>(u8_ctr=<span class="number">0</span>; u8_ctr&lt;datalen; u8_ctr++)SPI_RW(*pBuf++); <span class="comment">//写入数据 </span></span><br><span class="line">  Set_NRF24L01_CSN;                                    <span class="comment">//关闭SPI传输</span></span><br><span class="line">  <span class="keyword">return</span> status;                                       <span class="comment">//返回读到的状态值</span></span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//启动NRF24L01发送一次数据</span></span><br><span class="line"><span class="comment">//txbuf:待发送数据首地址</span></span><br><span class="line"><span class="comment">//返回值:发送完成状况</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_TxPacket</span><span class="params">(u8 *txbuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 state;   </span><br><span class="line">Clr_NRF24L01_CE;</span><br><span class="line">NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);<span class="comment">//写数据到TX BUF  32个字节</span></span><br><span class="line">Set_NRF24L01_CE;                                     <span class="comment">//启动发送   </span></span><br><span class="line"><span class="keyword">while</span>(READ_NRF24L01_IRQ!=<span class="number">0</span>);                         <span class="comment">//等待发送完成</span></span><br><span class="line">state=NRF24L01_Read_Reg(STATUS);                     <span class="comment">//读取状态寄存器的值   </span></span><br><span class="line">NRF24L01_Write_Reg(SPI_WRITE_REG+STATUS,state);      <span class="comment">//清除TX_DS或MAX_RT中断标志</span></span><br><span class="line"><span class="keyword">if</span>(state&amp;MAX_TX)                                     <span class="comment">//达到最大重发次数</span></span><br><span class="line">&#123;</span><br><span class="line">NRF24L01_Write_Reg(FLUSH_TX,<span class="number">0xff</span>);               <span class="comment">//清除TX FIFO寄存器 </span></span><br><span class="line"><span class="keyword">return</span> MAX_TX; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(state&amp;TX_OK)                                      <span class="comment">//发送完成</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> FAILED;                                         <span class="comment">//其他原因发送失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动NRF24L01发送一次数据</span></span><br><span class="line"><span class="comment">//txbuf:待发送数据首地址</span></span><br><span class="line"><span class="comment">//返回值:0，接收完成；其他，错误代码</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_RxPacket</span><span class="params">(u8 *rxbuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 state;          </span><br><span class="line">state=NRF24L01_Read_Reg(STATUS);                <span class="comment">//读取状态寄存器的值     </span></span><br><span class="line">NRF24L01_Write_Reg(SPI_WRITE_REG+STATUS,state); <span class="comment">//清除TX_DS或MAX_RT中断标志</span></span><br><span class="line"><span class="keyword">if</span>(state&amp;RX_OK)                                 <span class="comment">//接收到数据</span></span><br><span class="line">&#123;</span><br><span class="line">NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);<span class="comment">//读取数据</span></span><br><span class="line">NRF24L01_Write_Reg(FLUSH_RX,<span class="number">0xff</span>);          <span class="comment">//清除RX FIFO寄存器 </span></span><br><span class="line"><span class="keyword">return</span> SUCCESS; </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">return</span> FAILED;                                      <span class="comment">//没收到任何数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数初始化NRF24L01到RX模式</span></span><br><span class="line"><span class="comment">//设置RX地址,写RX数据宽度,选择RF频道,波特率和LNA HCURR</span></span><br><span class="line"><span class="comment">//当CE变高后,即进入RX模式,并可以接收数据了   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RX_Mode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Clr_NRF24L01_CE;  </span><br><span class="line">    <span class="comment">//写RX节点地址</span></span><br><span class="line">  NRF24L01_Write_Buf(SPI_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使能通道0的自动应答    </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+EN_AA,<span class="number">0x01</span>);    </span><br><span class="line">    <span class="comment">//使能通道0的接收地址   </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+EN_RXADDR,<span class="number">0x01</span>); </span><br><span class="line">  <span class="comment">//设置RF通信频率  </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RF_CH,<span class="number">45</span>);  <span class="comment">//(要改单机控制，就把45改成跟遥控器单独一样的。就可以单机控制了)</span></span><br><span class="line">    <span class="comment">//选择通道0的有效数据宽度     </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);</span><br><span class="line">    <span class="comment">//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RF_SETUP,<span class="number">0x0f</span>);</span><br><span class="line">    <span class="comment">//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,PRIM_RX接收模式 </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+NCONFIG, <span class="number">0x0f</span>); </span><br><span class="line">    <span class="comment">//CE为高,进入接收模式 </span></span><br><span class="line">  Set_NRF24L01_CE;                                </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数初始化NRF24L01到TX模式</span></span><br><span class="line"><span class="comment">//设置TX地址,写TX数据宽度,设置RX自动应答的地址,填充TX发送数据,</span></span><br><span class="line"><span class="comment">//选择RF频道,波特率和LNA HCURR PWR_UP,CRC使能</span></span><br><span class="line"><span class="comment">//当CE变高后,即进入RX模式,并可以接收数据了   </span></span><br><span class="line"><span class="comment">//CE为高大于10us,则启动发送. </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TX_Mode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">Clr_NRF24L01_CE;    </span><br><span class="line">    <span class="comment">//写TX节点地址 </span></span><br><span class="line">  NRF24L01_Write_Buf(SPI_WRITE_REG+TX_ADDR,(u8*)TX_ADDRESS,TX_ADR_WIDTH);    </span><br><span class="line">    <span class="comment">//设置TX节点地址,主要为了使能ACK  </span></span><br><span class="line">  NRF24L01_Write_Buf(SPI_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//使能通道0的自动应答    </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+EN_AA,<span class="number">0x01</span>);     </span><br><span class="line">    <span class="comment">//使能通道0的接收地址  </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+EN_RXADDR,<span class="number">0x01</span>); </span><br><span class="line">    <span class="comment">//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次</span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+SETUP_RETR,<span class="number">0x1a</span>);</span><br><span class="line">    <span class="comment">//设置RF通道为40</span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RF_CH,<span class="number">45</span>);       <span class="comment">//(要改单机控制，就把45改成跟遥控器单独一样的。就可以单机控制了)</span></span><br><span class="line">    <span class="comment">//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RF_SETUP,<span class="number">0x0f</span>);  <span class="comment">//0x27  250K   0x07 1M</span></span><br><span class="line">    <span class="comment">//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,PRIM_RX发送模式,开启所有中断</span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+NCONFIG,<span class="number">0x0e</span>);    </span><br><span class="line">    <span class="comment">// CE为高,10us后启动发送</span></span><br><span class="line">Set_NRF24L01_CE;                                  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NRF24L01_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">NRF24L01_Configuration();</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    RX_Mode();</span><br><span class="line">&#125;<span class="keyword">while</span>(NRF24L01_Check() == FAILED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MPU6050.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DATA.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;I2C.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;filter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myMath.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kalman.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>SMPLRT_DIV0x19<span class="comment">//陀螺仪采样率，典型值：0x07(125Hz)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>CONFIGL0x1A<span class="comment">//低通滤波频率，典型值：0x06(5Hz)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>GYRO_CONFIG0x1B<span class="comment">//陀螺仪自检及测量范围，典型值：0x18(不自检，2000deg/s)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ACCEL_CONFIG0x1C<span class="comment">//加速计自检、测量范围及高通滤波频率，典型值：0x01(不自检，2G，5Hz)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ACCEL_ADDRESS0x3B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ACCEL_XOUT_H0x3B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ACCEL_XOUT_L0x3C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ACCEL_YOUT_H0x3D</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ACCEL_YOUT_L0x3E</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ACCEL_ZOUT_H0x3F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ACCEL_ZOUT_L0x40</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>TEMP_OUT_H0x41</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>TEMP_OUT_L0x42</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>GYRO_XOUT_H0x43</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GYRO_ADDRESS  0x43</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>GYRO_XOUT_L0x44</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>GYRO_YOUT_H0x45</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>GYRO_YOUT_L0x46</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>GYRO_ZOUT_H0x47</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>GYRO_ZOUT_L0x48</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>PWR_MGMT_10x6B<span class="comment">//电源管理，典型值：0x00(正常启用)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>WHO_AM_I  0x75<span class="comment">//IIC地址寄存器(默认数值0x68，只读)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU6050_PRODUCT_ID 0x68</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU6052C_PRODUCT_ID 0x72</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define   MPU6050_is_DRY()      GPIO_ReadOutBit(HT_GPIOC, GPIO_PIN_0)//IRQ主机数据输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  USE_I2C_HARDWARE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU6050_ADDRESS 0xD0<span class="comment">//0x68</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MPU6050_ADDRESS 0xD0   <span class="comment">//IIC写入时的地址字节数据，+1为读取</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int16_t</span> MpuOffset[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int16_t</span> *pMpu = (<span class="keyword">int16_t</span> *)&amp;MPU6050;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">mpu6050_rest</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(IIC_Write_One_Byte(MPU6050_ADDRESS, PWR_MGMT_1, <span class="number">0x80</span>) == FAILED)</span><br><span class="line"><span class="keyword">return</span> FAILED;<span class="comment">//复位</span></span><br><span class="line">delay_ms(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************</span></span><br><span class="line"><span class="comment">*@brief   </span></span><br><span class="line"><span class="comment">*@brief  </span></span><br><span class="line"><span class="comment">*@param[in]</span></span><br><span class="line"><span class="comment">*****************************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">MpuInit</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> date = SUCCESS;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">date = IIC_Write_One_Byte(MPU6050_ADDRESS, PWR_MGMT_1, <span class="number">0x80</span>);<span class="comment">//复位</span></span><br><span class="line">delay_ms(<span class="number">30</span>);</span><br><span class="line">date += IIC_Write_One_Byte(MPU6050_ADDRESS, SMPLRT_DIV, <span class="number">0x02</span>); <span class="comment">//陀螺仪采样率，0x00(500Hz)</span></span><br><span class="line">date += IIC_Write_One_Byte(MPU6050_ADDRESS, PWR_MGMT_1, <span class="number">0x03</span>);<span class="comment">//设置设备时钟源，陀螺仪Z轴</span></span><br><span class="line">date += IIC_Write_One_Byte(MPU6050_ADDRESS, CONFIGL, <span class="number">0x03</span>);   <span class="comment">//低通滤波频率，0x03(42Hz)</span></span><br><span class="line">date += IIC_Write_One_Byte(MPU6050_ADDRESS, GYRO_CONFIG, <span class="number">0x18</span>);<span class="comment">//+-2000deg/s</span></span><br><span class="line">date += IIC_Write_One_Byte(MPU6050_ADDRESS, ACCEL_CONFIG, <span class="number">0x09</span>);<span class="comment">//+-4G</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(date != SUCCESS);</span><br><span class="line">date = IIC_Read_One_Byte(MPU6050_ADDRESS, <span class="number">0x75</span>);</span><br><span class="line"><span class="keyword">if</span>(date!= MPU6050_PRODUCT_ID)</span><br><span class="line"><span class="keyword">return</span> FAILED;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">MpuGetOffset();</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  Gyro_Read() IIC_read_Bytes(MPU6050_ADDRESS, 0X3B,buffer,6)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  Acc_Read() IIC_read_Bytes(MPU6050_ADDRESS, 0x43,&amp;buffer[6],6)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MpuGetData</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//读取陀螺仪数据加滤波</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> i;</span><br><span class="line">    <span class="keyword">uint8_t</span> buffer[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">Gyro_Read();</span><br><span class="line">  Acc_Read();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">pMpu[i] = (((<span class="keyword">int16_t</span>)buffer[i&lt;&lt;<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | buffer[(i&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>])-MpuOffset[i];</span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> _1_<span class="title">ekf_filter</span> <span class="title">ekf</span>[3] =</span> &#123;&#123;<span class="number">0.02</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.001</span>,<span class="number">0.543</span>&#125;,&#123;<span class="number">0.02</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.001</span>,<span class="number">0.543</span>&#125;,&#123;<span class="number">0.02</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.001</span>,<span class="number">0.543</span>&#125;&#125;;</span><br><span class="line">kalman_1(&amp;ekf[i],(<span class="keyword">float</span>)pMpu[i]);  <span class="comment">//一维卡尔曼</span></span><br><span class="line">pMpu[i] = (<span class="keyword">int16_t</span>)ekf[i].out;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> k=i<span class="number">-3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> factor = <span class="number">0.15f</span>;  <span class="comment">//滤波因素</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> tBuff[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">pMpu[i] = tBuff[k] = tBuff[k] * (<span class="number">1</span> - factor) + pMpu[i] * factor;                </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************************************************************</span></span><br><span class="line"><span class="comment">*@brief   get mpu offset</span></span><br><span class="line"><span class="comment">*@brief   initial and cmd call this</span></span><br><span class="line"><span class="comment">*@param[in]</span></span><br><span class="line"><span class="comment">*****************************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MpuGetOffset</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//校准</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int32_t</span> buffer[<span class="number">6</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int16_t</span> i;  </span><br><span class="line"><span class="keyword">uint8_t</span> k=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int8_t</span> MAX_GYRO_QUIET = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int8_t</span> MIN_GYRO_QUIET = <span class="number">-5</span>;</span><br><span class="line"><span class="comment">/*           wait for calm down                                                              */</span></span><br><span class="line"><span class="keyword">int16_t</span> LastGyro[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int16_t</span> ErrorGyro[<span class="number">3</span>];</span><br><span class="line"><span class="comment">/*           set offset initial to zero    */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(MpuOffset,<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">MpuOffset[<span class="number">2</span>] = <span class="number">8192</span>;   <span class="comment">//set offset from the 8192  </span></span><br><span class="line"></span><br><span class="line">TIM_ITConfig(  <span class="comment">//使能或者失能指定的TIM中断</span></span><br><span class="line">TIM3, <span class="comment">//TIM2</span></span><br><span class="line">TIM_IT_Update ,</span><br><span class="line">DISABLE  <span class="comment">//使能</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">while</span>(k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">MpuGetData();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">ErrorGyro[i] = pMpu[i+<span class="number">3</span>] - LastGyro[i];</span><br><span class="line">LastGyro[i] = pMpu[i+<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span> ((ErrorGyro[<span class="number">0</span>] &gt;  MAX_GYRO_QUIET )|| (ErrorGyro[<span class="number">0</span>] &lt; MIN_GYRO_QUIET)</span><br><span class="line">||(ErrorGyro[<span class="number">1</span>] &gt; MAX_GYRO_QUIET )|| (ErrorGyro[<span class="number">1</span>] &lt; MIN_GYRO_QUIET)</span><br><span class="line">||(ErrorGyro[<span class="number">2</span>] &gt; MAX_GYRO_QUIET )|| (ErrorGyro[<span class="number">2</span>] &lt; MIN_GYRO_QUIET)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*           throw first 100  group data and make 256 group average as offset                    */</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">356</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">MpuGetData();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">100</span> &lt;= i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> k;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line">buffer[k] += pMpu[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">MpuOffset[i] = buffer[i]&gt;&gt;<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line">TIM_ITConfig(  <span class="comment">//使能或者失能指定的TIM中断</span></span><br><span class="line">TIM3, <span class="comment">//TIM2</span></span><br><span class="line">TIM_IT_Update ,</span><br><span class="line">ENABLE  <span class="comment">//使能</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ANTO.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DATA.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ANO_DT.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> RatePID[<span class="number">18</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> AnglePID[<span class="number">18</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> HighPID[<span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">uint8_t</span> PID1 :<span class="number">1</span>; <span class="comment">//接受到上位机PID组1</span></span><br><span class="line"><span class="keyword">uint8_t</span> PID2 :<span class="number">1</span>; <span class="comment">//接受到上位机PID组2</span></span><br><span class="line"><span class="keyword">uint8_t</span> PID3 :<span class="number">1</span>; <span class="comment">//接受到上位机PID组3</span></span><br><span class="line"><span class="keyword">uint8_t</span> PID4 :<span class="number">1</span>; <span class="comment">//接受到上位机PID组4</span></span><br><span class="line"><span class="keyword">uint8_t</span> PID5 :<span class="number">1</span>; <span class="comment">//接受到上位机PID组5</span></span><br><span class="line"><span class="keyword">uint8_t</span> PID6 :<span class="number">1</span>; <span class="comment">//接受到上位机PID组6</span></span><br><span class="line"><span class="keyword">uint8_t</span> CMD2_READ_PID:<span class="number">1</span>; <span class="comment">//接受到上位机读取PID的请求</span></span><br><span class="line">&#125;ANTO_Recived_flag;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span>                                  //上位请求飞控类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">READ_PID = <span class="number">0X01</span>,                    <span class="comment">//读取飞控的PID请求</span></span><br><span class="line">READ_MODE = <span class="number">0x02</span>,                   <span class="comment">//读取飞行模式</span></span><br><span class="line">READ_ROUTE = <span class="number">0x21</span>,                  <span class="comment">//读取航点信息</span></span><br><span class="line">READ_VERSION = <span class="number">0XA0</span>,                <span class="comment">//读取飞控版本</span></span><br><span class="line">RETURN_DEFAULT_PID = <span class="number">0xA1</span>           <span class="comment">//恢复默认PID</span></span><br><span class="line"> &#125;CMD2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ANO_Recive</span><span class="params">(<span class="keyword">int8_t</span> *pt)</span>                   <span class="comment">//接收到上位机的数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(pt[<span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> ANTO_RATE_PID:</span><br><span class="line">ANTO_Recived_flag.PID1 = <span class="number">1</span>;             <span class="comment">//接收到上位机发来的PID数据</span></span><br><span class="line"><span class="built_in">memcpy</span>(RatePID,&amp;pt[<span class="number">4</span>],<span class="number">18</span>);              <span class="comment">//先把接收到的数据提出来，防止被下一组PID数据覆盖，这组的PID是给速度环用的</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_ANGLE_PID:                      <span class="comment">//这组的PID是给角度环用的</span></span><br><span class="line"><span class="built_in">memcpy</span>(AnglePID,&amp;pt[<span class="number">4</span>],<span class="number">18</span>);</span><br><span class="line">ANTO_Recived_flag.PID2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_HEIGHT_PID:                     <span class="comment">//这组的PID是给高度环用的</span></span><br><span class="line"><span class="built_in">memcpy</span>(HighPID,&amp;pt[<span class="number">4</span>],<span class="number">18</span>);</span><br><span class="line">ANTO_Recived_flag.PID3 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_PID4:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_PID5:   </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_PID6:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x01</span>:                                <span class="comment">//上位机发来的CMD1 包含各种校准</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x02</span>:                                <span class="comment">//上位机发来的CMD2 包含请求读取PID等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(*(<span class="keyword">uint8_t</span>*)&amp;pt[<span class="number">4</span>])             <span class="comment">//判断上位机发来CMD的内容</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> READ_PID:                      <span class="comment">//上位机请求读取飞控PID数据</span></span><br><span class="line">ANTO_Recived_flag.CMD2_READ_PID = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> READ_MODE: </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> READ_ROUTE: </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> READ_VERSION:  </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RETURN_DEFAULT_PID:  </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_RCDATA: <span class="comment">//Immediately deal with </span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ANTO_Send</span><span class="params">(<span class="keyword">const</span> <span class="keyword">enum</span> ANTO_SEND FUNCTION)</span> <span class="comment">//发送数据到上位机</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> i;</span><br><span class="line"><span class="keyword">uint8_t</span> len=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int16_t</span> Anto[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int8_t</span> *pt = (<span class="keyword">int8_t</span>*)(Anto);</span><br><span class="line">PidObject *pidX=<span class="number">0</span>;</span><br><span class="line">PidObject *pidY=<span class="number">0</span>;</span><br><span class="line">PidObject *pidZ=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(FUNCTION)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> ANTO_RATE_PID:      <span class="comment">//PID1</span></span><br><span class="line"> pidX = &amp;pidRateX;</span><br><span class="line"> pidY = &amp;pidRateY;</span><br><span class="line"> pidZ = &amp;pidRateZ;</span><br><span class="line">         <span class="keyword">goto</span> send_pid;</span><br><span class="line"><span class="keyword">case</span> ANTO_ANGLE_PID:      <span class="comment">//PID2</span></span><br><span class="line"> pidX = &amp;pidRoll;</span><br><span class="line"> pidY = &amp;pidPitch;</span><br><span class="line"> pidZ = &amp;pidYaw;</span><br><span class="line"> <span class="keyword">goto</span> send_pid;</span><br><span class="line"><span class="keyword">case</span> ANTO_HEIGHT_PID:     <span class="comment">//PID3</span></span><br><span class="line"> pidX = &amp;pidHeightRate;</span><br><span class="line"> pidY = &amp;pidHeightHigh;</span><br><span class="line"> <span class="keyword">goto</span> send_pid;</span><br><span class="line"><span class="keyword">case</span> ANTO_PID4:  <span class="comment">//PID4</span></span><br><span class="line"><span class="keyword">case</span> ANTO_PID5:         <span class="comment">//PID5</span></span><br><span class="line">    <span class="keyword">case</span> ANTO_PID6:</span><br><span class="line">send_pid:</span><br><span class="line"><span class="keyword">if</span>(pidX!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Anto[<span class="number">2</span>] = (<span class="keyword">int16_t</span>)(pidX-&gt;kp *<span class="number">1000</span>);</span><br><span class="line">Anto[<span class="number">3</span>] = (<span class="keyword">int16_t</span>)(pidX-&gt;ki *<span class="number">1000</span>);</span><br><span class="line">Anto[<span class="number">4</span>] = (<span class="keyword">int16_t</span>)(pidX-&gt;kd *<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pidY!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Anto[<span class="number">5</span>] = (<span class="keyword">int16_t</span>)(pidY-&gt;kp *<span class="number">1000</span>);</span><br><span class="line">Anto[<span class="number">6</span>] = (<span class="keyword">int16_t</span>)(pidY-&gt;ki *<span class="number">1000</span>);</span><br><span class="line">Anto[<span class="number">7</span>] = (<span class="keyword">int16_t</span>)(pidY-&gt;kd *<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pidZ!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Anto[<span class="number">8</span>] = (<span class="keyword">int16_t</span>)(pidZ-&gt;kp *<span class="number">1000</span>);</span><br><span class="line">Anto[<span class="number">9</span>] = (<span class="keyword">int16_t</span>)(pidZ-&gt;ki *<span class="number">1000</span>);</span><br><span class="line">Anto[<span class="number">10</span>] = (<span class="keyword">int16_t</span>)(pidZ-&gt;kd *<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">len = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_MOTOR:    <span class="comment">//send motor</span></span><br><span class="line"></span><br><span class="line">len = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_RCDATA: <span class="comment">//send RC data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_MPU_MAGIC:     <span class="comment">//发送MPU6050和磁力计的数据</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;Anto[<span class="number">2</span>],(<span class="keyword">int8_t</span>*)&amp;MPU6050,<span class="keyword">sizeof</span>(_st_Mpu));</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;Anto[<span class="number">8</span>],(<span class="keyword">int8_t</span>*)&amp;AK8975,<span class="keyword">sizeof</span>(_st_Mag));</span><br><span class="line">len = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_SENSER2:</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_STATUS:     <span class="comment">//send angle</span></span><br><span class="line"></span><br><span class="line">Anto[<span class="number">2</span>] = (<span class="keyword">int16_t</span>)(-Angle.roll*<span class="number">100</span>);</span><br><span class="line">Anto[<span class="number">3</span>] = (<span class="keyword">int16_t</span>)(Angle.pitch*<span class="number">100</span>);</span><br><span class="line">Anto[<span class="number">4</span>] = (<span class="keyword">int16_t</span>)(-Angle.yaw*<span class="number">100</span>);</span><br><span class="line">   </span><br><span class="line">len = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ANTO_POWER:</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Anto[<span class="number">0</span>] = <span class="number">0XAAAA</span>;</span><br><span class="line">Anto[<span class="number">1</span>] = len | FUNCTION&lt;&lt;<span class="number">8</span>;</span><br><span class="line">pt[len+<span class="number">4</span>] = (<span class="keyword">int8_t</span>)(<span class="number">0xAA</span>+<span class="number">0xAA</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;len+<span class="number">4</span>;i+=<span class="number">2</span>)    <span class="comment">//a swap with b;</span></span><br><span class="line">&#123;</span><br><span class="line">pt[i] ^= pt[i+<span class="number">1</span>];</span><br><span class="line">pt[i+<span class="number">1</span>] ^= pt[i];</span><br><span class="line">pt[i] ^= pt[i+<span class="number">1</span>];</span><br><span class="line">pt[len+<span class="number">4</span>] += pt[i] + pt[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">USART3_SendByte(pt,len+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ANTO_polling</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//轮询扫描上位机端口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">uint8_t</span> status = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">status = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">ANTO_Send(ANTO_MPU_MAGIC);</span><br><span class="line">delay_ms(<span class="number">1</span>);</span><br><span class="line">  ANTO_Send(ANTO_STATUS);</span><br><span class="line">delay_ms(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*(<span class="keyword">uint8_t</span>*)&amp;ANTO_Recived_flag != <span class="number">0</span>) <span class="comment">//一旦接收到上位机的数据，则暂停发送数据到上位机，转而去判断上位机要求飞控做什么。</span></span><br><span class="line">&#123;</span><br><span class="line">status = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span>(*(<span class="keyword">uint8_t</span>*)&amp;ANTO_Recived_flag == <span class="number">0</span>)<span class="comment">//上位机的发过来的数据都被处理了，则返回专心的发送数据到上位机</span></span><br><span class="line">&#123;</span><br><span class="line">status = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ANTO_Recived_flag.CMD2_READ_PID) <span class="comment">//判断上位机是否请求发发送飞控PID数据到上位机</span></span><br><span class="line">&#123;</span><br><span class="line">ANTO_Send(ANTO_RATE_PID);</span><br><span class="line">delay_ms(<span class="number">1</span>);</span><br><span class="line">ANTO_Send(ANTO_ANGLE_PID);</span><br><span class="line">delay_ms(<span class="number">1</span>);</span><br><span class="line">ANTO_Send(ANTO_HEIGHT_PID);</span><br><span class="line">delay_ms(<span class="number">1</span>);</span><br><span class="line">ANTO_Recived_flag.CMD2_READ_PID = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*(<span class="keyword">uint8_t</span>*)&amp;ANTO_Recived_flag &amp; <span class="number">0x3f</span>) <span class="comment">//接收到上位机发来的PID数据</span></span><br><span class="line">&#123;</span><br><span class="line">PidObject *pidX=<span class="number">0</span>;</span><br><span class="line">PidObject *pidY=<span class="number">0</span>;</span><br><span class="line">PidObject *pidZ=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> *P;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ANTO_Recived_flag.PID1)</span><br><span class="line">&#123;</span><br><span class="line"> pidX = &amp;pidRateX;</span><br><span class="line"> pidY = &amp;pidRateY;</span><br><span class="line"> pidZ = &amp;pidRateZ;</span><br><span class="line"> P = RatePID;</span><br><span class="line"> ANTO_Recived_flag.PID1 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ANTO_Recived_flag.PID2)</span><br><span class="line">&#123;</span><br><span class="line"> pidX = &amp;pidRoll;</span><br><span class="line"> pidY = &amp;pidPitch;</span><br><span class="line"> pidZ = &amp;pidYaw;</span><br><span class="line"> P = AnglePID;</span><br><span class="line"> ANTO_Recived_flag.PID2 = <span class="number">0</span>;                             </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ANTO_Recived_flag.PID3)</span><br><span class="line">&#123;</span><br><span class="line"> pidX = &amp;pidHeightRate;</span><br><span class="line"> pidY = &amp;pidHeightHigh;</span><br><span class="line"> P = HighPID;</span><br><span class="line"> ANTO_Recived_flag.PID3 = <span class="number">0</span>;     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="keyword">uint16_t</span> _16;</span><br><span class="line"><span class="keyword">uint8_t</span> _u8[<span class="number">2</span>];</span><br><span class="line">&#125;data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pidX!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">0</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">1</span>];</span><br><span class="line">pidX-&gt;kp =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">2</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">3</span>];</span><br><span class="line">pidX-&gt;ki =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">4</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">5</span>];</span><br><span class="line">pidX-&gt;kd =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pidY!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">6</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">7</span>];</span><br><span class="line">pidY-&gt;kp =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">8</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">9</span>];</span><br><span class="line">pidY-&gt;ki =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">10</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">11</span>];</span><br><span class="line">pidY-&gt;kd =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pidZ!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">12</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">13</span>];</span><br><span class="line">pidZ-&gt;kp =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">14</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">15</span>];</span><br><span class="line">pidZ-&gt;ki =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">data._u8[<span class="number">1</span>] = P[<span class="number">16</span>]; </span><br><span class="line">data._u8[<span class="number">0</span>] = P[<span class="number">17</span>];</span><br><span class="line">pidZ-&gt;kd =  data._16 /<span class="number">1000.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//串口接收</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="keyword">static</span>  <span class="keyword">int8_t</span> ReciveBuffer[<span class="number">25</span>];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> count;</span><br><span class="line"><span class="keyword">if</span> ((USART3-&gt;SR &amp; USART_IT_ORE))<span class="comment">//是否接收寄存器溢出</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">if</span>((USART3-&gt;SR &amp; USART_IT_RXNE))</span><br><span class="line">  &#123;</span><br><span class="line">ReciveBuffer[count] = USART3-&gt;DR;</span><br><span class="line"><span class="keyword">switch</span>(count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span>(ReciveBuffer[<span class="number">0</span>]==(<span class="keyword">int8_t</span>)<span class="number">0xAA</span>)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span>(ReciveBuffer[<span class="number">1</span>]==(<span class="keyword">int8_t</span>)<span class="number">0xAF</span>)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">if</span>(count &lt; ReciveBuffer[<span class="number">3</span>]+<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> i;</span><br><span class="line"><span class="keyword">int8_t</span> CheckSum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">&#123;</span><br><span class="line">CheckSum += ReciveBuffer[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(CheckSum == ReciveBuffer[count])  <span class="comment">//if the data calculate sum equal to the  final data from PC.</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int8_t</span> CheckSend[<span class="number">7</span>]=&#123;<span class="number">0xAA</span>,<span class="number">0XAA</span>,<span class="number">0xEF</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">CheckSend[<span class="number">4</span>] = ReciveBuffer[<span class="number">2</span>];</span><br><span class="line">CheckSend[<span class="number">5</span>] = CheckSum;</span><br><span class="line">CheckSend[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">CheckSend[<span class="number">6</span>] += CheckSend[i]; </span><br><span class="line">&#125;</span><br><span class="line">USART3_SendByte(CheckSend,<span class="number">7</span>);</span><br><span class="line">ANO_Recive(ReciveBuffer);<span class="comment">//To arrange the dataand give the result to control argument.</span></span><br><span class="line">&#125;</span><br><span class="line">count = <span class="number">0</span>;                  <span class="comment">//return to the first data point,and retore from the head buffer next time.</span></span><br><span class="line">ReciveBuffer[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">//reset the data buffer.</span></span><br><span class="line">ReciveBuffer[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Remote.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DATA.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nrf24l01.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;control.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myMath.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Remote.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> FAILED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAILED  1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************************</span></span><br><span class="line"><span class="comment"> *  通道数据处理    </span></span><br><span class="line"><span class="comment"> ******************************************************************************************/</span></span><br><span class="line"><span class="keyword">uint8_t</span> RC_rxData[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remote_unlock</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC_Analy</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint16_t</span> cnt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> roll_pitch_ratio = <span class="number">0.04f</span>;</span><br><span class="line"><span class="keyword">if</span>(NRF24L01_RxPacket(RC_rxData)==SUCCESS)</span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> i;</span><br><span class="line"><span class="keyword">uint8_t</span> CheckSum=<span class="number">0</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">31</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">CheckSum +=  RC_rxData[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(RC_rxData[<span class="number">31</span>]==CheckSum &amp;&amp; RC_rxData[<span class="number">0</span>]==<span class="number">0xAA</span> &amp;&amp; RC_rxData[<span class="number">1</span>]==<span class="number">0xAF</span>)  <span class="comment">//如果接收到的遥控数据正确</span></span><br><span class="line">&#123;</span><br><span class="line">Remote.roll = ((<span class="keyword">uint16_t</span>)RC_rxData[<span class="number">4</span>]&lt;&lt;<span class="number">8</span>) | RC_rxData[<span class="number">5</span>];  <span class="comment">//通道1</span></span><br><span class="line">Remote.roll =Remote.roll &lt; <span class="number">1000</span>  ? <span class="number">1000</span> : ( Remote.roll &gt; <span class="number">2000</span>? <span class="number">2000</span> : Remote.roll );<span class="comment">//roll限幅</span></span><br><span class="line">Remote.pitch = ((<span class="keyword">uint16_t</span>)RC_rxData[<span class="number">6</span>]&lt;&lt;<span class="number">8</span>) | RC_rxData[<span class="number">7</span>];  <span class="comment">//通道2</span></span><br><span class="line">Remote.pitch =Remote.pitch &lt; <span class="number">1000</span>  ? <span class="number">1000</span> : ( Remote.pitch &gt; <span class="number">2000</span>? <span class="number">2000</span> : Remote.pitch );</span><br><span class="line">Remote.thr = ((<span class="keyword">uint16_t</span>)RC_rxData[<span class="number">8</span>]&lt;&lt;<span class="number">8</span>) | RC_rxData[<span class="number">9</span>];   <span class="comment">//通道3</span></span><br><span class="line">Remote.thr =Remote.thr &lt; <span class="number">1000</span>  ? <span class="number">1000</span> : ( Remote.thr &gt; <span class="number">2000</span>? <span class="number">2000</span> : Remote.thr );<span class="comment">//油门限幅</span></span><br><span class="line">Remote.yaw =  ((<span class="keyword">uint16_t</span>)RC_rxData[<span class="number">10</span>]&lt;&lt;<span class="number">8</span>) | RC_rxData[<span class="number">11</span>];   <span class="comment">//通道4</span></span><br><span class="line">Remote.yaw =Remote.thr &lt; <span class="number">1000</span>  ? <span class="number">1000</span> : ( Remote.yaw &gt; <span class="number">2000</span>? <span class="number">2000</span> : Remote.yaw );</span><br><span class="line">Remote.AUX1 =  ((<span class="keyword">uint16_t</span>)RC_rxData[<span class="number">12</span>]&lt;&lt;<span class="number">8</span>) | RC_rxData[<span class="number">13</span>];   <span class="comment">//通道5  左上角按键都属于通道5  </span></span><br><span class="line">Remote.AUX1 =Remote.AUX1 &lt; <span class="number">1000</span>  ? <span class="number">1000</span> : ( Remote.AUX1 &gt; <span class="number">2000</span>? <span class="number">2000</span> : Remote.AUX1 );</span><br><span class="line">Remote.AUX2 =  ((<span class="keyword">uint16_t</span>)RC_rxData[<span class="number">14</span>]&lt;&lt;<span class="number">8</span>) | RC_rxData[<span class="number">15</span>];   <span class="comment">//通道6  右上角按键都属于通道6 </span></span><br><span class="line">Remote.AUX2 =Remote.AUX2 &lt; <span class="number">1000</span>  ? <span class="number">1000</span> : ( Remote.AUX2 &gt; <span class="number">2000</span>? <span class="number">2000</span> : Remote.AUX2 );</span><br><span class="line">Remote.AUX3 =  ((<span class="keyword">uint16_t</span>)RC_rxData[<span class="number">16</span>]&lt;&lt;<span class="number">8</span>) | RC_rxData[<span class="number">17</span>];   <span class="comment">//通道7  左下边按键都属于通道7 </span></span><br><span class="line">Remote.AUX3 =Remote.AUX3 &lt; <span class="number">1000</span>  ? <span class="number">1000</span> : ( Remote.AUX3 &gt; <span class="number">2000</span>? <span class="number">2000</span> : Remote.AUX3 );</span><br><span class="line">Remote.AUX4 =  ((<span class="keyword">uint16_t</span>)RC_rxData[<span class="number">18</span>]&lt;&lt;<span class="number">8</span>) | RC_rxData[<span class="number">19</span>];   <span class="comment">//通道8  右下边按键都属于通道6  </span></span><br><span class="line">Remote.AUX4 =Remote.AUX4 &lt; <span class="number">1000</span>  ? <span class="number">1000</span> : ( Remote.AUX4 &gt; <span class="number">2000</span>? <span class="number">2000</span> : Remote.AUX4 );</span><br><span class="line"></span><br><span class="line">pidPitch.desired =-(Remote.pitch<span class="number">-1500</span>)*roll_pitch_ratio; <span class="comment">//将遥杆值作为飞行角度的期望值</span></span><br><span class="line">pidRoll.desired = -(Remote.roll<span class="number">-1500</span>)*roll_pitch_ratio;</span><br><span class="line"><span class="keyword">if</span>(Remote.yaw&gt;<span class="number">1820</span>)</span><br><span class="line">&#123;</span><br><span class="line">pidYaw.desired += <span class="number">0.75f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Remote.yaw &lt;<span class="number">1180</span>)</span><br><span class="line">&#123;</span><br><span class="line">pidYaw.desired -= <span class="number">0.75f</span>;</span><br><span class="line">&#125;</span><br><span class="line">remote_unlock();</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//如果3秒没收到遥控数据，则判断遥控信号丢失，飞控在任何时候停止飞行，避免伤人。</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;<span class="number">800</span>)</span><br><span class="line">&#123;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">ALL_flag.unlock = <span class="number">0</span>; </span><br><span class="line">NRF24L01_init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************************</span></span><br><span class="line"><span class="comment"> *  解锁判断</span></span><br><span class="line"><span class="comment"> ******************************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remote_unlock</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">uint8_t</span> status=WAITING_1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint16_t</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(Remote.thr&lt;<span class="number">1200</span> &amp;&amp;Remote.yaw&lt;<span class="number">1200</span>)                         <span class="comment">//油门遥杆左下角锁定</span></span><br><span class="line">&#123;</span><br><span class="line">status = EXIT_255;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WAITING_1:<span class="comment">//等待解锁</span></span><br><span class="line"><span class="keyword">if</span>(Remote.thr&lt;<span class="number">1150</span>)           <span class="comment">//解锁三步，油门最低-&gt;油门最高-&gt;油门最低 看到LED灯不闪了 即完成解锁</span></span><br><span class="line">&#123; </span><br><span class="line">status = WAITING_2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WAITING_2:</span><br><span class="line"><span class="keyword">if</span>(Remote.thr&gt;<span class="number">1800</span>)          </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> cnt = <span class="number">0</span>;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;<span class="number">5</span>) <span class="comment">//最高油门需保持200ms以上，防止遥控开机初始化未完成的错误数据</span></span><br><span class="line">&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">status = WAITING_3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WAITING_3:</span><br><span class="line"><span class="keyword">if</span>(Remote.thr&lt;<span class="number">1150</span>)          </span><br><span class="line">&#123; </span><br><span class="line">status = WAITING_4; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WAITING_4:<span class="comment">//解锁前准备               </span></span><br><span class="line">ALL_flag.unlock = <span class="number">1</span>;</span><br><span class="line">status = PROCESS_31;</span><br><span class="line">LED.status = AlwaysOn;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PROCESS_31:<span class="comment">//进入解锁状态</span></span><br><span class="line"><span class="keyword">if</span>(Remote.thr&lt;<span class="number">1020</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt++ &gt; <span class="number">2000</span>)                                     <span class="comment">// 油门遥杆处于最低6S自动上锁</span></span><br><span class="line">&#123;</span><br><span class="line">status = EXIT_255;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!ALL_flag.unlock)                           <span class="comment">//Other conditions lock </span></span><br><span class="line">&#123;</span><br><span class="line">status = EXIT_255;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EXIT_255: <span class="comment">//进入锁定</span></span><br><span class="line">LED.status = AllFlashLight;                                 <span class="comment">//exit</span></span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">LED.FlashTime = <span class="number">300</span>; <span class="comment">//100*3ms</span></span><br><span class="line">ALL_flag.unlock = <span class="number">0</span>;</span><br><span class="line">status = WAITING_1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">status = EXIT_255;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Control.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DATA.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ALL_DEFINE.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;control.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pid.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> NULL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DISABLE </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISABLE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ENABLE </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENABLE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> REST</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REST 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> SET </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SET 1 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> EMERGENT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMERGENT 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTOR1 motor[0] </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTOR2 motor[1] </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTOR3 motor[2] </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTOR4 motor[3] </span></span><br><span class="line"></span><br><span class="line">PidObject *(pPidObject[])=&#123;&amp;pidRateX,&amp;pidRateY,&amp;pidRateZ,&amp;pidRoll,&amp;pidPitch,&amp;pidYaw   <span class="comment">//结构体数组，将每一个数组放一个pid结构体，这样就可以批量操作各个PID的数据了  比如解锁时批量复位pid控制数据，新手明白这句话的作用就可以了</span></span><br><span class="line">,&amp;pidHeightRate</span><br><span class="line">,&amp;pidHeightHigh</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FlightPidControl</span><span class="params">(<span class="keyword">float</span> dt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">uint8_t</span> status=WAITING_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WAITING_1: <span class="comment">//等待解锁</span></span><br><span class="line"><span class="keyword">if</span>(ALL_flag.unlock)</span><br><span class="line">&#123;</span><br><span class="line">status = READY_11;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> READY_11:  <span class="comment">//准备进入控制</span></span><br><span class="line">pidRest(pPidObject,<span class="number">8</span>); <span class="comment">//批量复位PID数据，防止上次遗留的数据影响本次控制</span></span><br><span class="line"></span><br><span class="line">Angle.yaw = pidYaw.desired =  pidYaw.measured = <span class="number">0</span>;   <span class="comment">//锁定偏航角</span></span><br><span class="line"></span><br><span class="line">status = PROCESS_31;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PROCESS_31: <span class="comment">//正式进入控制</span></span><br><span class="line"></span><br><span class="line">      pidRateX.measured = MPU6050.gyroX * Gyro_G; <span class="comment">//内环测量值 角度/秒</span></span><br><span class="line">pidRateY.measured = MPU6050.gyroY * Gyro_G;</span><br><span class="line">pidRateZ.measured = MPU6050.gyroZ * Gyro_G;</span><br><span class="line"></span><br><span class="line">pidPitch.measured = Angle.pitch; <span class="comment">//外环测量值 单位：角度</span></span><br><span class="line">  pidRoll.measured = Angle.roll;</span><br><span class="line">pidYaw.measured = Angle.yaw;</span><br><span class="line"></span><br><span class="line"> pidUpdate(&amp;pidRoll,dt);    <span class="comment">//调用PID处理函数来处理外环横滚角PID</span></span><br><span class="line">pidRateX.desired = pidRoll.out; <span class="comment">//将外环的PID输出作为内环PID的期望值即为串级PID</span></span><br><span class="line">pidUpdate(&amp;pidRateX,dt);  <span class="comment">//再调用内环</span></span><br><span class="line"></span><br><span class="line"> pidUpdate(&amp;pidPitch,dt);    <span class="comment">//调用PID处理函数来处理外环俯仰角PID</span></span><br><span class="line">pidRateY.desired = pidPitch.out;  </span><br><span class="line">pidUpdate(&amp;pidRateY,dt); <span class="comment">//再调用内环</span></span><br><span class="line"></span><br><span class="line">CascadePID(&amp;pidRateZ,&amp;pidYaw,dt);<span class="comment">//也可以直接调用串级PID函数来处理</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EXIT_255:  <span class="comment">//退出控制</span></span><br><span class="line">pidRest(pPidObject,<span class="number">8</span>);</span><br><span class="line">status = WAITING_1;<span class="comment">//返回等待解锁</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">status = EXIT_255;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ALL_flag.unlock == EMERGENT) <span class="comment">//意外情况，请使用遥控紧急上锁，飞控就可以在任何情况下紧急中止飞行，锁定飞行器，退出PID控制</span></span><br><span class="line">status = EXIT_255;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int16_t</span> motor[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorControl</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">uint8_t</span> status=WAITING_1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ALL_flag.unlock == EMERGENT) <span class="comment">//意外情况，请使用遥控紧急上锁，飞控就可以在任何情况下紧急中止飞行，锁定飞行器，退出PID控制</span></span><br><span class="line">status = EXIT_255;</span><br><span class="line"><span class="keyword">switch</span>(status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WAITING_1: <span class="comment">//等待解锁</span></span><br><span class="line">MOTOR1 = MOTOR2 = MOTOR3 = MOTOR4 = <span class="number">0</span>;  <span class="comment">//如果锁定，则电机输出都为0</span></span><br><span class="line"><span class="keyword">if</span>(ALL_flag.unlock)</span><br><span class="line">&#123;</span><br><span class="line">status = WAITING_2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WAITING_2: <span class="comment">//解锁完成后判断使用者是否开始拨动遥杆进行飞行控制</span></span><br><span class="line"><span class="keyword">if</span>(Remote.thr&gt;<span class="number">1100</span>)</span><br><span class="line">&#123;</span><br><span class="line">status = PROCESS_31;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PROCESS_31:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int16_t</span> temp;</span><br><span class="line">temp = Remote.thr <span class="number">-1000</span> + pidHeightRate.out; <span class="comment">//油门+定高输出值</span></span><br><span class="line"><span class="keyword">if</span>(Remote.thr&lt;<span class="number">1020</span>)<span class="comment">//油门太低了，则限制输出  不然飞机乱转</span></span><br><span class="line">&#123;</span><br><span class="line">MOTOR1 = MOTOR2 = MOTOR3 = MOTOR4=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">MOTOR1 = MOTOR2 = MOTOR3 = MOTOR4 = LIMIT(temp,<span class="number">0</span>,<span class="number">900</span>); <span class="comment">//留100给姿态控制</span></span><br><span class="line"></span><br><span class="line">MOTOR1 +=    + pidRateX.out - pidRateY.out - pidRateZ.out;<span class="comment">//; 姿态输出分配给各个电机的控制量</span></span><br><span class="line">MOTOR2 +=    + pidRateX.out + pidRateY.out + pidRateZ.out ;<span class="comment">//;</span></span><br><span class="line">MOTOR3 +=    - pidRateX.out + pidRateY.out - pidRateZ.out;</span><br><span class="line">MOTOR4 +=    - pidRateX.out - pidRateY.out + pidRateZ.out;<span class="comment">//;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EXIT_255:</span><br><span class="line">MOTOR1 = MOTOR2 = MOTOR3 = MOTOR4 = <span class="number">0</span>;  <span class="comment">//如果锁定，则电机输出都为0</span></span><br><span class="line">status = WAITING_1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">TIM2-&gt;CCR1 = LIMIT(MOTOR1,<span class="number">0</span>,<span class="number">1000</span>);  <span class="comment">//更新PWM</span></span><br><span class="line">TIM2-&gt;CCR2 = LIMIT(MOTOR2,<span class="number">0</span>,<span class="number">1000</span>);</span><br><span class="line">TIM2-&gt;CCR3 = LIMIT(MOTOR3,<span class="number">0</span>,<span class="number">1000</span>);</span><br><span class="line">TIM2-&gt;CCR4 = LIMIT(MOTOR4,<span class="number">0</span>,<span class="number">1000</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>kalman.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kalman.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">/*********************************************************************************************************************</span></span><br><span class="line"><span class="comment">**卡尔曼滤波</span></span><br><span class="line"><span class="comment">**@brief: 线性最优评估滤波</span></span><br><span class="line"><span class="comment">**@param[in]  InputData 滤波前的数据，QR误差</span></span><br><span class="line"><span class="comment">**@param[out] None</span></span><br><span class="line"><span class="comment">**@return 滤波后的数据</span></span><br><span class="line"><span class="comment">**@remark: 通过修改过程噪声和测量噪声R,Q值优化输出值</span></span><br><span class="line"><span class="comment">X(k)=A X(k-1)+B U(k)+W(k)  </span></span><br><span class="line"><span class="comment">Z(k)=H X(k)+V(k)</span></span><br><span class="line"><span class="comment">AB是系统参数</span></span><br><span class="line"><span class="comment">XK时刻的系统状态</span></span><br><span class="line"><span class="comment">H：测量系统的参数</span></span><br><span class="line"><span class="comment">Z：K时刻的测量值</span></span><br><span class="line"><span class="comment">WV：过程和测量噪声</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">X(k|k-1)=X(k-1|k-1) 预测下一状态的系统</span></span><br><span class="line"><span class="comment">P(k|k-1)=P(k-1|k-1) +Q  </span></span><br><span class="line"><span class="comment">Kg(k)= P(k|k-1) / (P(k|k-1) + R)   计算Kg卡尔曼增益</span></span><br><span class="line"><span class="comment">X(k|k)= X(k|k-1)+Kg(k) (Z(k)-X(k|k-1))   根据预测值结合估算值得出当前状态值</span></span><br><span class="line"><span class="comment">P(k|k)=(1-Kg(k))P(k|k-1)  更新协方差</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(k-1|k-1)上一个状态的最优评估</span></span><br><span class="line"><span class="comment">(k|k-1) 由上一个状态的最优评估预测当前状态的最优评估</span></span><br><span class="line"><span class="comment">(k|k)  由预测本状态的评估具体实现最优评估</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Q:系统过程的协方差</span></span><br><span class="line"><span class="comment">R：测量的协方差</span></span><br><span class="line"><span class="comment">高斯白 = Q+R</span></span><br><span class="line"><span class="comment">Kg：卡尔曼增益</span></span><br><span class="line"><span class="comment">P：协方差</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注:本卡尔曼滤波器争对单模型，单测量H,I均为1，没有控制量U=0，通常对A,B初始值取1</span></span><br><span class="line"><span class="comment">注：X会逐渐收敛，X(0|0)初始测量值状态根据，测量前的数值而定。</span></span><br><span class="line"><span class="comment">注 :   P (0|0)一般不取0，取0意味在0时候的方差为0，系统认为0时刻的值是最优的。然而在实际系统中往往0时刻不是最优的</span></span><br><span class="line"><span class="comment"> **********************************************************************************************************************/</span></span><br><span class="line"> <span class="comment">//const float Q = 0.018;//0.01; </span></span><br><span class="line"><span class="comment">//const float R = 0.543;//0.9;</span></span><br><span class="line"><span class="comment">//float kalman_1(float InputData,float Q,float R)  //一维卡尔曼</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//struct Kalman&#123;</span></span><br><span class="line"><span class="comment">//float K_1_K_1;//(k-1|k-1)</span></span><br><span class="line"><span class="comment">//float K_K_1;  //(k|k-1)</span></span><br><span class="line"><span class="comment">//float K_K;    //(k|k)</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//static struct Kalman P=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">//static struct Kalman X=&#123;0&#125;;</span></span><br><span class="line"><span class="comment">//float Kg;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//X.K_K_1 = X.K_1_K_1;</span></span><br><span class="line"><span class="comment">//P.K_K_1 = P.K_1_K_1 + Q;</span></span><br><span class="line"><span class="comment">//Kg = P.K_K_1 / (P.K_K_1 + R);</span></span><br><span class="line"><span class="comment">//X.K_K = X.K_K_1 + Kg * (InputData - X.K_K_1);</span></span><br><span class="line"><span class="comment">//P.K_K = (1-Kg) * P.K_K_1 ;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//X.K_1_K_1 = X.K_K;</span></span><br><span class="line"><span class="comment">//P.K_1_K_1 = P.K_K;</span></span><br><span class="line"><span class="comment">//return X.K_K;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kalman_1</span><span class="params">(struct _1_ekf_filter *ekf,<span class="keyword">float</span> input)</span>  <span class="comment">//一维卡尔曼</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ekf-&gt;Now_P = ekf-&gt;LastP + ekf-&gt;Q;</span><br><span class="line">ekf-&gt;Kg = ekf-&gt;Now_P / (ekf-&gt;Now_P + ekf-&gt;R);</span><br><span class="line">ekf-&gt;out = ekf-&gt;out + ekf-&gt;Kg * (input - ekf-&gt;out);</span><br><span class="line">ekf-&gt;LastP = (<span class="number">1</span>-ekf-&gt;Kg) * ekf-&gt;Now_P ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************</span></span><br><span class="line"><span class="comment">*多维卡尔曼是一维卡尔曼的多维噪声扩展。</span></span><br><span class="line"><span class="comment">*利用角速度估计角度的预测值，同时角度更新角速度的偏置补偿值。</span></span><br><span class="line"><span class="comment">*http://wapwenku.baidu.com/view/0ac55e8cf01dc281e53af0ff?pn=5&amp;pu=</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">kalman_2_Update</span><span class="params">(<span class="keyword">float</span> InputAngle,<span class="keyword">float</span> InputGyro,<span class="keyword">float</span> dt)</span>  <span class="comment">//二维卡尔曼</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Kalman</span>&#123;</span></span><br><span class="line"><span class="keyword">float</span> k_1_k_1;<span class="comment">//(k-1|k-1)</span></span><br><span class="line"><span class="keyword">float</span> k_k_1;  <span class="comment">//(k|k-1)</span></span><br><span class="line"><span class="keyword">float</span> k_k;    <span class="comment">//(k|k)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">Kalman</span> <span class="title">X</span>=</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> R_angle=<span class="number">0.5</span>; <span class="comment">//角度计算的过程噪声</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> h_0=<span class="number">1</span>; <span class="comment">//二维卡尔曼矩阵系数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> Q_angle=<span class="number">0.001</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> Q_gyro=<span class="number">0.001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> P[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">float</span> k_0,k_1;</span><br><span class="line"><span class="keyword">float</span> t0,t1;</span><br><span class="line"><span class="keyword">float</span> PHt_0;</span><br><span class="line"><span class="keyword">float</span> PHt_1;</span><br><span class="line"><span class="keyword">float</span> Pdot[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">float</span> E;</span><br><span class="line"><span class="comment">//矩阵</span></span><br><span class="line"><span class="comment">//A=[1,dt]</span></span><br><span class="line"><span class="comment">//[0,1 ];</span></span><br><span class="line"><span class="comment">//B=[dt,0];</span></span><br><span class="line"><span class="comment">//H=[1,0];</span></span><br><span class="line"><span class="comment">//P=[a,b]</span></span><br><span class="line"><span class="comment">//[c,d];</span></span><br><span class="line"><span class="comment">//事实上X输入的也是二维矩阵X[InputAngle,InputGyro]，而初始值即为X.k_1_k_1和Q_bias，可以取0</span></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"><span class="comment">//X(k|k-1)=A X(k-1|k-1)+B U(k) </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> Q_bias; <span class="comment">//角速度偏置补偿值</span></span><br><span class="line">X.k_k_1 = X.k_1_k_1 + (InputGyro - Q_bias) * dt; <span class="comment">//用角速度积分预测角度新值</span></span><br><span class="line"><span class="comment">//---------------------------------</span></span><br><span class="line"><span class="comment">// P(k|k-1)=A P(k-1|k-1) A&#x27;</span></span><br><span class="line"></span><br><span class="line">Pdot[<span class="number">0</span>]=Q_angle - P[<span class="number">0</span>][<span class="number">1</span>] - P[<span class="number">1</span>][<span class="number">0</span>]; </span><br><span class="line"></span><br><span class="line">Pdot[<span class="number">1</span>]= - P[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">Pdot[<span class="number">2</span>]= - P[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">Pdot[<span class="number">3</span>]= Q_gyro;</span><br><span class="line"></span><br><span class="line">P[<span class="number">0</span>][<span class="number">0</span>] += Pdot[<span class="number">0</span>] * dt;</span><br><span class="line"></span><br><span class="line">P[<span class="number">0</span>][<span class="number">1</span>] += Pdot[<span class="number">1</span>] * dt;</span><br><span class="line"></span><br><span class="line">P[<span class="number">1</span>][<span class="number">0</span>] += Pdot[<span class="number">2</span>] * dt;</span><br><span class="line"></span><br><span class="line">P[<span class="number">1</span>][<span class="number">1</span>] += Pdot[<span class="number">3</span>] * dt;</span><br><span class="line"><span class="comment">//以上各式由矩阵运算得来</span></span><br><span class="line"><span class="comment">//---------------------------------</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Update covariance matrix:</span></span><br><span class="line"><span class="comment">* (equation 21-3)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* P = P - K H P</span></span><br><span class="line"><span class="comment">* Let</span></span><br><span class="line"><span class="comment">* Y = H P</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//Kg(k)= P(k|k-1) H&#x27;/ (H P(k|k-1) H&#x27; + R) </span></span><br><span class="line">PHt_0 = h_0 * P[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">PHt_1 = h_0 * P[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">E = R_angle + h_0 * PHt_0;</span><br><span class="line"></span><br><span class="line">k_0 = PHt_0 / E;</span><br><span class="line"></span><br><span class="line">k_1 = PHt_1 / E;</span><br><span class="line"><span class="comment">//---------------------------------</span></span><br><span class="line"><span class="comment">//P(k|k)=(I-Kg(k) H)P(k|k-1)</span></span><br><span class="line"></span><br><span class="line">t0 = PHt_0;</span><br><span class="line"></span><br><span class="line">t1 = h_0 * P[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">P[<span class="number">0</span>][<span class="number">0</span>] -= k_0 * t0;</span><br><span class="line"></span><br><span class="line">P[<span class="number">0</span>][<span class="number">1</span>] -= k_0 * t1;</span><br><span class="line"></span><br><span class="line">P[<span class="number">1</span>][<span class="number">0</span>] -= k_1 * t0;</span><br><span class="line"></span><br><span class="line">P[<span class="number">1</span>][<span class="number">1</span>] -= k_1 * t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Update our state estimate: *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* Xnew = X + K * error</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* X(k|k)= X(k|k-1)+Kg(k) (Z(k)-X(k|k-1)) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">X.k_k = X.k_k_1 + k_0 * (InputAngle - X.k_k_1);</span><br><span class="line"></span><br><span class="line">Q_bias = Q_bias + k_1 * (InputAngle - X.k_k_1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X.k_1_k_1 = X.k_k; <span class="comment">//为下一次计算做准备</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> X.k_k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对比一维二维的性质，可以扩展N维卡尔曼</span></span><br><span class="line"><span class="comment">/*********************************************END OF FILE ***********************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*******************************二维卡尔曼范例************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">//http://blog.csdn.net/xiahouzuoxin/article/details/39582483</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">float</span> x;</span><br><span class="line"><span class="keyword">float</span> p;</span><br><span class="line"><span class="keyword">float</span> A;</span><br><span class="line"><span class="keyword">float</span> H;</span><br><span class="line"><span class="keyword">float</span> q;</span><br><span class="line"><span class="keyword">float</span> r;</span><br><span class="line"><span class="keyword">float</span> gain;</span><br><span class="line">&#125;kalman1_state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">float</span> x[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">float</span> p[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">float</span> A[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">float</span> H[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">float</span> q[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">float</span> r;</span><br><span class="line"><span class="keyword">float</span> gain[<span class="number">2</span>];</span><br><span class="line">&#125;kalman2_state;</span><br><span class="line"><span class="comment">/*********************************************************************************************************</span></span><br><span class="line"><span class="comment"> * @brief   </span></span><br><span class="line"><span class="comment"> *   Init fields of structure @kalman1_state.</span></span><br><span class="line"><span class="comment"> *   I make some defaults in this init function:</span></span><br><span class="line"><span class="comment"> *     A = 1;</span></span><br><span class="line"><span class="comment"> *     H = 1; </span></span><br><span class="line"><span class="comment"> *   and @q,@r are valued after prior tests.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   NOTES: Please change A,H,q,r according to your application.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @inputs  </span></span><br><span class="line"><span class="comment"> *   state - Klaman filter structure</span></span><br><span class="line"><span class="comment"> *   init_x - initial x state value   </span></span><br><span class="line"><span class="comment"> *   init_p - initial estimated error convariance</span></span><br><span class="line"><span class="comment"> * @outputs </span></span><br><span class="line"><span class="comment"> * @retval  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kalman1_init</span><span class="params">(kalman1_state *state, <span class="keyword">float</span> init_x, <span class="keyword">float</span> init_p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    state-&gt;x = init_x;</span><br><span class="line">    state-&gt;p = init_p;</span><br><span class="line">    state-&gt;A = <span class="number">1</span>;</span><br><span class="line">    state-&gt;H = <span class="number">1</span>;</span><br><span class="line">    state-&gt;q = <span class="number">2e2</span>;<span class="comment">//10e-6;  /* predict noise convariance */</span></span><br><span class="line">    state-&gt;r = <span class="number">5e2</span>;<span class="comment">//10e-5;  /* measure error convariance */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*********************************************************************************************************</span></span><br><span class="line"><span class="comment"> * @brief   </span></span><br><span class="line"><span class="comment"> *   1 Dimension Kalman filter</span></span><br><span class="line"><span class="comment"> * @inputs  </span></span><br><span class="line"><span class="comment"> *   state - Klaman filter structure</span></span><br><span class="line"><span class="comment"> *   z_measure - Measure value</span></span><br><span class="line"><span class="comment"> * @outputs </span></span><br><span class="line"><span class="comment"> * @retval  </span></span><br><span class="line"><span class="comment"> *   Estimated result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">kalman1_filter</span><span class="params">(kalman1_state *state, <span class="keyword">float</span> z_measure)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Predict */</span></span><br><span class="line">    state-&gt;x = state-&gt;A * state-&gt;x;</span><br><span class="line">    state-&gt;p = state-&gt;A * state-&gt;A * state-&gt;p + state-&gt;q;  <span class="comment">/* p(n|n-1)=A^2*p(n-1|n-1)+q */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Measurement */</span></span><br><span class="line">    state-&gt;gain = state-&gt;p * state-&gt;H / (state-&gt;p * state-&gt;H * state-&gt;H + state-&gt;r);</span><br><span class="line">    state-&gt;x = state-&gt;x + state-&gt;gain * (z_measure - state-&gt;H * state-&gt;x);</span><br><span class="line">    state-&gt;p = (<span class="number">1</span> - state-&gt;gain * state-&gt;H) * state-&gt;p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> state-&gt;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************************************************************************</span></span><br><span class="line"><span class="comment"> * @brief   </span></span><br><span class="line"><span class="comment"> *   Init fields of structure @kalman1_state.</span></span><br><span class="line"><span class="comment"> *   I make some defaults in this init function:</span></span><br><span class="line"><span class="comment"> *     A = &#123;&#123;1, 0.1&#125;, &#123;0, 1&#125;&#125;;</span></span><br><span class="line"><span class="comment"> *     H = &#123;1,0&#125;; </span></span><br><span class="line"><span class="comment"> *   and @q,@r are valued after prior tests. </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   NOTES: Please change A,H,q,r according to your application.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @inputs  </span></span><br><span class="line"><span class="comment"> * @outputs </span></span><br><span class="line"><span class="comment"> * @retval  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kalman2_init</span><span class="params">(kalman2_state *state, <span class="keyword">float</span> *init_x, <span class="keyword">float</span> (*init_p)[<span class="number">2</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    state-&gt;x[<span class="number">0</span>]    = init_x[<span class="number">0</span>];</span><br><span class="line">    state-&gt;x[<span class="number">1</span>]    = init_x[<span class="number">1</span>];</span><br><span class="line">    state-&gt;p[<span class="number">0</span>][<span class="number">0</span>] = init_p[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    state-&gt;p[<span class="number">0</span>][<span class="number">1</span>] = init_p[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    state-&gt;p[<span class="number">1</span>][<span class="number">0</span>] = init_p[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    state-&gt;p[<span class="number">1</span>][<span class="number">1</span>] = init_p[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//state-&gt;A       = &#123;&#123;1, 0.1&#125;, &#123;0, 1&#125;&#125;;</span></span><br><span class="line">    state-&gt;A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    state-&gt;A[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0.1</span>;</span><br><span class="line">    state-&gt;A[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    state-&gt;A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//state-&gt;H       = &#123;1,0&#125;;</span></span><br><span class="line">    state-&gt;H[<span class="number">0</span>]    = <span class="number">1</span>;</span><br><span class="line">    state-&gt;H[<span class="number">1</span>]    = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//state-&gt;q       = &#123;&#123;10e-6,0&#125;, &#123;0,10e-6&#125;&#125;;  /* measure noise convariance */</span></span><br><span class="line">    state-&gt;q[<span class="number">0</span>]    = <span class="number">10e-7</span>;</span><br><span class="line">    state-&gt;q[<span class="number">1</span>]    = <span class="number">10e-7</span>;</span><br><span class="line">    state-&gt;r       = <span class="number">10e-7</span>;  <span class="comment">/* estimated error convariance */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************************************************************************</span></span><br><span class="line"><span class="comment"> * @brief   </span></span><br><span class="line"><span class="comment"> *   2 Dimension kalman filter</span></span><br><span class="line"><span class="comment"> * @inputs  </span></span><br><span class="line"><span class="comment"> *   state - Klaman filter structure</span></span><br><span class="line"><span class="comment"> *   z_measure - Measure value</span></span><br><span class="line"><span class="comment"> * @outputs </span></span><br><span class="line"><span class="comment"> *   state-&gt;x[0] - Updated state value, Such as angle,velocity</span></span><br><span class="line"><span class="comment"> *   state-&gt;x[1] - Updated state value, Such as diffrence angle, acceleration</span></span><br><span class="line"><span class="comment"> *   state-&gt;p    - Updated estimated error convatiance matrix</span></span><br><span class="line"><span class="comment"> * @retval  </span></span><br><span class="line"><span class="comment"> *   Return value is equals to state-&gt;x[0], so maybe angle or velocity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">kalman2_filter</span><span class="params">(kalman2_state *state, <span class="keyword">float</span> z_measure)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> temp0;</span><br><span class="line">    <span class="keyword">float</span> temp1;</span><br><span class="line">    <span class="keyword">float</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step1: Predict */</span></span><br><span class="line">    state-&gt;x[<span class="number">0</span>] = state-&gt;A[<span class="number">0</span>][<span class="number">0</span>] * state-&gt;x[<span class="number">0</span>] + state-&gt;A[<span class="number">0</span>][<span class="number">1</span>] * state-&gt;x[<span class="number">1</span>];</span><br><span class="line">    state-&gt;x[<span class="number">1</span>] = state-&gt;A[<span class="number">1</span>][<span class="number">0</span>] * state-&gt;x[<span class="number">0</span>] + state-&gt;A[<span class="number">1</span>][<span class="number">1</span>] * state-&gt;x[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">/* p(n|n-1)=A^2*p(n-1|n-1)+q */</span></span><br><span class="line">    state-&gt;p[<span class="number">0</span>][<span class="number">0</span>] = state-&gt;A[<span class="number">0</span>][<span class="number">0</span>] * state-&gt;p[<span class="number">0</span>][<span class="number">0</span>] + state-&gt;A[<span class="number">0</span>][<span class="number">1</span>] * state-&gt;p[<span class="number">1</span>][<span class="number">0</span>] + state-&gt;q[<span class="number">0</span>];</span><br><span class="line">    state-&gt;p[<span class="number">0</span>][<span class="number">1</span>] = state-&gt;A[<span class="number">0</span>][<span class="number">0</span>] * state-&gt;p[<span class="number">0</span>][<span class="number">1</span>] + state-&gt;A[<span class="number">1</span>][<span class="number">1</span>] * state-&gt;p[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    state-&gt;p[<span class="number">1</span>][<span class="number">0</span>] = state-&gt;A[<span class="number">1</span>][<span class="number">0</span>] * state-&gt;p[<span class="number">0</span>][<span class="number">0</span>] + state-&gt;A[<span class="number">0</span>][<span class="number">1</span>] * state-&gt;p[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    state-&gt;p[<span class="number">1</span>][<span class="number">1</span>] = state-&gt;A[<span class="number">1</span>][<span class="number">0</span>] * state-&gt;p[<span class="number">0</span>][<span class="number">1</span>] + state-&gt;A[<span class="number">1</span>][<span class="number">1</span>] * state-&gt;p[<span class="number">1</span>][<span class="number">1</span>] + state-&gt;q[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step2: Measurement */</span></span><br><span class="line">    <span class="comment">/* gain = p * H^T * [r + H * p * H^T]^(-1), H^T means transpose. */</span></span><br><span class="line">    temp0 = state-&gt;p[<span class="number">0</span>][<span class="number">0</span>] * state-&gt;H[<span class="number">0</span>] + state-&gt;p[<span class="number">0</span>][<span class="number">1</span>] * state-&gt;H[<span class="number">1</span>];</span><br><span class="line">    temp1 = state-&gt;p[<span class="number">1</span>][<span class="number">0</span>] * state-&gt;H[<span class="number">0</span>] + state-&gt;p[<span class="number">1</span>][<span class="number">1</span>] * state-&gt;H[<span class="number">1</span>];</span><br><span class="line">    temp  = state-&gt;r + state-&gt;H[<span class="number">0</span>] * temp0 + state-&gt;H[<span class="number">1</span>] * temp1;</span><br><span class="line">    state-&gt;gain[<span class="number">0</span>] = temp0 / temp;</span><br><span class="line">    state-&gt;gain[<span class="number">1</span>] = temp1 / temp;</span><br><span class="line">    <span class="comment">/* x(n|n) = x(n|n-1) + gain(n) * [z_measure - H(n)*x(n|n-1)]*/</span></span><br><span class="line">    temp = state-&gt;H[<span class="number">0</span>] * state-&gt;x[<span class="number">0</span>] + state-&gt;H[<span class="number">1</span>] * state-&gt;x[<span class="number">1</span>];</span><br><span class="line">    state-&gt;x[<span class="number">0</span>] = state-&gt;x[<span class="number">0</span>] + state-&gt;gain[<span class="number">0</span>] * (z_measure - temp); </span><br><span class="line">    state-&gt;x[<span class="number">1</span>] = state-&gt;x[<span class="number">1</span>] + state-&gt;gain[<span class="number">1</span>] * (z_measure - temp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update @p: p(n|n) = [I - gain * H] * p(n|n-1) */</span></span><br><span class="line">    state-&gt;p[<span class="number">0</span>][<span class="number">0</span>] = (<span class="number">1</span> - state-&gt;gain[<span class="number">0</span>] * state-&gt;H[<span class="number">0</span>]) * state-&gt;p[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    state-&gt;p[<span class="number">0</span>][<span class="number">1</span>] = (<span class="number">1</span> - state-&gt;gain[<span class="number">0</span>] * state-&gt;H[<span class="number">1</span>]) * state-&gt;p[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    state-&gt;p[<span class="number">1</span>][<span class="number">0</span>] = (<span class="number">1</span> - state-&gt;gain[<span class="number">1</span>] * state-&gt;H[<span class="number">0</span>]) * state-&gt;p[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    state-&gt;p[<span class="number">1</span>][<span class="number">1</span>] = (<span class="number">1</span> - state-&gt;gain[<span class="number">1</span>] * state-&gt;H[<span class="number">1</span>]) * state-&gt;p[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> state-&gt;x[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*******************************三维卡尔曼范例************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*********************************************************************************************************/</span></span><br><span class="line"><span class="comment">//https://www.embbnux.com/2015/01/30/9_dof_imu_with_kalman_filter_on_avr/</span></span><br><span class="line"><span class="comment">//算法实现</span></span><br><span class="line"><span class="comment">//kalman.c</span></span><br><span class="line"><span class="keyword">float</span> dtTimer   = <span class="number">0.008</span>;</span><br><span class="line"><span class="keyword">float</span> xk[<span class="number">9</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> pk[<span class="number">9</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> I[<span class="number">9</span>]  = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> R[<span class="number">9</span>]  = &#123;<span class="number">0.5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.01</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> Q[<span class="number">9</span>] = &#123;<span class="number">0.005</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.005</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.001</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_add</span><span class="params">(<span class="keyword">float</span>* mata,<span class="keyword">float</span>* matb,<span class="keyword">float</span>* matc)</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">       <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</span><br><span class="line">          matc[i*<span class="number">3</span>+j] = mata[i*<span class="number">3</span>+j] + matb[i*<span class="number">3</span>+j];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_sub</span><span class="params">(<span class="keyword">float</span>* mata,<span class="keyword">float</span>* matb,<span class="keyword">float</span>* matc)</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">       <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</span><br><span class="line">          matc[i*<span class="number">3</span>+j] = mata[i*<span class="number">3</span>+j] - matb[i*<span class="number">3</span>+j];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_multi</span><span class="params">(<span class="keyword">float</span>* mata,<span class="keyword">float</span>* matb,<span class="keyword">float</span>* matc)</span></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> i,j,m;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)</span><br><span class="line">   &#123;</span><br><span class="line">      matc[i*<span class="number">3</span>+j]=<span class="number">0.0</span>;</span><br><span class="line">      <span class="keyword">for</span> (m=<span class="number">0</span>; m&lt;<span class="number">3</span>; m++)</span><br><span class="line">     &#123;</span><br><span class="line">        matc[i*<span class="number">3</span>+j] += mata[i*<span class="number">3</span>+m] * matb[m*<span class="number">3</span>+j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KalmanFilter</span><span class="params">(<span class="keyword">float</span>* am_angle_mat,<span class="keyword">float</span>* gyro_angle_mat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> i,j;</span><br><span class="line"><span class="keyword">float</span> yk[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">float</span> pk_new[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">float</span> K[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">float</span> KxYk[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">float</span> I_K[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">float</span> S[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">float</span> S_invert[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">float</span> sdet;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//xk = xk + uk</span></span><br><span class="line">matrix_add(xk,gyro_angle_mat,xk);</span><br><span class="line"><span class="comment">//pk = pk + Q</span></span><br><span class="line">matrix_add(pk,Q,pk);</span><br><span class="line"><span class="comment">//yk =  xnew - xk</span></span><br><span class="line">matrix_sub(am_angle_mat,xk,yk);</span><br><span class="line"><span class="comment">//S=Pk + R</span></span><br><span class="line">matrix_add(pk,R,S);</span><br><span class="line"><span class="comment">//S??invert</span></span><br><span class="line">sdet = S[<span class="number">0</span>] * S[<span class="number">4</span>] * S[<span class="number">8</span>]</span><br><span class="line">+ S[<span class="number">1</span>] * S[<span class="number">5</span>] * S[<span class="number">6</span>]</span><br><span class="line">+ S[<span class="number">2</span>] * S[<span class="number">3</span>] * S[<span class="number">7</span>]</span><br><span class="line">- S[<span class="number">2</span>] * S[<span class="number">4</span>] * S[<span class="number">6</span>]</span><br><span class="line">- S[<span class="number">5</span>] * S[<span class="number">7</span>] * S[<span class="number">0</span>]</span><br><span class="line">- S[<span class="number">8</span>] * S[<span class="number">1</span>] * S[<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">S_invert[<span class="number">0</span>] = (S[<span class="number">4</span>] * S[<span class="number">8</span>] - S[<span class="number">5</span>] * S[<span class="number">7</span>])/sdet;</span><br><span class="line">S_invert[<span class="number">1</span>] = (S[<span class="number">2</span>] * S[<span class="number">7</span>] - S[<span class="number">1</span>] * S[<span class="number">8</span>])/sdet;</span><br><span class="line">S_invert[<span class="number">2</span>] = (S[<span class="number">1</span>] * S[<span class="number">7</span>] - S[<span class="number">4</span>] * S[<span class="number">6</span>])/sdet;</span><br><span class="line"> </span><br><span class="line">S_invert[<span class="number">3</span>] = (S[<span class="number">5</span>] * S[<span class="number">6</span>] - S[<span class="number">3</span>] * S[<span class="number">8</span>])/sdet;</span><br><span class="line">S_invert[<span class="number">4</span>] = (S[<span class="number">0</span>] * S[<span class="number">8</span>] - S[<span class="number">2</span>] * S[<span class="number">6</span>])/sdet;</span><br><span class="line">S_invert[<span class="number">5</span>] = (S[<span class="number">2</span>] * S[<span class="number">3</span>] - S[<span class="number">0</span>] * S[<span class="number">5</span>])/sdet;</span><br><span class="line"> </span><br><span class="line">S_invert[<span class="number">6</span>] = (S[<span class="number">3</span>] * S[<span class="number">7</span>] - S[<span class="number">4</span>] * S[<span class="number">6</span>])/sdet;</span><br><span class="line">S_invert[<span class="number">7</span>] = (S[<span class="number">1</span>] * S[<span class="number">6</span>] - S[<span class="number">0</span>] * S[<span class="number">7</span>])/sdet;</span><br><span class="line">S_invert[<span class="number">8</span>] = (S[<span class="number">0</span>] * S[<span class="number">4</span>] - S[<span class="number">1</span>] * S[<span class="number">3</span>])/sdet;</span><br><span class="line"><span class="comment">//K = Pk * S_invert</span></span><br><span class="line">matrix_multi(pk,S_invert,K);</span><br><span class="line"><span class="comment">//KxYk = K * Yk</span></span><br><span class="line">matrix_multi(K,yk,KxYk);</span><br><span class="line"><span class="comment">//xk = xk + K * yk</span></span><br><span class="line">matrix_add(xk,KxYk,xk);</span><br><span class="line"><span class="comment">//pk = (I - K)*(pk)</span></span><br><span class="line">matrix_sub(I,K,I_K);</span><br><span class="line">matrix_multi(I_K,pk,pk_new);</span><br><span class="line"><span class="comment">//update pk</span></span><br><span class="line"><span class="comment">//pk = pk_new;</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">pk[i*<span class="number">3</span>+j] = pk_new[i*<span class="number">3</span>+j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PID.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pid.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myMath.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment"> *批量复位PID函数</span></span><br><span class="line"><span class="comment"> * @param[in] </span></span><br><span class="line"><span class="comment"> * @param[out] </span></span><br><span class="line"><span class="comment"> * @return     </span></span><br><span class="line"><span class="comment"> ***************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pidRest</span><span class="params">(PidObject **pid,<span class="keyword">const</span> <span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">  pid[i]-&gt;integ = <span class="number">0</span>;</span><br><span class="line">    pid[i]-&gt;prevError = <span class="number">0</span>;</span><br><span class="line">    pid[i]-&gt;out = <span class="number">0</span>;</span><br><span class="line">pid[i]-&gt;offset = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment"> * Update the PID parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param[in] pid         A pointer to the pid object.</span></span><br><span class="line"><span class="comment"> * @param[in] measured    The measured value</span></span><br><span class="line"><span class="comment"> * @param[in] updateError Set to TRUE if error should be calculated.</span></span><br><span class="line"><span class="comment"> *                        Set to False if pidSetError() has been used.</span></span><br><span class="line"><span class="comment"> * @return PID algorithm output</span></span><br><span class="line"><span class="comment"> ***************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pidUpdate</span><span class="params">(PidObject* pid,<span class="keyword">const</span> <span class="keyword">float</span> dt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">float</span> error;</span><br><span class="line"> <span class="keyword">float</span> deriv;</span><br><span class="line"></span><br><span class="line">    error = pid-&gt;desired - pid-&gt;measured; <span class="comment">//当前角度与实际角度的误差</span></span><br><span class="line"></span><br><span class="line">    pid-&gt;integ += error * dt; <span class="comment">//误差积分累加值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  pid-&gt;integ = LIMIT(pid-&gt;integ,pid-&gt;IntegLimitLow,pid-&gt;IntegLimitHigh); //进行积分限幅</span></span><br><span class="line"></span><br><span class="line">    deriv = (error - pid-&gt;prevError)/dt;  <span class="comment">//前后两次误差做微分</span></span><br><span class="line"></span><br><span class="line">    pid-&gt;out = pid-&gt;kp * error + pid-&gt;ki * pid-&gt;integ + pid-&gt;kd * deriv;<span class="comment">//PID输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pid-&gt;out = LIMIT(pid-&gt;out,pid-&gt;OutLimitLow,pid-&gt;OutLimitHigh); //输出限幅</span></span><br><span class="line"></span><br><span class="line">    pid-&gt;prevError = error;  <span class="comment">//更新上次的误差</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment"> *  CascadePID</span></span><br><span class="line"><span class="comment"> * @param[in] </span></span><br><span class="line"><span class="comment"> * @param[out] </span></span><br><span class="line"><span class="comment"> * @return     </span></span><br><span class="line"><span class="comment"> ***************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CascadePID</span><span class="params">(PidObject* pidRate,PidObject* pidAngE,<span class="keyword">const</span> <span class="keyword">float</span> dt)</span>  <span class="comment">//串级PID</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">pidUpdate(pidAngE,dt);    <span class="comment">//先计算外环</span></span><br><span class="line">pidRate-&gt;desired = pidAngE-&gt;out;</span><br><span class="line">pidUpdate(pidRate,dt);    <span class="comment">//再计算内环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IMU.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment"> * Update the PID parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param[in] pid         A pointer to the pid object.</span></span><br><span class="line"><span class="comment"> * @param[in] measured    The measured value</span></span><br><span class="line"><span class="comment"> * @param[in] updateError Set to TRUE if error should be calculated.</span></span><br><span class="line"><span class="comment"> *                        Set to False if pidSetError() has been used.</span></span><br><span class="line"><span class="comment"> * @return PID algorithm output</span></span><br><span class="line"><span class="comment"> *******************************************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;imu.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myMath.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> NormAcc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//float ex_int = 0, ey_int = 0, ez_int = 0;   //X、Y、Z轴的比例误差</span></span><br><span class="line"><span class="comment">//float q0 = 1, q1 = 0, q2 = 0, q3 = 0;    //定义四元素</span></span><br><span class="line"><span class="comment">//float his_q0 = 1, his_q1 = 0, his_q2 = 0, his_q3 = 0; </span></span><br><span class="line"><span class="comment">//float q0_yaw = 1, q1_yaw = 0, q2_yaw = 0, q3_yaw = 0;    //弥补Mahony算法在无地磁情况解算Yaw轴满足不了大扰动要求的现象</span></span><br><span class="line"><span class="comment">//float his_q0_yaw = 1, his_q1_yaw = 0, his_q2_yaw = 0, his_q3_yaw = 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void GetAngle(const stMpu *pMpu,void *pAngE, float dt) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//static const float KpDef = 0.85f ;</span></span><br><span class="line"><span class="comment">//static const float KiDef = 0.0035f;</span></span><br><span class="line"><span class="comment">//const float Gyro_Gr = 0.0005326f;     //面计算度每秒,转换弧度每秒则 0.03051756 * 0.0174533f = 0.0005326</span></span><br><span class="line"><span class="comment">//float HalfTime = 0.5 * dt;</span></span><br><span class="line"><span class="comment">//float gx = pMpu-&gt;gyroX*Gyro_Gr;</span></span><br><span class="line"><span class="comment">//float gy = pMpu-&gt;gyroY*Gyro_Gr;</span></span><br><span class="line"><span class="comment">//float gz = pMpu-&gt;gyroZ*Gyro_Gr;</span></span><br><span class="line"><span class="comment">//float ax =  pMpu-&gt;accX;</span></span><br><span class="line"><span class="comment">//floatay =  pMpu-&gt;accY;</span></span><br><span class="line"><span class="comment">//float az =  pMpu-&gt;accZ;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//float vx, vy, vz;</span></span><br><span class="line"><span class="comment">//  float ex, ey, ez;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//static float his_q0q0;</span></span><br><span class="line"><span class="comment">//  static float his_q0q1;</span></span><br><span class="line"><span class="comment">//  static float his_q0q2;</span></span><br><span class="line"><span class="comment">//  static float his_q1q1;</span></span><br><span class="line"><span class="comment">//  static float his_q1q3;</span></span><br><span class="line"><span class="comment">//  static float his_q2q2;</span></span><br><span class="line"><span class="comment">//  static float his_q2q3;</span></span><br><span class="line"><span class="comment">//  static float his_q3q3;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//float q0q0;</span></span><br><span class="line"><span class="comment">//  float q0q1;</span></span><br><span class="line"><span class="comment">//  float q0q2;</span></span><br><span class="line"><span class="comment">//  float q1q1;</span></span><br><span class="line"><span class="comment">//  float q1q3;</span></span><br><span class="line"><span class="comment">//  float q2q2;</span></span><br><span class="line"><span class="comment">//  float q2q3;</span></span><br><span class="line"><span class="comment">//  float q3q3;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//floatq0_yawq0_yaw;</span></span><br><span class="line"><span class="comment">//floatq1_yawq1_yaw;</span></span><br><span class="line"><span class="comment">//floatq2_yawq2_yaw;</span></span><br><span class="line"><span class="comment">//floatq3_yawq3_yaw;</span></span><br><span class="line"><span class="comment">//floatq1_yawq2_yaw;</span></span><br><span class="line"><span class="comment">//floatq0_yawq3_yaw;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////**************************Yaw轴计算******************************</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////Yaw轴四元素的微分方程</span></span><br><span class="line"><span class="comment">//  q0_yaw = his_q0_yaw + (-his_q1_yaw * gx - his_q2_yaw * gy - his_q3_yaw * gz) * HalfTime;</span></span><br><span class="line"><span class="comment">//  q1_yaw = his_q1_yaw + ( his_q0_yaw * gx + his_q2_yaw * gz - his_q3_yaw * gy) * HalfTime;</span></span><br><span class="line"><span class="comment">//  q2_yaw = his_q2_yaw + ( his_q0_yaw * gy - his_q1_yaw * gz + his_q3_yaw * gx) * HalfTime;</span></span><br><span class="line"><span class="comment">//  q3_yaw = his_q3_yaw + ( his_q0_yaw * gz + his_q1_yaw * gy - his_q2_yaw * gx) * HalfTime;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//q0_yawq0_yaw = q0_yaw * q0_yaw;</span></span><br><span class="line"><span class="comment">//q1_yawq1_yaw = q1_yaw * q1_yaw;</span></span><br><span class="line"><span class="comment">//q2_yawq2_yaw = q2_yaw * q2_yaw;</span></span><br><span class="line"><span class="comment">//q3_yawq3_yaw = q3_yaw * q3_yaw;</span></span><br><span class="line"><span class="comment">//q1_yawq2_yaw = q1_yaw * q2_yaw;</span></span><br><span class="line"><span class="comment">//q0_yawq3_yaw = q0_yaw * q3_yaw;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////规范化Yaw轴四元数</span></span><br><span class="line"><span class="comment">//  norm = Q_rsqrt(q0_yawq0_yaw + q1_yawq1_yaw + q2_yawq2_yaw + q3_yawq3_yaw);</span></span><br><span class="line"><span class="comment">//  q0_yaw = q0_yaw * norm;</span></span><br><span class="line"><span class="comment">//  q1_yaw = q1_yaw * norm;</span></span><br><span class="line"><span class="comment">//  q2_yaw = q2_yaw * norm;</span></span><br><span class="line"><span class="comment">//  q3_yaw = q3_yaw * norm;</span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">////if(ax * ay * az== 0)</span></span><br><span class="line"><span class="comment">////return ;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////归一化加速度计值</span></span><br><span class="line"><span class="comment">//  norm = Q_rsqrt(ax * ax + ay * ay + az * az); </span></span><br><span class="line"><span class="comment">//  ax = ax * norm;</span></span><br><span class="line"><span class="comment">//  ay = ay * norm;</span></span><br><span class="line"><span class="comment">//  az = az * norm;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////由姿态阵估计重力方向和流量/变迁</span></span><br><span class="line"><span class="comment">//  vx = 2 * (his_q1q3 - his_q0q2);</span></span><br><span class="line"><span class="comment">//  vy = 2 * (his_q0q1 + his_q2q3);</span></span><br><span class="line"><span class="comment">//  vz = his_q0q0 - his_q1q1 - his_q2q2 + his_q3q3;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  //向量外积再相减得到差分就是误差 两个单位向量的差积即为误差向量</span></span><br><span class="line"><span class="comment">//  ex = (ay * vz - az * vy) ;      </span></span><br><span class="line"><span class="comment">//  ey = (az * vx - ax * vz) ;</span></span><br><span class="line"><span class="comment">//  ez = (ax * vy - ay * vx) ;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////对误差进行PI计算</span></span><br><span class="line"><span class="comment">//  ex_int = ex_int + ex * KiDef;</span></span><br><span class="line"><span class="comment">//  ey_int = ey_int + ey * KiDef;</span></span><br><span class="line"><span class="comment">//  ez_int = ez_int + ez * KiDef;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  //校正陀螺仪</span></span><br><span class="line"><span class="comment">//  gx = gx + KpDef * ex + ex_int;</span></span><br><span class="line"><span class="comment">//  gy = gy + KpDef * ey + ey_int;</span></span><br><span class="line"><span class="comment">//  gz = gz + KpDef * ez + ez_int;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////四元素的微分方程</span></span><br><span class="line"><span class="comment">//  q0 = his_q0 + (-his_q1 * gx - his_q2 * gy - his_q3 *gz)*HalfTime;</span></span><br><span class="line"><span class="comment">//  q1 = his_q1 + ( his_q0 * gx + his_q2 * gz - his_q3 *gy)*HalfTime;</span></span><br><span class="line"><span class="comment">//  q2 = his_q2 + ( his_q0 * gy - his_q1 * gz + his_q3 *gx)*HalfTime;</span></span><br><span class="line"><span class="comment">//  q3 = his_q3 + ( his_q0 * gz + his_q1 * gy - his_q2 *gx)*HalfTime;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//q0q0 = q0 * q0;</span></span><br><span class="line"><span class="comment">//q0q1 = q0 * q1;</span></span><br><span class="line"><span class="comment">//q0q2 = q0 * q2;</span></span><br><span class="line"><span class="comment">//q1q1 = q1 * q1;</span></span><br><span class="line"><span class="comment">//q1q3 = q1 * q3;</span></span><br><span class="line"><span class="comment">//q2q2 = q2* q2;</span></span><br><span class="line"><span class="comment">//q2q3 = q2*q3;</span></span><br><span class="line"><span class="comment">//q3q3 = q3*q3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  //规范化Pitch、Roll轴四元数</span></span><br><span class="line"><span class="comment">//  norm = Q_rsqrt(q0q0 + q1q1 + q2q2 + q3q3);</span></span><br><span class="line"><span class="comment">//  q0 = q0 * norm;</span></span><br><span class="line"><span class="comment">//  q1 = q1 * norm;</span></span><br><span class="line"><span class="comment">//  q2 = q2 * norm;</span></span><br><span class="line"><span class="comment">//  q3 = q3 * norm;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////求解欧拉角</span></span><br><span class="line"><span class="comment">//*((float *)pAngE+2) = atan2f(2 * q2q3 + 2 * q0q1, -2 * q1q1 - 2 * q2q2 + 1) * RtA;  //ROLL</span></span><br><span class="line"><span class="comment">//*((float *)pAngE+1) = asin(2 * q0q2 -2 * q1q3) * 57.3;  //PITCH</span></span><br><span class="line"><span class="comment">//*(float *)pAngE = atan2f(2 * q1_yawq2_yaw + 2 * q0_yawq3_yaw, -2 * q2_yawq2_yaw - 2 * q3_yawq3_yaw + 1)* RtA;  //YAW</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  //存储更替相应的四元数</span></span><br><span class="line"><span class="comment">//his_q0_yaw = q0_yaw;</span></span><br><span class="line"><span class="comment">//  his_q1_yaw = q1_yaw;</span></span><br><span class="line"><span class="comment">//  his_q2_yaw = q2_yaw;</span></span><br><span class="line"><span class="comment">//  his_q3_yaw = q3_yaw;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//his_q0 = q0;</span></span><br><span class="line"><span class="comment">//  his_q1 = q1;</span></span><br><span class="line"><span class="comment">//  his_q2 = q2;</span></span><br><span class="line"><span class="comment">//  his_q3 = q3;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//his_q0q0 = q0q0;</span></span><br><span class="line"><span class="comment">//his_q0q1 = q0q1;</span></span><br><span class="line"><span class="comment">//his_q0q2 = q0q2;</span></span><br><span class="line"><span class="comment">//his_q1q1 = q1q1;</span></span><br><span class="line"><span class="comment">//his_q1q3 = q1q3;</span></span><br><span class="line"><span class="comment">//his_q2q2 = q2q2;</span></span><br><span class="line"><span class="comment">//his_q2q3 = q2q3;</span></span><br><span class="line"><span class="comment">//his_q3q3 = q3q3;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">float</span> q0;</span><br><span class="line">  <span class="keyword">float</span> q1;</span><br><span class="line">  <span class="keyword">float</span> q2;</span><br><span class="line">  <span class="keyword">float</span> q3;</span><br><span class="line">&#125; Quaternion;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetAngle</span><span class="params">(<span class="keyword">const</span> _st_Mpu *pMpu,_st_AngE *pAngE, <span class="keyword">float</span> dt)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">V</span>&#123;</span></span><br><span class="line"><span class="keyword">float</span> x;</span><br><span class="line"><span class="keyword">float</span> y;</span><br><span class="line"><span class="keyword">float</span> z;</span><br><span class="line">&#125; Gravity,Acc,Gyro,AccGravity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">V</span> <span class="title">GyroIntegError</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">float</span> KpDef = <span class="number">0.8f</span>;</span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">float</span> KiDef = <span class="number">0.0003f</span>;</span><br><span class="line"><span class="keyword">static</span> Quaternion NumQ = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> <span class="keyword">q0_t</span>,<span class="keyword">q1_t</span>,<span class="keyword">q2_t</span>,<span class="keyword">q3_t</span>;</span><br><span class="line">  <span class="comment">//float NormAcc;</span></span><br><span class="line"><span class="keyword">float</span> NormQuat; </span><br><span class="line"><span class="keyword">float</span> HalfTime = dt * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取等效旋转矩阵中的重力分量 </span></span><br><span class="line">Gravity.x = <span class="number">2</span>*(NumQ.q1 * NumQ.q3 - NumQ.q0 * NumQ.q2);</span><br><span class="line">Gravity.y = <span class="number">2</span>*(NumQ.q0 * NumQ.q1 + NumQ.q2 * NumQ.q3);  </span><br><span class="line">Gravity.z = <span class="number">1</span><span class="number">-2</span>*(NumQ.q1 * NumQ.q1 + NumQ.q2 * NumQ.q2);</span><br><span class="line"><span class="comment">// 加速度归一化</span></span><br><span class="line"> NormAcc = Q_rsqrt(squa(MPU6050.accX)+ squa(MPU6050.accY) +squa(MPU6050.accZ));</span><br><span class="line"></span><br><span class="line">    Acc.x = pMpu-&gt;accX * NormAcc;</span><br><span class="line">    Acc.y = pMpu-&gt;accY * NormAcc;</span><br><span class="line">    Acc.z = pMpu-&gt;accZ * NormAcc;</span><br><span class="line"> <span class="comment">//向量差乘得出的值</span></span><br><span class="line">AccGravity.x = (Acc.y * Gravity.z - Acc.z * Gravity.y);</span><br><span class="line">AccGravity.y = (Acc.z * Gravity.x - Acc.x * Gravity.z);</span><br><span class="line">AccGravity.z = (Acc.x * Gravity.y - Acc.y * Gravity.x);</span><br><span class="line"><span class="comment">//再做加速度积分补偿角速度的补偿值</span></span><br><span class="line">    GyroIntegError.x += AccGravity.x * KiDef;</span><br><span class="line">    GyroIntegError.y += AccGravity.y * KiDef;</span><br><span class="line">    GyroIntegError.z += AccGravity.z * KiDef;</span><br><span class="line"><span class="comment">//角速度融合加速度积分补偿值</span></span><br><span class="line">    Gyro.x = pMpu-&gt;gyroX * Gyro_Gr + KpDef * AccGravity.x  +  GyroIntegError.x;<span class="comment">//弧度制</span></span><br><span class="line">    Gyro.y = pMpu-&gt;gyroY * Gyro_Gr + KpDef * AccGravity.y  +  GyroIntegError.y;</span><br><span class="line">    Gyro.z = pMpu-&gt;gyroZ * Gyro_Gr + KpDef * AccGravity.z  +  GyroIntegError.z;</span><br><span class="line"><span class="comment">// 一阶龙格库塔法, 更新四元数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">q0_t</span> = (-NumQ.q1*Gyro.x - NumQ.q2*Gyro.y - NumQ.q3*Gyro.z) * HalfTime;</span><br><span class="line"><span class="keyword">q1_t</span> = ( NumQ.q0*Gyro.x - NumQ.q3*Gyro.y + NumQ.q2*Gyro.z) * HalfTime;</span><br><span class="line"><span class="keyword">q2_t</span> = ( NumQ.q3*Gyro.x + NumQ.q0*Gyro.y - NumQ.q1*Gyro.z) * HalfTime;</span><br><span class="line"><span class="keyword">q3_t</span> = (-NumQ.q2*Gyro.x + NumQ.q1*Gyro.y + NumQ.q0*Gyro.z) * HalfTime;</span><br><span class="line"></span><br><span class="line">NumQ.q0 += <span class="keyword">q0_t</span>;</span><br><span class="line">NumQ.q1 += <span class="keyword">q1_t</span>;</span><br><span class="line">NumQ.q2 += <span class="keyword">q2_t</span>;</span><br><span class="line">NumQ.q3 += <span class="keyword">q3_t</span>;</span><br><span class="line"><span class="comment">// 四元数归一化</span></span><br><span class="line">NormQuat = Q_rsqrt(squa(NumQ.q0) + squa(NumQ.q1) + squa(NumQ.q2) + squa(NumQ.q3));</span><br><span class="line">NumQ.q0 *= NormQuat;</span><br><span class="line">NumQ.q1 *= NormQuat;</span><br><span class="line">NumQ.q2 *= NormQuat;</span><br><span class="line">NumQ.q3 *= NormQuat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四元数转欧拉角</span></span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>YAW_GYRO</span></span><br><span class="line">*(<span class="keyword">float</span> *)pAngE = atan2f(<span class="number">2</span> * NumQ.q1 *NumQ.q2 + <span class="number">2</span> * NumQ.q0 * NumQ.q3, <span class="number">1</span> - <span class="number">2</span> * NumQ.q2 *NumQ.q2 - <span class="number">2</span> * NumQ.q3 * NumQ.q3) * RtA;  <span class="comment">//yaw</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">float</span> yaw_G = pMpu-&gt;gyroZ * Gyro_G;</span><br><span class="line"><span class="keyword">if</span>((yaw_G &gt; <span class="number">3.0f</span>) || (yaw_G &lt; <span class="number">-3.0f</span>)) <span class="comment">//数据太小可以认为是干扰，不是偏航动作</span></span><br><span class="line">&#123;</span><br><span class="line">pAngE-&gt;yaw  += yaw_G * dt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">pAngE-&gt;pitch  =  <span class="built_in">asin</span>(<span class="number">2</span> * NumQ.q0 *NumQ.q2 - <span class="number">2</span> * NumQ.q1 * NumQ.q3) * RtA;</span><br><span class="line"></span><br><span class="line">pAngE-&gt;roll= <span class="built_in">atan2</span>(<span class="number">2</span> * NumQ.q2 *NumQ.q3 + <span class="number">2</span> * NumQ.q0 * NumQ.q1, <span class="number">1</span> - <span class="number">2</span> * NumQ.q1 *NumQ.q1 - <span class="number">2</span> * NumQ.q2 * NumQ.q2) * RtA;<span class="comment">//PITCH </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mymath.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myMath.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> M_PI = <span class="number">3.1415926535</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> RtA = <span class="number">57.2957795f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> AtR = <span class="number">0.0174532925f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> Gyro_G = <span class="number">0.03051756f</span>*<span class="number">2</span>;  <span class="comment">//陀螺仪初始化量程+-2000度每秒于1 / (65536 / 4000) = 0.03051756*2</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> Gyro_Gr = <span class="number">0.0005326f</span>*<span class="number">2</span>;     <span class="comment">//面计算度每秒,转换弧度每秒则 2*0.03051756 * 0.0174533f = 0.0005326*2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*====================================================================================================*/</span></span><br><span class="line"><span class="comment">/*====================================================================================================*</span></span><br><span class="line"><span class="comment">**函数 : Q_rsqrt</span></span><br><span class="line"><span class="comment">**功能 : 快速计算 三角函数</span></span><br><span class="line"><span class="comment">**输入 : number  </span></span><br><span class="line"><span class="comment">**输出 : 结果</span></span><br><span class="line"><span class="comment">**备注 : None</span></span><br><span class="line"><span class="comment">**====================================================================================================*/</span></span><br><span class="line"><span class="comment">/*====================================================================================================*/</span></span><br><span class="line"><span class="comment">//逼近法；线性拟合</span></span><br><span class="line"><span class="comment">//Q (4/M_PI x - 4/M_PI^2 x^2) + P (4/M_PI x - 4/M_PI^2 x^2)^2 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TAPYOR</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">sine</span><span class="params">(<span class="keyword">float</span> x)</span>          <span class="comment">// (-M_PI , M_PI) ???? 0.0005</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> Q = <span class="number">0.775</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> P = <span class="number">0.225</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> B =  <span class="number">4</span> / M_PI;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> C = <span class="number">-4</span> /(M_PI*M_PI);</span><br><span class="line"><span class="keyword">float</span> y = B * x + C * x * <span class="built_in">fabs</span>(x); </span><br><span class="line"><span class="keyword">return</span> (Q * y + P * y * <span class="built_in">fabs</span>(y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line"><span class="comment">//4级泰勒公式法 在PI出会出现0.7的最大误差</span></span><br><span class="line"><span class="comment">//sinx= x- x^3/3! + x^5/5! - x^7/7!+ x^9/9! . =?(-1)^n x^(2n+1)/(2n+1)!</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">sine</span><span class="params">(<span class="keyword">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> t=x;</span><br><span class="line"><span class="keyword">float</span> result = x;</span><br><span class="line"><span class="keyword">float</span> X2 = x*x;</span><br><span class="line"><span class="keyword">uint8_t</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">t=-t;</span><br><span class="line">t *= X2;</span><br><span class="line">result += t/((cnt&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;<span class="keyword">while</span>(cnt&lt;<span class="number">5</span>);<span class="comment">//6阶</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//http://wenku.baidu.com/link?url=jUswZ3G2z26IUS72IkeZrizc5V9VdR1sTF8xGCOHPFW0P70bGjjm5zhNxvRT36X31TMoFf6S-9lMoIkK4pPwExAaEZGtRpWggdQAzpg3Fsu</span></span><br><span class="line"><span class="comment">//cos(x)=sin(M_PI/2+x)=sin(M_PI/2-x)</span></span><br><span class="line"><span class="comment">//cos(x-M_PI/2)=sin(x)</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">cosine</span><span class="params">(<span class="keyword">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sine(x+M_PI/<span class="number">2</span>);<span class="comment">//奇变偶不变，符号看象限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反正切麦克劳林展开式 阶数越高，值越准确   70°以内是准确的</span></span><br><span class="line"><span class="comment">//http://www.zybang.com/question/246f9997776f7d5cc636b10aff27a1cb.html</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">arctan</span><span class="params">(<span class="keyword">float</span> x)</span>  <span class="comment">//  (-1 , +1)    6? ?? 0.002958 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> t = x;</span><br><span class="line"><span class="keyword">float</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> X2 = x * x;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">result += t / ((cnt &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line">t = -t;</span><br><span class="line">t *= X2;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;<span class="keyword">while</span>(cnt &lt;= <span class="number">6</span>);<span class="comment">//5??</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反正弦麦克劳林展开式 -1&lt;x&lt;+1     42°以内是准确的</span></span><br><span class="line"><span class="comment">//http://xuxzmail.blog.163.com/blog/static/25131916200971794014536/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> PI_2 = <span class="number">1.570796f</span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">arcsin</span><span class="params">(<span class="keyword">float</span> x)</span>   <span class="comment">//(-1 , +1)  ? 0 ????  6? ??0.005</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> d=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">float</span> t=x;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">float</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> X2 = x*x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">1.0f</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> PI_2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">-1.0f</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> -PI_2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">result += t / (d * ((cnt &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>));</span><br><span class="line">t *= X2 * ((cnt &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">d *= (cnt &lt;&lt; <span class="number">1</span>);<span class="comment">//2 4 6 8 10 ...</span></span><br><span class="line">cnt++;</span><br><span class="line">&#125;<span class="keyword">while</span>(cnt &lt;= <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保证输入值是有效的</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">safe_asin</span><span class="params">(<span class="keyword">float</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isnan(v)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &gt;= <span class="number">1.0f</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> M_PI/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &lt;= <span class="number">-1.0f</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -M_PI/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> asinf(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*====================================================================================================*/</span></span><br><span class="line"><span class="comment">/*====================================================================================================*</span></span><br><span class="line"><span class="comment">**函数 : Q_rsqrt</span></span><br><span class="line"><span class="comment">**功能 : 快速计算 1/Sqrt(x) </span></span><br><span class="line"><span class="comment">**输入 : number  </span></span><br><span class="line"><span class="comment">**输出 : 结果</span></span><br><span class="line"><span class="comment">**备注 : None</span></span><br><span class="line"><span class="comment">**====================================================================================================*/</span></span><br><span class="line"><span class="comment">/*====================================================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Q_rsqrt</span><span class="params">(<span class="keyword">float</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> i;</span><br><span class="line"><span class="keyword">float</span> x2, y;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> threehalfs = <span class="number">1.5F</span>;</span><br><span class="line"> </span><br><span class="line">x2 = number * <span class="number">0.5F</span>;</span><br><span class="line">y  = number;</span><br><span class="line">i  = * ( <span class="keyword">long</span> * ) &amp;y;                      </span><br><span class="line">i  = <span class="number">0x5f3759df</span> - ( i &gt;&gt; <span class="number">1</span> );               </span><br><span class="line">y  = * ( <span class="keyword">float</span> * ) &amp;i;</span><br><span class="line">y  = y * ( threehalfs - ( x2 * y * y ) );   <span class="comment">// 1st iteration （第一次牛顿迭代）</span></span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************实现函数********************************************</span></span><br><span class="line"><span class="comment">*函数原型:    array_astrict_lower(int16_t *array,int16_t value)</span></span><br><span class="line"><span class="comment">*功　　能:    对数组下限限制</span></span><br><span class="line"><span class="comment">输入参数：    *array   目标数组指针</span></span><br><span class="line"><span class="comment">*             value      </span></span><br><span class="line"><span class="comment">输出参数：    无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">array_astrict</span><span class="params">(<span class="keyword">int16_t</span> *<span class="built_in">array</span>,<span class="keyword">int16_t</span> lower,<span class="keyword">int16_t</span> upper)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int16_t</span> length = <span class="keyword">sizeof</span>(<span class="built_in">array</span>); </span><br><span class="line"> <span class="keyword">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span>(*(<span class="built_in">array</span>+i)&lt;lower)  *(<span class="built_in">array</span>+i) = lower;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(*(<span class="built_in">array</span>+i)&gt;upper)  *(<span class="built_in">array</span>+i) = upper;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************实现函数********************************************</span></span><br><span class="line"><span class="comment">*函数原型:    array_assign(int16_t *array,int16_t value)</span></span><br><span class="line"><span class="comment">*功　　能:    对数组赋值</span></span><br><span class="line"><span class="comment">输入参数：    *array   目标数组指针 </span></span><br><span class="line"><span class="comment">*             value      </span></span><br><span class="line"><span class="comment">输出参数：    无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">array_assign</span><span class="params">(<span class="keyword">int16_t</span> *<span class="built_in">array</span>,<span class="keyword">int16_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">uint16_t</span> length = <span class="keyword">sizeof</span>(<span class="built_in">array</span>); </span><br><span class="line"> <span class="keyword">uint16_t</span> i=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">   &#123;</span><br><span class="line">     *(<span class="built_in">array</span>+i) = value;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************实现函数********************************************</span></span><br><span class="line"><span class="comment">*函数原型:    data_limit(float data,flaot toplimit,float lowerlimit)</span></span><br><span class="line"><span class="comment">*功　　能:    数据限幅</span></span><br><span class="line"><span class="comment">输入参数：    data       要操作的数据 </span></span><br><span class="line"><span class="comment">*             toplimit   上限</span></span><br><span class="line"><span class="comment">*             lowerlimit 下限</span></span><br><span class="line"><span class="comment">输出参数：    无</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">data_limit</span><span class="params">(<span class="keyword">float</span> data,<span class="keyword">float</span> toplimit,<span class="keyword">float</span> lowerlimit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(data &gt; toplimit)  data = toplimit;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; lowerlimit) data = lowerlimit;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment">  * @brief  可变增益自适应参数</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">VariableParameter</span><span class="params">(<span class="keyword">float</span> error)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span>  result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(error &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">   error = -error;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">if</span>(error &gt;<span class="number">0.6f</span>)</span><br><span class="line">&#123;</span><br><span class="line">   error = <span class="number">0.6f</span>;</span><br><span class="line">&#125;</span><br><span class="line">result = <span class="number">1</span> - <span class="number">1.667f</span> * error;</span><br><span class="line"><span class="keyword">if</span>(result &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">   result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">middle_3</span><span class="params">(<span class="keyword">float</span> input)</span> <span class="comment">//3个数取中间的数</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> a,b,c,t; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(a&lt;b)</span><br><span class="line"></span><br><span class="line">  &#123; </span><br><span class="line"></span><br><span class="line">     t=a;a=b;b=t; </span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(b&lt;c)<span class="comment">//9 8 7 </span></span><br><span class="line"></span><br><span class="line"> &#123; </span><br><span class="line"></span><br><span class="line">  t=b;b=c;c=t;      </span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(a&lt;b)<span class="comment">//9 8 7 </span></span><br><span class="line"></span><br><span class="line"> &#123; </span><br><span class="line"></span><br><span class="line">  t=a;a=b;b=t; </span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> b; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">my_deathzoom_2</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> zoom)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( x&gt; -zoom &amp;&amp; x &lt; zoom )</span><br><span class="line">&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">t = x;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> (t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">my_deathzoom</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> zoom)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> t;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">t = x - zoom;</span><br><span class="line"><span class="keyword">if</span>(t&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">t = x + zoom;</span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> (t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="遥控器部分"><a class="markdownIt-Anchor" href="#遥控器部分"></a> 遥控器部分</h2><h3 id="硬件设计-2"><a class="markdownIt-Anchor" href="#硬件设计-2"></a> 硬件设计</h3><h4 id="电源设计-2"><a class="markdownIt-Anchor" href="#电源设计-2"></a> 电源设计</h4><p><a href="https://imgtu.com/i/681Yi8"><img src="https://s3.ax1x.com/2021/03/09/681Yi8.jpg" alt="681Yi8.jpg" /></a></p><h4 id="stm32主控设计"><a class="markdownIt-Anchor" href="#stm32主控设计"></a> STM32主控设计</h4><p><a href="https://imgtu.com/i/6815e1"><img src="https://s3.ax1x.com/2021/03/09/6815e1.jpg" alt="6815e1.jpg" /></a></p><h4 id="摇杆电路设计"><a class="markdownIt-Anchor" href="#摇杆电路设计"></a> 摇杆电路设计</h4><h4 id="681lsejpg"><a class="markdownIt-Anchor" href="#681lsejpg"></a> <a href="https://imgtu.com/i/681LSe"><img src="https://s3.ax1x.com/2021/03/09/681LSe.jpg" alt="681LSe.jpg" /></a></h4><h4 id="24g-oled等其他模块设计"><a class="markdownIt-Anchor" href="#24g-oled等其他模块设计"></a> 2.4G、OLED等其他模块设计</h4><p><a href="https://imgtu.com/i/6GEzrT"><img src="https://s3.ax1x.com/2021/03/10/6GEzrT.jpg" alt="6GEzrT.jpg" /></a></p><h4 id="bom表-2"><a class="markdownIt-Anchor" href="#bom表-2"></a> BOM表</h4><table><thead><tr><th>Comment</th><th>Description</th><th>Designator</th><th>Footprint</th><th>Quantity</th><th>Value</th></tr></thead><tbody><tr><td>CAP</td><td>0603电容</td><td>C1, C3, C4, C5, C8,  C9, C10, C11, C12</td><td>C_0603</td><td>9</td><td>100nF</td></tr><tr><td>CAP</td><td>0603电容</td><td>C2, C14, C16</td><td>C_0603</td><td>3</td><td>100nF</td></tr><tr><td>CAP</td><td>0603电容</td><td>C6, C7</td><td>C_0603</td><td>2</td><td>22pF</td></tr><tr><td>CAP</td><td>1206钽电容</td><td>C13, C15</td><td>C_1206</td><td>2</td><td>100pF</td></tr><tr><td>S4</td><td>二极管</td><td>D1</td><td>SOD-123</td><td>1</td><td></td></tr><tr><td>DC4.2V</td><td>2p排针</td><td>JP1</td><td>SIP2</td><td>1</td><td></td></tr><tr><td>SW-PB</td><td>侧按按键开关</td><td>KEY1, KEY2</td><td>KEY(3<em>6</em>4.3mm)侧脚开关</td><td>2</td><td></td></tr><tr><td>MSS22D18</td><td>6p贴片拨动开关</td><td>KG1</td><td>MSS22D18</td><td>1</td><td></td></tr><tr><td>蓝灯</td><td>发光二极管</td><td>LED1, LED3</td><td>0603_LED_S1</td><td>2</td><td></td></tr><tr><td>红灯</td><td>发光二极管</td><td>LED2</td><td>0603_LED_S1</td><td>1</td><td></td></tr><tr><td>NRF24L01</td><td>2.4G模块</td><td>NRF1</td><td>24L01</td><td>1</td><td></td></tr><tr><td>OLED</td><td>OLED模块</td><td>P1</td><td>SIP7</td><td>1</td><td></td></tr><tr><td>Res2</td><td>0603电阻</td><td>R1</td><td>R0603</td><td>1</td><td>10K</td></tr><tr><td>Res2</td><td>0603电阻</td><td>R2, R3, R4</td><td>R0603</td><td>3</td><td>1K</td></tr><tr><td>Res2</td><td>0603电阻</td><td>R5, R6, R7, R8, R9,  R10</td><td>R0603</td><td>6</td><td>10K</td></tr><tr><td>SW1</td><td>按键开关</td><td>S1, S2, S3, S4</td><td>KEY_4(SOP)</td><td>4</td><td></td></tr><tr><td>Header 4</td><td>4p排针</td><td>SWD1, USART1</td><td>HDR1X4</td><td>2</td><td></td></tr><tr><td>STM32F103C8T6_LQFP48</td><td>STM32C8T6</td><td>U1</td><td>LQFP48_STM32</td><td>1</td><td></td></tr><tr><td>662K</td><td>LDO</td><td>U2</td><td>SOT-23-3L</td><td>1</td><td></td></tr><tr><td>XTAL</td><td>贴片晶振CSTCE8M00G55</td><td>Y1</td><td>CSTCE8M00G55</td><td>1</td><td>8M</td></tr><tr><td>摇杆</td><td>摇杆</td><td>YG1, YG2</td><td>GY</td><td>2</td><td></td></tr></tbody></table><h3 id="软件设计-2"><a class="markdownIt-Anchor" href="#软件设计-2"></a> 软件设计</h3><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nrf24l01.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ADC_DMA_Config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;remote.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Beep.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bmp.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cycleCounterInit();</span><br><span class="line"><span class="keyword">while</span>(SysTick_Config(SystemCoreClock / <span class="number">1000</span>))<span class="comment">//系统滴答时钟 1ms发生一次中断</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">BEEP_INIT();</span><br><span class="line">NRF24L01_INIT();        <span class="comment">//初始化NRF24L01</span></span><br><span class="line">  USART1_Config();        <span class="comment">//初始化串口1</span></span><br><span class="line">OLED_Config();<span class="comment">//OLED配置</span></span><br><span class="line">delay_ms(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\nstm32f103C8t6\r\n&quot;</span>);<span class="comment">//串口1打印单片机型号</span></span><br><span class="line">ADC1_GPIO_Config();      <span class="comment">//初始化ADC IO</span></span><br><span class="line">ADC1_Mode_Config();      <span class="comment">//初始化ADC模式</span></span><br><span class="line">RC_INIT();               <span class="comment">//校准摇杆数据初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ADC_DMA.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">THR - PA0-ADC12_IN0</span></span><br><span class="line"><span class="comment">YAW-PA1-ADC12_IN1</span></span><br><span class="line"><span class="comment">PITCH-PA2-ADC12_IN2</span></span><br><span class="line"><span class="comment">ROLL-PA3-ADC12_IN3</span></span><br><span class="line"><span class="comment">POWER-PA4-ADC12_IN4</span></span><br><span class="line"><span class="comment">KEY_L-PB0-ADC12_IN8</span></span><br><span class="line"><span class="comment">KEY_R-PB1-ADC12_IN9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ADC_DMA_Config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADC1_DR_Address    ((u32)0x40012400+0x4c)</span></span><br><span class="line"></span><br><span class="line">__IO <span class="keyword">uint16_t</span> ADC_ConvertedValue[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：ADC1_GPIO_Config</span></span><br><span class="line"><span class="comment"> * 描述  ：使能ADC1和DMA1的时钟，初始化PC.01</span></span><br><span class="line"><span class="comment"> * 输入  : 无</span></span><br><span class="line"><span class="comment"> * 输出  ：无</span></span><br><span class="line"><span class="comment"> * 调用  ：内部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC1_GPIO_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable DMA clock */</span></span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable ADC1 and GPIOC clock */</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure PC.01  as analog input */</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3; <span class="comment">//THR,YAW,ROLL,PITCH</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数名：ADC1_Mode_Config</span></span><br><span class="line"><span class="comment"> * 描述  ：配置ADC1的工作模式为MDA模式</span></span><br><span class="line"><span class="comment"> * 输入  : 无</span></span><br><span class="line"><span class="comment"> * 输出  ：无</span></span><br><span class="line"><span class="comment"> * 调用  ：内部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC1_Mode_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line">ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA channel1 configuration */</span></span><br><span class="line">DMA_DeInit(DMA1_Channel1);</span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address; <span class="comment">//ADC地址</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&amp;ADC_ConvertedValue;<span class="comment">//内存地址</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;</span><br><span class="line">DMA_InitStructure.DMA_BufferSize = <span class="number">4</span>;</span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;<span class="comment">//外设地址固定</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;  <span class="comment">//内存地址固定</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;<span class="comment">//半字</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;</span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;<span class="comment">//循环传输</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_High;</span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;</span><br><span class="line">DMA_Init(DMA1_Channel1, &amp;DMA_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable DMA channel1 */</span></span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC1 configuration */</span></span><br><span class="line"></span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;<span class="comment">//独立ADC模式</span></span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = ENABLE ;  <span class="comment">//禁止扫描模式，扫描模式用于多通道采集</span></span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;<span class="comment">//开启连续转换模式，即不停地进行ADC转换</span></span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;<span class="comment">//不使用外部触发转换</span></span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; <span class="comment">//采集数据右对齐</span></span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">4</span>; <span class="comment">//要转换的通道数目</span></span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*配置ADC时钟，为PCLK2的6分频，即12MHz,ADC频率最高不能超过14MHz*/</span></span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div8); </span><br><span class="line"><span class="comment">/*配置ADC1的通道11为55.5个采样周期，序列为1 */</span> </span><br><span class="line"></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_0, <span class="number">1</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_1, <span class="number">2</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_2, <span class="number">3</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_3, <span class="number">4</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line"><span class="comment">//ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 5, ADC_SampleTime_55Cycles5);</span></span><br><span class="line"><span class="comment">//ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 6, ADC_SampleTime_55Cycles5);</span></span><br><span class="line"><span class="comment">//ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 7, ADC_SampleTime_55Cycles5);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable ADC1 DMA */</span></span><br><span class="line">ADC_DMACmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable ADC1 */</span></span><br><span class="line">ADC_Cmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*复位校准寄存器 */</span>   </span><br><span class="line">ADC_ResetCalibration(ADC1);</span><br><span class="line"><span class="comment">/*等待校准寄存器复位完成 */</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC校准 */</span></span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="comment">/* 等待校准完成*/</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 由于没有采用外部触发，所以使用软件触发ADC转换 */</span> </span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EEPROM.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;EEPROM.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x_flash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span>FAILED = <span class="number">0</span>, PASSED = !FAILED&#125; Status;<span class="comment">//定义要使用的状态枚举变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> EraseCounter = <span class="number">0x00</span>, Address = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> Data = <span class="number">0x3210ABCD</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> First_Page = <span class="number">0x00</span>;                       <span class="comment">//起始页</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__IO FLASH_Status FLASHStatus = FLASH_COMPLETE;</span><br><span class="line">__IO Status MemoryProgramStatus = PASSED;</span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=============================================================================</span></span><br><span class="line"><span class="comment">//文件名称：main</span></span><br><span class="line"><span class="comment">//功能概要：主函数</span></span><br><span class="line"><span class="comment">//参数说明：无</span></span><br><span class="line"><span class="comment">//函数返回：int</span></span><br><span class="line"><span class="comment">//=============================================================================</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FLASH_write</span><span class="params">(<span class="keyword">int16_t</span> *data,<span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FLASH_Unlock();<span class="comment">//先解锁</span></span><br><span class="line">  FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR); <span class="comment">//清楚相应的标志位</span></span><br><span class="line">  First_Page = (FLASH_End_Addr - FLASH_Start_Addr+<span class="number">1</span>) / FLASH_Page_Size;<span class="comment">//计算出起始页</span></span><br><span class="line">  <span class="comment">/* 使用前先擦除 */</span></span><br><span class="line">  <span class="keyword">for</span>(EraseCounter = <span class="number">0</span>; (EraseCounter &lt; First_Page) &amp;&amp; (FLASHStatus == FLASH_COMPLETE); EraseCounter++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (FLASH_ErasePage(FLASH_Start_Addr + (FLASH_Page_Size * EraseCounter))!= FLASH_COMPLETE)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 写入FLASH */</span></span><br><span class="line">  Address = FLASH_Start_Addr;</span><br><span class="line">  <span class="keyword">while</span> (len--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (FLASH_ProgramHalfWord(Address, *data) == FLASH_COMPLETE)</span><br><span class="line">    &#123;</span><br><span class="line">data++;</span><br><span class="line">Address = Address + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; </span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  FLASH_Lock();</span><br><span class="line"><span class="comment">/* 上锁 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FLASH_read</span><span class="params">(<span class="keyword">uint32_t</span> *data,<span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Address = FLASH_Start_Addr;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (len--)</span><br><span class="line">  &#123;</span><br><span class="line">    *data = *(__IO <span class="keyword">uint32_t</span> *)Address;</span><br><span class="line">data++;</span><br><span class="line">    Address = Address + <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NRF24L01.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nrf24l01.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SPI.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> SUCCESS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> FAILED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAILED  1</span></span><br><span class="line"><span class="comment">//配对密码</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> TX_ADDRESS[]= &#123;<span class="number">0x11</span>,<span class="number">0x22</span>,<span class="number">0x33</span>,<span class="number">0x44</span>,<span class="number">0x55</span>&#125;;<span class="comment">//本地地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> RX_ADDRESS[]= &#123;<span class="number">0x11</span>,<span class="number">0x22</span>,<span class="number">0x33</span>,<span class="number">0x44</span>,<span class="number">0x55</span>&#125;;<span class="comment">//接收地址RX_ADDR_P0 == RX_ADDR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//24L01操作线   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Set_NRF24L01_CSN    (GPIOA-&gt;BSRR = GPIO_Pin_4) <span class="comment">// PB12</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Clr_NRF24L01_CSN     (GPIOA-&gt;BRR = GPIO_Pin_4)    <span class="comment">// PB12</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Set_NRF24L01_CE (GPIOA-&gt;BSRR = GPIO_Pin_15)    <span class="comment">// PB1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Clr_NRF24L01_CE  (GPIOA-&gt;BRR = GPIO_Pin_15)    <span class="comment">// PB1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_NRF24L01_IRQ   (GPIOA-&gt;IDR&amp;GPIO_Pin_11)<span class="comment">//IRQ主机数据输入 PB0</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define GPIO_Remap_SWJ_JTAGDisable  ((uint32_t)0x00300200)  /*!&lt; JTAG-DP Disabled and SW-DP Enabled */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化24L01的IO口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NRF24L01_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);      <span class="comment">/*??SWD ??JTAG*/</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);    <span class="comment">//led</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9|GPIO_Pin_10;          <span class="comment">//</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);    <span class="comment">//使能GPIO的时钟  CE</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;          <span class="comment">//NRF24L01 模块片选信号</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);   <span class="comment">//使能GPIO的时钟 CSN</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;      </span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">Set_NRF24L01_CE;                                    <span class="comment">//初始化时先拉高</span></span><br><span class="line">Set_NRF24L01_CSN;                                   <span class="comment">//初始化时先拉高</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置NRF2401的IRQ</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU  ;     <span class="comment">//上拉输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">GPIO_SetBits(GPIOA,GPIO_Pin_11);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SPI_Config();                                <span class="comment">//初始化SPI</span></span><br><span class="line">Clr_NRF24L01_CE;                                 <span class="comment">//使能24L01</span></span><br><span class="line">Set_NRF24L01_CSN;                                   <span class="comment">//SPI片选取消</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上电检测NRF24L01是否在位</span></span><br><span class="line"><span class="comment">//写5个数据然后再读回来进行比较，</span></span><br><span class="line"><span class="comment">//相同时返回值:0，表示在位;否则返回1，表示不在位</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Check</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 buf[<span class="number">5</span>]=&#123;<span class="number">0XA5</span>,<span class="number">0XA5</span>,<span class="number">0XA5</span>,<span class="number">0XA5</span>,<span class="number">0XA5</span>&#125;;</span><br><span class="line">u8 buf1[<span class="number">5</span>];</span><br><span class="line">u8 i;    </span><br><span class="line">NRF24L01_Write_Buf(SPI_WRITE_REG+TX_ADDR,buf,<span class="number">5</span>);<span class="comment">//写入5个字节的地址.</span></span><br><span class="line">NRF24L01_Read_Buf(TX_ADDR,buf1,<span class="number">5</span>);              <span class="comment">//读出写入的地址  </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)<span class="keyword">if</span>(buf1[i]!=<span class="number">0XA5</span>)<span class="keyword">break</span>;   </span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">5</span>)<span class="keyword">return</span> <span class="number">1</span>;                               <span class="comment">//NRF24L01不在位</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;                                <span class="comment">//NRF24L01在位</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//通过SPI写寄存器</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Write_Reg</span><span class="params">(u8 regaddr,u8 data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 status;</span><br><span class="line">    Clr_NRF24L01_CSN;                    <span class="comment">//使能SPI传输</span></span><br><span class="line">  status =SPI_RW(regaddr); <span class="comment">//发送寄存器号 </span></span><br><span class="line">  SPI_RW(data);            <span class="comment">//写入寄存器的值</span></span><br><span class="line">  Set_NRF24L01_CSN;                    <span class="comment">//禁止SPI传输   </span></span><br><span class="line">  <span class="keyword">return</span>(status);                <span class="comment">//返回状态值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取SPI寄存器值 ，regaddr:要读的寄存器</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Read_Reg</span><span class="params">(u8 regaddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 reg_val;    </span><br><span class="line">Clr_NRF24L01_CSN;                <span class="comment">//使能SPI传输</span></span><br><span class="line">  SPI_RW(regaddr);     <span class="comment">//发送寄存器号</span></span><br><span class="line">  reg_val=SPI_RW(<span class="number">0XFF</span>);<span class="comment">//读取寄存器内容</span></span><br><span class="line">  Set_NRF24L01_CSN;                <span class="comment">//禁止SPI传输    </span></span><br><span class="line">  <span class="keyword">return</span>(reg_val);                 <span class="comment">//返回状态值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置读出指定长度的数据</span></span><br><span class="line"><span class="comment">//*pBuf:数据指针</span></span><br><span class="line"><span class="comment">//返回值,此次读到的状态寄存器值 </span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Read_Buf</span><span class="params">(u8 regaddr,u8 *pBuf,u8 datalen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 status,u8_ctr;       </span><br><span class="line">  Clr_NRF24L01_CSN;                     <span class="comment">//使能SPI传输</span></span><br><span class="line">  status=SPI_RW(regaddr);   <span class="comment">//发送寄存器值(位置),并读取状态值      </span></span><br><span class="line"><span class="keyword">for</span>(u8_ctr=<span class="number">0</span>;u8_ctr&lt;datalen;u8_ctr++)pBuf[u8_ctr]=SPI_RW(<span class="number">0XFF</span>);<span class="comment">//读出数据</span></span><br><span class="line">  Set_NRF24L01_CSN;                     <span class="comment">//关闭SPI传输</span></span><br><span class="line">  <span class="keyword">return</span> status;                        <span class="comment">//返回读到的状态值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置写指定长度的数据</span></span><br><span class="line"><span class="comment">//*pBuf:数据指针</span></span><br><span class="line"><span class="comment">//返回值,此次读到的状态寄存器值</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_Write_Buf</span><span class="params">(u8 regaddr, u8 *pBuf, u8 datalen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 status,u8_ctr;    </span><br><span class="line">Clr_NRF24L01_CSN;                                    <span class="comment">//使能SPI传输</span></span><br><span class="line">  status = SPI_RW(regaddr);                <span class="comment">//发送寄存器值(位置),并读取状态值</span></span><br><span class="line">  <span class="keyword">for</span>(u8_ctr=<span class="number">0</span>; u8_ctr&lt;datalen; u8_ctr++)SPI_RW(*pBuf++); <span class="comment">//写入数据 </span></span><br><span class="line">  Set_NRF24L01_CSN;                                    <span class="comment">//关闭SPI传输</span></span><br><span class="line">  <span class="keyword">return</span> status;                                       <span class="comment">//返回读到的状态值</span></span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//启动NRF24L01发送一次数据</span></span><br><span class="line"><span class="comment">//txbuf:待发送数据首地址</span></span><br><span class="line"><span class="comment">//返回值:发送完成状况</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_TxPacket</span><span class="params">(u8 *txbuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 state;   </span><br><span class="line">Clr_NRF24L01_CE;</span><br><span class="line">NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);<span class="comment">//写数据到TX BUF  32个字节</span></span><br><span class="line">Set_NRF24L01_CE;                                     <span class="comment">//启动发送   </span></span><br><span class="line"><span class="comment">//while(READ_NRF24L01_IRQ!=0);                         //等待发送完成</span></span><br><span class="line">state=NRF24L01_Read_Reg(STATUS);                     <span class="comment">//读取状态寄存器的值   </span></span><br><span class="line">NRF24L01_Write_Reg(SPI_WRITE_REG+STATUS,state);      <span class="comment">//清除TX_DS或MAX_RT中断标志</span></span><br><span class="line"><span class="keyword">if</span>(state&amp;MAX_TX)                                     <span class="comment">//达到最大重发次数</span></span><br><span class="line">&#123;</span><br><span class="line">NRF24L01_Write_Reg(FLUSH_TX,<span class="number">0xff</span>);               <span class="comment">//清除TX FIFO寄存器 </span></span><br><span class="line"><span class="keyword">return</span> MAX_TX; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(state&amp;TX_OK)                                      <span class="comment">//发送完成</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> TX_OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0xff</span>;                                         <span class="comment">//其他原因发送失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动NRF24L01发送一次数据</span></span><br><span class="line"><span class="comment">//txbuf:待发送数据首地址</span></span><br><span class="line"><span class="comment">//返回值:0，接收完成；其他，错误代码</span></span><br><span class="line"><span class="function">u8 <span class="title">NRF24L01_RxPacket</span><span class="params">(u8 *rxbuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 state;          </span><br><span class="line">state=NRF24L01_Read_Reg(STATUS);                <span class="comment">//读取状态寄存器的值     </span></span><br><span class="line">NRF24L01_Write_Reg(SPI_WRITE_REG+STATUS,state); <span class="comment">//清除TX_DS或MAX_RT中断标志</span></span><br><span class="line"><span class="keyword">if</span>(state&amp;RX_OK)                                 <span class="comment">//接收到数据</span></span><br><span class="line">&#123;</span><br><span class="line">NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);<span class="comment">//读取数据</span></span><br><span class="line">NRF24L01_Write_Reg(FLUSH_RX,<span class="number">0xff</span>);          <span class="comment">//清除RX FIFO寄存器 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;                                      <span class="comment">//没收到任何数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数初始化NRF24L01到RX模式</span></span><br><span class="line"><span class="comment">//设置RX地址,写RX数据宽度,选择RF频道,波特率和LNA HCURR</span></span><br><span class="line"><span class="comment">//当CE变高后,即进入RX模式,并可以接收数据了   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RX_Mode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Clr_NRF24L01_CE;  </span><br><span class="line">    <span class="comment">//写RX节点地址</span></span><br><span class="line">  NRF24L01_Write_Buf(SPI_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使能通道0的自动应答    </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+EN_AA,<span class="number">0x01</span>);    </span><br><span class="line">    <span class="comment">//使能通道0的接收地址   </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+EN_RXADDR,<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//设置RF通信频率  </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RF_CH,<span class="number">45</span>);   <span class="comment">//(要改单机控制，就把45改成跟遥控器单独一样的。就可以单机控制了)</span></span><br><span class="line">    <span class="comment">//选择通道0的有效数据宽度     </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);</span><br><span class="line">    <span class="comment">//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RF_SETUP,<span class="number">0x0f</span>);</span><br><span class="line">    <span class="comment">//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,PRIM_RX接收模式 </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+NCONFIG, <span class="number">0x0f</span>); </span><br><span class="line">    <span class="comment">//CE为高,进入接收模式 </span></span><br><span class="line">  Set_NRF24L01_CE;                                </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数初始化NRF24L01到TX模式</span></span><br><span class="line"><span class="comment">//设置TX地址,写TX数据宽度,设置RX自动应答的地址,填充TX发送数据,</span></span><br><span class="line"><span class="comment">//选择RF频道,波特率和LNA HCURR PWR_UP,CRC使能</span></span><br><span class="line"><span class="comment">//当CE变高后,即进入RX模式,并可以接收数据了   </span></span><br><span class="line"><span class="comment">//CE为高大于10us,则启动发送. </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TX_Mode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">Clr_NRF24L01_CE;    </span><br><span class="line">    <span class="comment">//写TX节点地址 </span></span><br><span class="line">  NRF24L01_Write_Buf(SPI_WRITE_REG+TX_ADDR,(u8*)TX_ADDRESS,TX_ADR_WIDTH);    </span><br><span class="line">    <span class="comment">//设置TX节点地址,主要为了使能ACK  </span></span><br><span class="line">  NRF24L01_Write_Buf(SPI_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//使能通道0的自动应答    </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+EN_AA,<span class="number">0x01</span>);     </span><br><span class="line">    <span class="comment">//使能通道0的接收地址  </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+EN_RXADDR,<span class="number">0x01</span>); </span><br><span class="line">    <span class="comment">//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次</span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+SETUP_RETR,<span class="number">0x1a</span>);</span><br><span class="line">    <span class="comment">//设置RF通道为40</span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RF_CH,<span class="number">45</span>);     <span class="comment">//(要改单机控制，就把45改成跟遥控器单独一样的。就可以单机控制了)</span></span><br><span class="line">    <span class="comment">//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   </span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+RF_SETUP,<span class="number">0x0f</span>);  <span class="comment">//0x27  250K   0x07 1M</span></span><br><span class="line">    <span class="comment">//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,PRIM_RX发送模式,开启所有中断</span></span><br><span class="line">  NRF24L01_Write_Reg(SPI_WRITE_REG+NCONFIG,<span class="number">0x0e</span>);    </span><br><span class="line">    <span class="comment">// CE为高,10us后启动发送</span></span><br><span class="line">Set_NRF24L01_CE;                                  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NRF24L01_INIT</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">NRF24L01_Configuration();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(NRF24L01_Check())</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">GPIO_SetBits(GPIOB,GPIO_Pin_9);</span><br><span class="line">  TX_Mode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SPI.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;spi.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      SPI_InitTypeDef  SPI_InitStructure;</span><br><span class="line">     GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);  </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO  , ENABLE);</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_4); <span class="comment">//NRF_CS预置为高 </span></span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7; </span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; </span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure); </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* SPI2 configuration */</span></span><br><span class="line">        SPI_Cmd(SPI1, DISABLE);             <span class="comment">//必须先禁能,才能改变MODE</span></span><br><span class="line">        SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;</span><br><span class="line">        SPI_InitStructure.SPI_Mode = SPI_Mode_Master;</span><br><span class="line">        SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;</span><br><span class="line">        SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;</span><br><span class="line">        SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;</span><br><span class="line">        SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;</span><br><span class="line">        SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;</span><br><span class="line">        SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;</span><br><span class="line">        SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        SPI_Init(SPI1, &amp;SPI_InitStructure);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* SPI2 enable */</span></span><br><span class="line">        SPI_Cmd(SPI1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u8 <span class="title">SPI_RW</span><span class="params">(u8 dat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">/* Loop while DR register in not emplty */</span></span><br><span class="line">        <span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Send byte through the SPI2 peripheral */</span></span><br><span class="line">        SPI_I2S_SendData(SPI1, dat);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Wait to receive a byte */</span></span><br><span class="line">        <span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Return the byte read from the SPI bus */</span></span><br><span class="line">        <span class="keyword">return</span> SPI_I2S_ReceiveData(SPI1);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Systick.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ADC_DMA_Config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SPI.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nrf24l01.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eeprom.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;remote.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> SysTick_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SysTick_count++;</span><br><span class="line">TimeDelay--;</span><br><span class="line">RC_Analy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BEEP.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Beep.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BEEP_INIT</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);    <span class="comment">//使能GPIO的时钟  </span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;          <span class="comment">//蜂鸣器</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">BEEP_L;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OLED.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oledfont.h&quot;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;remote.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">u8 OLED_GRAM[<span class="number">144</span>][<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//反显函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ColorTurn</span><span class="params">(u8 i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">//正常显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0xA7</span>,OLED_CMD);<span class="comment">//反色显示</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//屏幕旋转180度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DisplayTurn</span><span class="params">(u8 i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0xC8</span>,OLED_CMD);<span class="comment">//正常显示</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0xC0</span>,OLED_CMD);<span class="comment">//反转显示</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA0</span>,OLED_CMD);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i;  </span><br><span class="line"><span class="keyword">if</span>(cmd)</span><br><span class="line">  OLED_DC_Set();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  OLED_DC_Clr();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_SCLK_Clr();</span><br><span class="line"><span class="keyword">if</span>(dat&amp;<span class="number">0x80</span>)</span><br><span class="line">   OLED_SDIN_Set();</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   OLED_SDIN_Clr();</span><br><span class="line">OLED_SCLK_Set();</span><br><span class="line">dat&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">&#125;   </span><br><span class="line">OLED_DC_Set();     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启OLED显示 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DisPlay_On</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD);<span class="comment">//电荷泵使能</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD);<span class="comment">//开启电荷泵</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD);<span class="comment">//点亮屏幕</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭OLED显示 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DisPlay_Off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD);<span class="comment">//电荷泵使能</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x10</span>,OLED_CMD);<span class="comment">//关闭电荷泵</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD);<span class="comment">//关闭屏幕</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新显存到OLED</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Refresh</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">   OLED_WR_Byte(<span class="number">0xb0</span>+i,OLED_CMD); <span class="comment">//设置行起始地址</span></span><br><span class="line">   OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);   <span class="comment">//设置低列起始地址</span></span><br><span class="line">   OLED_WR_Byte(<span class="number">0x10</span>,OLED_CMD);   <span class="comment">//设置高列起始地址</span></span><br><span class="line">   <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)</span><br><span class="line"> OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清屏函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Clear</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)</span><br><span class="line">&#123;</span><br><span class="line"> OLED_GRAM[n][i]=<span class="number">0</span>;<span class="comment">//清除所有数据</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">OLED_Refresh();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//画点 </span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawPoint</span><span class="params">(u8 x,u8 y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,m,n;</span><br><span class="line">i=y/<span class="number">8</span>;</span><br><span class="line">m=y%<span class="number">8</span>;</span><br><span class="line">n=<span class="number">1</span>&lt;&lt;m;</span><br><span class="line">OLED_GRAM[x][i]|=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除一个点</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ClearPoint</span><span class="params">(u8 x,u8 y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,m,n;</span><br><span class="line">i=y/<span class="number">8</span>;</span><br><span class="line">m=y%<span class="number">8</span>;</span><br><span class="line">n=<span class="number">1</span>&lt;&lt;m;</span><br><span class="line">OLED_GRAM[x][i]=~OLED_GRAM[x][i];</span><br><span class="line">OLED_GRAM[x][i]|=n;</span><br><span class="line">OLED_GRAM[x][i]=~OLED_GRAM[x][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//画线</span></span><br><span class="line"><span class="comment">//x:0~128</span></span><br><span class="line"><span class="comment">//y:0~64</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawLine</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,k,k1,k2;</span><br><span class="line"><span class="keyword">if</span>((x2&gt;<span class="number">128</span>)||(y2&gt;<span class="number">64</span>)||(x1&gt;x2)||(y1&gt;y2))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x1==x2)    <span class="comment">//画竖线</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(y2-y1);i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_DrawPoint(x1,y1+i);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y1==y2)   <span class="comment">//画横线</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(x2-x1);i++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_DrawPoint(x1+i,y1);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span>      <span class="comment">//画斜线</span></span><br><span class="line">&#123;</span><br><span class="line">k1=y2-y1;</span><br><span class="line">k2=x2-x1;</span><br><span class="line">k=k1*<span class="number">10</span>/k2;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(x2-x1);i++)</span><br><span class="line">&#123;</span><br><span class="line">  OLED_DrawPoint(x1+i,y1+i*k/<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x,y:圆心坐标</span></span><br><span class="line"><span class="comment">//r:圆的半径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawCircle</span><span class="params">(u8 x,u8 y,u8 r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b,num;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    b = r;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span> * b * b &gt;= r * r)      </span><br><span class="line">    &#123;</span><br><span class="line">        OLED_DrawPoint(x + a, y - b);</span><br><span class="line">        OLED_DrawPoint(x - a, y - b);</span><br><span class="line">        OLED_DrawPoint(x - a, y + b);</span><br><span class="line">        OLED_DrawPoint(x + a, y + b);</span><br><span class="line"> </span><br><span class="line">        OLED_DrawPoint(x + b, y + a);</span><br><span class="line">        OLED_DrawPoint(x + b, y - a);</span><br><span class="line">        OLED_DrawPoint(x - b, y - a);</span><br><span class="line">        OLED_DrawPoint(x - b, y + a);</span><br><span class="line">        </span><br><span class="line">        a++;</span><br><span class="line">        num = (a * a + b * b) - r*r;<span class="comment">//计算画的点离圆心的距离</span></span><br><span class="line">        <span class="keyword">if</span>(num &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            b--;</span><br><span class="line">            a--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//size:选择字体 12/16/24</span></span><br><span class="line"><span class="comment">//取模方式 逐列式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 size1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,m,temp,size2,chr1;</span><br><span class="line">u8 y0=y;</span><br><span class="line">size2=(size1/<span class="number">8</span>+((size1%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*(size1/<span class="number">2</span>);  <span class="comment">//得到字体一个字符对应点阵集所占的字节数</span></span><br><span class="line">chr1=chr-<span class="string">&#x27; &#x27;</span>;  <span class="comment">//计算偏移后的值</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size2;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(size1==<span class="number">12</span>)</span><br><span class="line">        &#123;temp=asc2_1206[chr1][i];&#125; <span class="comment">//调用1206字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size1==<span class="number">16</span>)</span><br><span class="line">        &#123;temp=asc2_1608[chr1][i];&#125; <span class="comment">//调用1608字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size1==<span class="number">24</span>)</span><br><span class="line">        &#123;temp=asc2_2412[chr1][i];&#125; <span class="comment">//调用2412字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">8</span>;m++)           <span class="comment">//写入数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&amp;<span class="number">0x80</span>)OLED_DrawPoint(x,y);</span><br><span class="line"><span class="keyword">else</span> OLED_ClearPoint(x,y);</span><br><span class="line">temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">if</span>((y-y0)==size1)</span><br><span class="line">&#123;</span><br><span class="line">y=y0;</span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示字符串</span></span><br><span class="line"><span class="comment">//x,y:起点坐标  </span></span><br><span class="line"><span class="comment">//size1:字体大小 </span></span><br><span class="line"><span class="comment">//*chr:字符串起始地址 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowString</span><span class="params">(u8 x,u8 y,u8 *chr,u8 size1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>((*chr&gt;=<span class="string">&#x27; &#x27;</span>)&amp;&amp;(*chr&lt;=<span class="string">&#x27;~&#x27;</span>))<span class="comment">//判断是不是非法字符!</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(x,y,*chr,size1);</span><br><span class="line">x+=size1/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">128</span>-size1)  <span class="comment">//换行</span></span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">y+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">chr++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m^n</span></span><br><span class="line"><span class="function">u32 <span class="title">OLED_Pow</span><span class="params">(u8 m,u8 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 result=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">  result*=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////显示2个数字</span></span><br><span class="line"><span class="comment">////x,y :起点坐标 </span></span><br><span class="line"><span class="comment">////len :数字的位数</span></span><br><span class="line"><span class="comment">////size:字体大小</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 t,temp;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num/OLED_Pow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(x+(size1/<span class="number">2</span>)*t,y,<span class="string">&#x27;0&#x27;</span>,size1);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">  OLED_ShowChar(x+(size1/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>,size1);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示汉字</span></span><br><span class="line"><span class="comment">//x,y:起点坐标</span></span><br><span class="line"><span class="comment">//num:汉字对应的序号</span></span><br><span class="line"><span class="comment">//取模方式 列行式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowChinese</span><span class="params">(u8 x,u8 y,u8 num,u8 size1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,m,n=<span class="number">0</span>,temp,chr1;</span><br><span class="line">u8 x0=x,y0=y;</span><br><span class="line">u8 size3=size1/<span class="number">8</span>;</span><br><span class="line"><span class="keyword">while</span>(size3--)</span><br><span class="line">&#123;</span><br><span class="line">chr1=num*size1/<span class="number">8</span>+n;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size1;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(size1==<span class="number">16</span>)</span><br><span class="line">&#123;temp=Hzk1[chr1][i];&#125;<span class="comment">//调用16*16字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size1==<span class="number">24</span>)</span><br><span class="line">&#123;temp=Hzk2[chr1][i];&#125;<span class="comment">//调用24*24字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size1==<span class="number">32</span>)       </span><br><span class="line">&#123;temp=Hzk3[chr1][i];&#125;<span class="comment">//调用32*32字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size1==<span class="number">64</span>)</span><br><span class="line">&#123;temp=Hzk4[chr1][i];&#125;<span class="comment">//调用64*64字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">8</span>;m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&amp;<span class="number">0x01</span>)OLED_DrawPoint(x,y);</span><br><span class="line"><span class="keyword">else</span> OLED_ClearPoint(x,y);</span><br><span class="line">temp&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">if</span>((x-x0)==size1)</span><br><span class="line">&#123;x=x0;y0=y0+<span class="number">8</span>;&#125;</span><br><span class="line">y=y0;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//num 显示汉字的个数</span></span><br><span class="line"><span class="comment">//space 每一遍显示的间隔</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ScrollDisplay</span><span class="params">(u8 num,u8 space)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,n,t=<span class="number">0</span>,m=<span class="number">0</span>,r;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    OLED_ShowChinese(<span class="number">128</span>,<span class="number">24</span>,t,<span class="number">16</span>); <span class="comment">//写入一个汉字保存在OLED_GRAM[][]数组中</span></span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;<span class="number">16</span>*space;r++)      <span class="comment">//显示间隔</span></span><br><span class="line"> &#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">144</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">8</span>;n++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_GRAM[i<span class="number">-1</span>][n]=OLED_GRAM[i][n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">           OLED_Refresh();</span><br><span class="line"> &#125;</span><br><span class="line">        t=<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">16</span>)&#123;m=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">144</span>;i++)   <span class="comment">//实现左移</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">8</span>;n++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_GRAM[i<span class="number">-1</span>][n]=OLED_GRAM[i][n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">OLED_Refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置写入数据的起始位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_BP</span><span class="params">(u8 x,u8 y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0xb0</span>+y,OLED_CMD);<span class="comment">//设置行起始地址</span></span><br><span class="line">OLED_WR_Byte(((x&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>)|<span class="number">0x10</span>,OLED_CMD);</span><br><span class="line">OLED_WR_Byte((x&amp;<span class="number">0x0f</span>),OLED_CMD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x0,y0：起点坐标</span></span><br><span class="line"><span class="comment">//x1,y1：终点坐标</span></span><br><span class="line"><span class="comment">//BMP[]：要写入的图片数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowPicture</span><span class="params">(u8 x0,u8 y0,u8 x1,u8 y1,u8 BMP[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 j=<span class="number">0</span>;</span><br><span class="line">u8 x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(y%<span class="number">8</span>==<span class="number">0</span>)y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> y+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(y=y0;y&lt;y1;y++)</span><br><span class="line"> &#123;</span><br><span class="line"> OLED_WR_BP(x0,y);</span><br><span class="line"> <span class="keyword">for</span>(x=x0;x&lt;x1;x++)</span><br><span class="line"> &#123;</span><br><span class="line"> OLED_WR_Byte(BMP[j],OLED_DATA);</span><br><span class="line"> j++;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//OLED的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"> </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="comment">//使能A端口时钟</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;</span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//速度50MHz</span></span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOD3,6</span></span><br><span class="line"> GPIO_SetBits(GPIOB,GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_8);</span><br><span class="line"></span><br><span class="line">OLED_RST_Set();</span><br><span class="line">delay_ms(<span class="number">100</span>);</span><br><span class="line">OLED_RST_Clr();<span class="comment">//复位</span></span><br><span class="line">delay_ms(<span class="number">200</span>);</span><br><span class="line">OLED_RST_Set();</span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD);<span class="comment">//--turn off oled panel</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//---set low column address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x10</span>,OLED_CMD);<span class="comment">//---set high column address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD);<span class="comment">//--set contrast control register</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xCF</span>,OLED_CMD);<span class="comment">// Set SEG Output Current Brightness</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD);<span class="comment">//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xC8</span>,OLED_CMD);<span class="comment">//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">//--set normal display</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD);<span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x3f</span>,OLED_CMD);<span class="comment">//--1/64 duty</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD);<span class="comment">//-set display offsetShift Mapping RAM Counter (0x00~0x3F)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//-not offset</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xd5</span>,OLED_CMD);<span class="comment">//--set display clock divide ratio/oscillator frequency</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x80</span>,OLED_CMD);<span class="comment">//--set divide ratio, Set Clock as 100 Frames/Sec</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD);<span class="comment">//--set pre-charge period</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xF1</span>,OLED_CMD);<span class="comment">//Set Pre-Charge as 15 Clocks &amp; Discharge as 1 Clock</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD);<span class="comment">//--set com pins hardware configuration</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD);</span><br><span class="line">OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD);<span class="comment">//--set vcomh</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//Set VCOM Deselect Level</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x20</span>,OLED_CMD);<span class="comment">//-Set Page Addressing Mode (0x00/0x01/0x02)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x02</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD);<span class="comment">//--set Charge Pump enable/disable</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD);<span class="comment">//--set(0x10) disable</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA4</span>,OLED_CMD);<span class="comment">// Disable Entire Display On (0xa4/0xa5)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">// Disable Inverse Display On (0xa6/a7) </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD);</span><br><span class="line">OLED_Clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">OLED_ColorTurn(<span class="number">0</span>);<span class="comment">//0正常显示，1 反色显示</span></span><br><span class="line">  OLED_DisplayTurn(<span class="number">0</span>);<span class="comment">//0正常显示 1 屏幕翻转显示</span></span><br><span class="line">OLED_Refresh();</span><br><span class="line">&#125;</span><br><span class="line">u8 tmpp=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowData</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_ShowString(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;Thr:&quot;</span>,<span class="number">12</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">40</span>,<span class="number">0</span>,Remote.thr,<span class="number">4</span>,<span class="number">12</span>);</span><br><span class="line">OLED_ShowString(<span class="number">0</span>,<span class="number">15</span>,<span class="string">&quot;Yaw:&quot;</span>,<span class="number">12</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">40</span>,<span class="number">15</span>,Remote.yaw,<span class="number">4</span>,<span class="number">12</span>);</span><br><span class="line">OLED_ShowString(<span class="number">0</span>,<span class="number">30</span>,<span class="string">&quot;L&amp;R:&quot;</span>,<span class="number">12</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">40</span>,<span class="number">30</span>,Remote.pitch,<span class="number">4</span>,<span class="number">12</span>);</span><br><span class="line">OLED_ShowString(<span class="number">0</span>,<span class="number">45</span>,<span class="string">&quot;F&amp;B:&quot;</span>,<span class="number">12</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">40</span>,<span class="number">45</span>,Remote.roll,<span class="number">4</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">OLED_Refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Remote.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;remote.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ADC_DMA_Config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nrf24l01.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eeprom.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Beep.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">__align(<span class="number">4</span>) _st_Remote Remote=&#123;<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint16_t</span> styb;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> //校准数据</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int16_t</span> flag;<span class="comment">//校准标志位</span></span><br><span class="line"><span class="keyword">int16_t</span> roll;</span><br><span class="line"><span class="keyword">int16_t</span> pitch;</span><br><span class="line"><span class="keyword">int16_t</span> thr;</span><br><span class="line"><span class="keyword">int16_t</span> yaw;</span><br><span class="line">&#125;offset ;</span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">函数原型：</span></span><br><span class="line"><span class="comment">功    能：按键初始化</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">AFIO-&gt;MAPR = <span class="number">0X02000000</span>;   <span class="comment">//使用四线SWD下载程序</span></span><br><span class="line">RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB , ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8;    </span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;    <span class="comment">//上拉输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">函数原型：</span></span><br><span class="line"><span class="comment">功    能：校准数据初始化</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC_INIT</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">offset.flag = *(<span class="keyword">int16_t</span>*)FLASH_Start_Addr;   <span class="comment">//读出存储的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(offset.flag != <span class="number">0x0066</span>) <span class="comment">//检查是否有校准数据 改变</span></span><br><span class="line">&#123;</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line">offset.roll = <span class="number">500</span>- (<span class="keyword">uint16_t</span>)(<span class="number">0.25f</span>*ADC_ConvertedValue[<span class="number">0</span>]);<span class="comment">//方向;</span></span><br><span class="line">offset.pitch = (<span class="keyword">uint16_t</span>)(<span class="number">0.25f</span>*ADC_ConvertedValue[<span class="number">1</span>]) <span class="number">-500</span>;<span class="comment">//方向</span></span><br><span class="line"></span><br><span class="line">offset.thr = (<span class="keyword">uint16_t</span>)(<span class="number">0.25f</span>*ADC_ConvertedValue[<span class="number">3</span>]);<span class="comment">//油门;</span></span><br><span class="line">offset.yaw = <span class="number">500</span>- (<span class="keyword">uint16_t</span>)(<span class="number">0.25f</span>*ADC_ConvertedValue[<span class="number">2</span>]);<span class="comment">//偏航</span></span><br><span class="line">offset.flag = <span class="number">0x0066</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;offset thr: %d   offset pitch: %d   offset yaw: %d   offset roll: %d \r\n&quot;</span>,offset.thr,offset.pitch,offset.yaw,offset.roll);  <span class="comment">//串口1输出2个摇杆数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(offset.thr &lt;= <span class="number">1</span>)  <span class="comment">//判断油门打最低才存储摇杆值  不然存储了就解锁不了飞机</span></span><br><span class="line">  &#123;</span><br><span class="line">FLASH_write((<span class="keyword">int16_t</span> *)&amp;offset,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">offset.roll = *((<span class="keyword">int16_t</span>*)FLASH_Start_Addr+<span class="number">1</span>);</span><br><span class="line">offset.pitch = *((<span class="keyword">int16_t</span>*)FLASH_Start_Addr+<span class="number">2</span>);</span><br><span class="line">offset.thr = *((<span class="keyword">int16_t</span>*)FLASH_Start_Addr+<span class="number">3</span>);</span><br><span class="line">offset.yaw = *((<span class="keyword">int16_t</span>*)FLASH_Start_Addr+<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">key_init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">函数原型：</span></span><br><span class="line"><span class="comment">功    能：10ms发送一次数据，每个通道都是高位在前低位在后</span></span><br><span class="line"><span class="comment">通信协议：</span></span><br><span class="line"><span class="comment">起始帧0XAA,0XAF + 地址帧 0X03 + 数据长度 + 12个遥控数据 + 校验字节</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span> </span><br><span class="line"><span class="keyword">uint8_t</span> tx_data[<span class="number">32</span>] = &#123;<span class="number">0xAA</span>,<span class="number">0xAF</span>,<span class="number">0x03</span>,<span class="number">32</span><span class="number">-5</span>&#125;;<span class="comment">//匿名通信协议</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NRF_SEND</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">uint8_t</span> i=<span class="number">4</span>;i&lt;<span class="number">26</span>;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">tx_data[i] = *((<span class="keyword">uint8_t</span>*)&amp;Remote+i<span class="number">-3</span>); <span class="comment">//高位在前</span></span><br><span class="line">tx_data[<span class="number">31</span>] += tx_data[i];</span><br><span class="line">tx_data[i+<span class="number">1</span>] = *((<span class="keyword">uint8_t</span>*)&amp;Remote+i<span class="number">-4</span>);</span><br><span class="line">tx_data[<span class="number">31</span>] += tx_data[i];</span><br><span class="line">&#125;</span><br><span class="line">tx_data[<span class="number">31</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">uint8_t</span> i=<span class="number">0</span>;i&lt;<span class="number">31</span>;i++)  <span class="comment">//校验位</span></span><br><span class="line">&#123;</span><br><span class="line">tx_data[<span class="number">31</span>] +=  tx_data[i];</span><br><span class="line">&#125;</span><br><span class="line">NRF24L01_TxPacket((<span class="keyword">uint8_t</span>*)&amp;tx_data); <span class="comment">//调用NRF发射数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">函数原型：</span></span><br><span class="line"><span class="comment">功    能：遥控数据解析   左油门程序</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC_Analy</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//10ms调用一次</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint16_t</span> last_thr,last_roll,last_pitch,last_yaw;</span><br><span class="line"></span><br><span class="line">Remote.thr = (<span class="keyword">uint16_t</span>)(<span class="number">0.25f</span>*ADC_ConvertedValue[<span class="number">3</span>])+<span class="number">1000</span> + offset.thr;<span class="comment">//油门</span></span><br><span class="line">last_thr = Remote.thr = Remote.thr*<span class="number">0.25f</span> + <span class="number">0.75f</span>*last_thr;</span><br><span class="line">Remote.pitch = <span class="number">1000</span> + (<span class="keyword">uint16_t</span>)(<span class="number">0.25f</span>*ADC_ConvertedValue[<span class="number">1</span>]) + offset.pitch;<span class="comment">//</span></span><br><span class="line">last_pitch = Remote.pitch = Remote.pitch*<span class="number">0.25f</span> + <span class="number">0.75f</span>*last_pitch;</span><br><span class="line">Remote.yaw = <span class="number">1000</span> + (<span class="keyword">uint16_t</span>)(<span class="number">0.25f</span>*ADC_ConvertedValue[<span class="number">2</span>]) + offset.yaw;<span class="comment">//方向</span></span><br><span class="line"><span class="keyword">if</span>(Remote.yaw&gt;<span class="number">1500</span>)<span class="comment">//把大数转换为小数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Remote.yaw&gt;<span class="number">1999</span>)</span><br><span class="line">&#123;</span><br><span class="line">  Remote.yaw=<span class="number">1005</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">Remote.yaw=Remote.yaw<span class="number">-1500</span>;</span><br><span class="line">Remote.yaw=<span class="number">1500</span>-Remote.yaw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Remote.yaw&lt;<span class="number">1500</span>)<span class="comment">//把小数转换为大数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Remote.yaw&lt;<span class="number">1010</span>)</span><br><span class="line">&#123;</span><br><span class="line">Remote.yaw=<span class="number">2000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   Remote.yaw=<span class="number">1500</span>-Remote.yaw;</span><br><span class="line">   Remote.yaw=<span class="number">1500</span>+Remote.yaw;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">last_yaw = Remote.yaw = Remote.yaw*<span class="number">0.25f</span> + <span class="number">0.75f</span>*last_yaw;</span><br><span class="line">Remote.roll =<span class="number">1000</span> +(<span class="keyword">uint16_t</span>)(<span class="number">0.25f</span>*ADC_ConvertedValue[<span class="number">0</span>]) + offset.roll;<span class="comment">//副翼</span></span><br><span class="line"><span class="keyword">if</span>(Remote.roll&gt;<span class="number">1500</span>)<span class="comment">//把大数转换为小数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Remote.roll&gt;<span class="number">1999</span>)</span><br><span class="line">&#123;</span><br><span class="line">  Remote.roll=<span class="number">1005</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">Remote.roll=Remote.roll<span class="number">-1500</span>;</span><br><span class="line">Remote.roll=<span class="number">1500</span>-Remote.roll;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Remote.roll&lt;<span class="number">1500</span>)<span class="comment">//把小数转换为大数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Remote.roll&lt;<span class="number">1010</span>)</span><br><span class="line">&#123;</span><br><span class="line">Remote.roll=<span class="number">2000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   Remote.roll=<span class="number">1500</span>-Remote.roll;</span><br><span class="line">   Remote.roll=<span class="number">1500</span>+Remote.roll;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">last_roll = Remote.roll = Remote.roll*<span class="number">0.25f</span> + <span class="number">0.75f</span>*last_roll;</span><br><span class="line">styb++;</span><br><span class="line"><span class="keyword">if</span>(styb &gt;= <span class="number">200</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;前后: %d   左右: %d   航向: %d   油门: %d \r\n&quot;</span>,Remote.pitch,Remote.roll,Remote.yaw,Remote.thr);  <span class="comment">//串口1输出2个摇杆数据</span></span><br><span class="line">styb=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">key();<span class="comment">//扫描按键</span></span><br><span class="line">NRF_SEND();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">函数原型：</span></span><br><span class="line"><span class="comment">功    能：按键扫描</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY3 GPIO_Pin_3<span class="comment">//GPIOC</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY4 GPIO_Pin_4<span class="comment">//GPIOC</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY5 GPIO_Pin_5 <span class="comment">//GPIOA</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY6 GPIO_Pin_6 <span class="comment">//GPIOA</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY7 GPIO_Pin_7 <span class="comment">//GPIOB</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY8 GPIO_Pin_8 <span class="comment">//GPIOB</span></span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">uint8_t</span> status = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">uint32_t</span> temp;</span><br><span class="line"><span class="keyword">switch</span>(status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span>(SysTick_count - temp &gt;<span class="number">20</span>) <span class="comment">//200ms 按键音</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(</span><br><span class="line">((GPIOB-&gt;IDR &amp; (GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8)) == (GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8))</span><br><span class="line">)</span><br><span class="line">status = <span class="number">1</span>;</span><br><span class="line">BEEP_H;</span><br><span class="line">  <span class="comment">//GPIO_SetBits(GPIOB,GPIO_Pin_10);</span></span><br><span class="line">GPIO_ResetBits(GPIOB,GPIO_Pin_10);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">if</span>(</span><br><span class="line">((GPIOB-&gt;IDR &amp; (GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8)) != (GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8))</span><br><span class="line">)</span><br><span class="line">status = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span>(!(GPIOB-&gt;IDR &amp; KEY6))</span><br><span class="line">&#123;</span><br><span class="line">offset.roll=offset.roll+<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!(GPIOB-&gt;IDR &amp; KEY4))</span><br><span class="line">&#123;</span><br><span class="line">offset.roll=offset.roll<span class="number">-5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!(GPIOB-&gt;IDR &amp; KEY5))</span><br><span class="line">&#123;</span><br><span class="line">offset.pitch=offset.pitch<span class="number">-5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!(GPIOB-&gt;IDR &amp; KEY3))</span><br><span class="line">&#123;</span><br><span class="line">offset.pitch=offset.pitch+<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!(GPIOB-&gt;IDR &amp; KEY7))</span><br><span class="line">&#123;</span><br><span class="line">offset.thr = <span class="number">0</span>;</span><br><span class="line">FLASH_write((<span class="keyword">int16_t</span> *)&amp;offset,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!(GPIOB-&gt;IDR &amp; KEY8))</span><br><span class="line">&#123;</span><br><span class="line">Remote.AUX7 ^= (<span class="number">2000</span>^<span class="number">1000</span>); <span class="comment">//1000和2000之间变化  可以留来一键空翻</span></span><br><span class="line">&#125;</span><br><span class="line">status = <span class="number">0</span>;</span><br><span class="line">BEEP_L;  </span><br><span class="line"><span class="comment">//GPIO_ResetBits(GPIOB,GPIO_Pin_10);</span></span><br><span class="line">GPIO_SetBits(GPIOB,GPIO_Pin_10);</span><br><span class="line">temp = SysTick_count;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delay.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;misc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">uint32_t</span> usTicks = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint16_t</span> TimeDelay=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cycleCounterInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RCC_ClocksTypeDef clocks;</span><br><span class="line">    RCC_GetClocksFreq(&amp;clocks);</span><br><span class="line">    usTicks = clocks.SYSCLK_Frequency / <span class="number">1000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(<span class="keyword">uint16_t</span> nTime)</span> <span class="comment">//    毫秒级延时函数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TimeDelay=nTime;</span><br><span class="line"><span class="keyword">while</span>(TimeDelay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Usart.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;misc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：USART1_Config</span></span><br><span class="line"><span class="comment"> * 描述  ：USART1 GPIO 配置,工作模式配置。</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  : 无</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; </span><br><span class="line"><span class="comment">/* 配置串口1 （USART1） 时钟*/</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure the NVIC Preemption Priority Bits */</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能串口1中断 */</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//USART1  串口1全局中断 </span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;<span class="comment">//抢占优先级1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>; <span class="comment">//子优先级1</span></span><br><span class="line"><span class="comment">/*IRQ通道使能*/</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line"><span class="comment">/*根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器USART1*/</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*串口GPIO端口配置*/</span></span><br><span class="line">  <span class="comment">/* 配置串口1 （USART1 Tx (PA.09)）*/</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 配置串口1 USART1 Rx (PA.10)*/</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//USART 初始化设置</span></span><br><span class="line">USART_InitStructure.USART_BaudRate =<span class="number">115200</span>;<span class="comment">//串口波特率</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Tx;<span class="comment">//|USART_Mode_Rx | ;//发模式</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启中断</span></span><br><span class="line"></span><br><span class="line">USART_Cmd(USART1, ENABLE); <span class="comment">//使能串口 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_SendByte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> *Data,<span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!(USART1-&gt;SR &amp; USART_FLAG_TXE)); <span class="comment">// while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)</span></span><br><span class="line">USART_SendData(USART1,*(Data+i)); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_SendByte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> *Data,<span class="keyword">uint8_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!(USART3-&gt;SR &amp; USART_FLAG_TXE)); <span class="comment">// while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)</span></span><br><span class="line">USART_SendData(USART3,*(Data+i)); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int8_t</span> CheckSend[<span class="number">7</span>]=&#123;<span class="number">0xAA</span>,<span class="number">0XAA</span>,<span class="number">0xEF</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_setBaudRate</span><span class="params">(<span class="keyword">uint32_t</span> baudRate)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">USART_InitStructure.USART_BaudRate =  baudRate;</span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：fputc</span></span><br><span class="line"><span class="comment"> * 描述  ：重定向c库函数printf到USART1</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：无</span></span><br><span class="line"><span class="comment"> * 调用  ：由printf调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 将Printf内容发往串口 */</span></span><br><span class="line">USART_SendData(USART1, (<span class="keyword">unsigned</span> <span class="keyword">char</span>) ch);</span><br><span class="line"><span class="keyword">while</span>( USART_GetFlagStatus(USART1,USART_FLAG_TC)!= SET);</span><br><span class="line"><span class="keyword">return</span> (ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源项目合集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模电复习2</title>
      <link href="2017/12/20/%E6%A8%A1%E7%94%B5%E5%A4%8D%E4%B9%A02/"/>
      <url>2017/12/20/%E6%A8%A1%E7%94%B5%E5%A4%8D%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h2 id="17-04-集成运放简介"><a class="markdownIt-Anchor" href="#17-04-集成运放简介"></a> 17-04 集成运放简介</h2><ol><li><p>在半导体制造工艺的基础上，将整个电路中的元器件及电路制作在一块硅基片上，构成特定功能的电子电路，称为集成电路</p></li><li><p>集成电路分类：</p><ul><li>信号角度<ul><li>数字型</li><li>模拟型</li><li>混合信号型</li></ul></li><li>功能角度：集成运算放大器，集成功率放大器，集成高频放大器;集成中频放大器，集成比较器，集成乘法器，集成稳压器，集成数/模和模/数转换器等</li></ul></li><li><p>集成运算放大电路的特点</p><p>增益高、输入电阻大、输出电阻小，抑制温漂能力强</p><ul><li>直接耦合方式;</li><li>充分利用管子性能良好的一致性采用差分放大电路和电流源电路</li><li>用复杂电路实现高性能的放大电路，因为电路的复杂化并不带来工艺的复杂性</li><li>用有源元件替代无源元件，如用常用有源器件代替电阻</li><li>采用复合管。</li></ul></li><li><p>集成运算放大电路实质是一个具有高放大倍数的多级直接耦合放大电路</p></li><li><p>集成运算的基本组成</p><p><a href="https://imgchr.com/i/BKF0r8"><img src="https://s1.ax1x.com/2020/10/26/BKF0r8.png" alt="BKF0r8.png" /></a></p></li><li><p>输入级需求和特点</p><ul><li>高输入阻抗</li><li>低的零点漂移</li><li>高共模抑制比</li><li>高差模放大倍数</li><li>低静态电流</li></ul><p>一般由带恒流源的差分放大器组成</p></li><li><p>中间级：</p><p>特点：有足够的放大能力</p><p>整个电路的主放大器电路的调理，一般由一级到多级直接耦合放大器组成</p></li><li><p>输出级：</p><p>特点：</p><ul><li>输出电阻小</li><li>电压线性范围宽</li><li>非线性失真小</li></ul><p>常采用互补对称输出电路，以提高集成运放的带负载能力</p></li><li><p>偏置电路</p><p>设置运放各级静态工作点</p><p>常采用电流源电路</p></li></ol><h2 id="18-01-镜像电流源"><a class="markdownIt-Anchor" href="#18-01-镜像电流源"></a> 18-01 镜像电流源</h2><ol><li><p>电流源的作用</p><ul><li>为各级放大电路提供偏流以稳定静态工作点</li><li>作为有源负载取代不易集成的大电阻</li></ul></li><li><p>对电流源电路的只要要求</p><ul><li>能输出符合要求的直流电流;</li><li>温度稳定性好</li><li>受电源电压等因素的影响小</li><li>输出电阻尽可能大</li></ul></li><li><p>如果一个电路向负载提供恒定电流（不随负载电阻的变化而变化) ,或者可以证明其输出电阻接近于无穷大，这个电路就是电流源电路</p></li><li><p>基本电流源电路</p><p><a href="https://imgchr.com/i/BKA4N4"><img src="https://s1.ax1x.com/2020/10/26/BKA4N4.png" alt="BKA4N4.png" /></a></p><p>直流电阻：$R_{CE}=U_{CQ}/I_{CQ} $，小</p><p>交流电阻：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>≈</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><msub><mi>r</mi><mrow><mi>c</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">R \approx (1+ \beta)r_{ce}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，大</p></li><li><p>镜像电流源</p><p><a href="https://imgchr.com/i/BKeTIO"><img src="https://s1.ax1x.com/2020/10/26/BKeTIO.png" alt="BKeTIO.png" /></a></p><p><a href="https://imgchr.com/i/BKmAQs"><img src="https://s1.ax1x.com/2020/10/26/BKmAQs.png" alt="BKmAQs.png" /></a></p><p>输出电阻</p><p><a href="https://imgchr.com/i/BKmYex"><img src="https://s1.ax1x.com/2020/10/26/BKmYex.png" alt="BKmYex.png" /></a></p><p>优点</p><p><a href="https://imgchr.com/i/BKm4pQ"><img src="https://s1.ax1x.com/2020/10/26/BKm4pQ.png" alt="BKm4pQ.png" /></a></p><p>缺点</p><ul><li>输出电流与基准电流存在误差</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>B</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{BE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>导致<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>O</mi></msub></mrow><annotation encoding="application/x-tex">I_O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的热稳定性下降</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">I_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>O</mi></msub></mrow><annotation encoding="application/x-tex">I_O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）受电源变化的影响大，故对电源稳定度要求较高</li><li>适用于较大工作电流（mA数量级)的场合。若要获取小电流，则须使用大阻值的R，集成难度大</li><li>输出电阻不够大，稳定度不高</li></ul></li></ol><h2 id="18-02-其他类型的电流源"><a class="markdownIt-Anchor" href="#18-02-其他类型的电流源"></a> 18-02 其他类型的电流源</h2><ol><li><p>精密镜像电流源</p><p><a href="https://imgchr.com/i/BKlSwn"><img src="https://s1.ax1x.com/2020/10/26/BKlSwn.png" alt="BKlSwn.png" /></a></p><p><a href="https://imgchr.com/i/BKNVde"><img src="https://s1.ax1x.com/2020/10/26/BKNVde.png" alt="BKNVde.png" /></a></p><p>通过控制<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>E</mi><mn>3</mn></mrow></msub></mrow><annotation encoding="application/x-tex">I_{E3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>达到控制<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>B</mi><mn>3</mn></mrow></msub></mrow><annotation encoding="application/x-tex">I_{B3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的目的</p></li><li><p>比例镜像电流源</p><p><a href="https://imgchr.com/i/BKdpGj"><img src="https://s1.ax1x.com/2020/10/26/BKdpGj.png" alt="BKdpGj.png" /></a></p><p><a href="https://imgchr.com/i/BKdsw8"><img src="https://s1.ax1x.com/2020/10/26/BKdsw8.png" alt="BKdsw8.png" /></a></p></li><li><p>微电流源</p><p><a href="https://imgchr.com/i/BK02Mn"><img src="https://s1.ax1x.com/2020/10/26/BK02Mn.png" alt="BK02Mn.png" /></a></p><p><a href="https://imgchr.com/i/BKBCzd"><img src="https://s1.ax1x.com/2020/10/26/BKBCzd.png" alt="BKBCzd.png" /></a></p><p>例题</p><p><a href="https://imgchr.com/i/BKDp7V"><img src="https://s1.ax1x.com/2020/10/26/BKDp7V.png" alt="BKDp7V.png" /></a></p></li><li><p>其他改进型电流源</p><p><a href="https://imgchr.com/i/BKDB9g"><img src="https://s1.ax1x.com/2020/10/26/BKDB9g.png" alt="BKDB9g.png" /></a></p></li><li><p>多路电流源</p><p>实际应用中，可以用一个基准电流获得多个不同的输出电流，以适应各级需要</p><p><a href="https://imgchr.com/i/BKDvCD"><img src="https://s1.ax1x.com/2020/10/26/BKDvCD.png" alt="BKDvCD.png" /></a></p></li><li><p>电流源符号</p><p><a href="https://imgchr.com/i/BKrA58"><img src="https://s1.ax1x.com/2020/10/26/BKrA58.png" alt="BKrA58.png" /></a></p></li></ol><h2 id="18-03-电流源的应用"><a class="markdownIt-Anchor" href="#18-03-电流源的应用"></a> 18-03 电流源的应用</h2><ol><li><p>有源负载共射放大电路</p><p><a href="https://imgchr.com/i/BK2txO"><img src="https://s1.ax1x.com/2020/10/26/BK2txO.png" alt="BK2txO.png" /></a></p><p><a href="https://imgchr.com/i/BK2ase"><img src="https://s1.ax1x.com/2020/10/26/BK2ase.png" alt="BK2ase.png" /></a></p></li><li><p>有源负载共集放大电路</p><p><a href="https://imgchr.com/i/BK2cz8"><img src="https://s1.ax1x.com/2020/10/26/BK2cz8.png" alt="BK2cz8.png" /></a></p></li><li><p>作为输入差分放大电路的射极电阻以提高共模抑制比</p></li></ol><h2 id="19-01-差分放大电路的结构和工作原理"><a class="markdownIt-Anchor" href="#19-01-差分放大电路的结构和工作原理"></a> 19-01 差分放大电路的结构和工作原理</h2><ol><li><p>抑制零点漂移是制作高质量集成运放的一个重要问题</p></li><li><p>第一级的漂移影响最大，对放大电路的总漂移起着决定性作用</p></li><li><p>差分放大电路基本结构</p><p><a href="https://imgchr.com/i/BDP6US"><img src="https://s1.ax1x.com/2020/11/02/BDP6US.jpg" alt="BDP6US.jpg" /></a></p></li><li><p>静态分析</p><p><a href="https://imgchr.com/i/BDiC5D"><img src="https://s1.ax1x.com/2020/11/02/BDiC5D.jpg" alt="BDiC5D.jpg" /></a></p></li><li><p>动态分析</p><ul><li><p>共模信号</p><p>理想情况：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>u</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">u_{o1}=u_{o2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>双端输出：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>o</mi></msub><mo>=</mo><msub><mi>u</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>u</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">u_o=u_{o1}-u_{o2}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p></li></ul><p>对共模信号没有放大能力（温漂、干扰信号）</p><p>抑制共模信号能力的大小，反应了它对零点漂移的抑制水平</p><ul><li><p>差模信号</p><p>理想情况：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo>=</mo><mo>−</mo><msub><mi>u</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">u_{o1}=-u_{o2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>双端输出：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>o</mi></msub><mo>=</mo><msub><mi>u</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>u</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub><mo>=</mo><mn>2</mn><msub><mi>u</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">u_o=u_{o1}-u_{o2}=2u_{o1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li></ul><p>对差模信号有放大能力（有用信号）</p></li><li><p>一对任意信号可分解为差模信号和共模信号，即电路中差模和共模信号是共存的</p></li><li><p>差分放大电路只放大差模信号，而抑制了共模信号</p></li><li><p>增益和输出电压</p><p><a href="https://imgchr.com/i/BDnpZ9"><img src="https://s1.ax1x.com/2020/11/02/BDnpZ9.jpg" alt="BDnpZ9.jpg" /></a></p></li><li><p>共模抑制比</p><p><a href="https://mgchr.com/i/BDnwiq"><img src="https://s1.ax1x.com/2020/11/02/BDnwiq.jpg" alt="" /></a></p></li></ol><h2 id="19-02-典型差分放大电路及其分析"><a class="markdownIt-Anchor" href="#19-02-典型差分放大电路及其分析"></a> 19-02 典型差分放大电路及其分析</h2><ol><li><p>基本差分放大电路的每个管子的零漂并未受到抑制，两侧在大信号范围内做到完全抵消很困难</p></li><li><p>长尾差分放大电路</p><p><a href="https://imgchr.com/i/BDKm4I"><img src="https://s1.ax1x.com/2020/11/02/BDKm4I.jpg" alt="BDKm4I.jpg" /></a></p></li><li><p>对电阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">R_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><ul><li><p>共模信号输入响应</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>u</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">u_{i1}=u_{i2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>e</mi></msub><mn>1</mn><mo>=</mo><msub><mi>i</mi><mrow><mi>e</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">i_e1=i_{e2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mrow><mi>R</mi><mi>e</mi></mrow></msub><mo>=</mo><mn>2</mn><msub><mi>i</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">i_{Re}=2i_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">R_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对共模信号具有负反馈作用，降低共模放大倍数，抑制共模信号</p></li><li><p>差模信号输入响应</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>u</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">u_{i1}=u_{i2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>e</mi></msub><mn>1</mn><mo>=</mo><mo>−</mo><msub><mi>i</mi><mrow><mi>e</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">i_e1=-i_{e2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mrow><mi>R</mi><mi>e</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">i_{Re}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">R_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对共模信号无反馈作用，不影响差模放大倍数</p></li></ul></li><li><p>静态分析</p><p><a href="https://imgchr.com/i/BD1VQP"><img src="https://s1.ax1x.com/2020/11/02/BD1VQP.jpg" alt="BD1VQP.jpg" /></a></p></li><li><p>动态分析</p><ul><li><p>差模输入</p><p><a href="https://imgchr.com/i/BDJo4g"><img src="https://s1.ax1x.com/2020/11/02/BDJo4g.jpg" alt="BDJo4g.jpg" /></a></p></li><li><p>共模输入</p><p><a href="https://imgchr.com/i/BDtsld"><img src="https://s1.ax1x.com/2020/11/02/BDtsld.jpg" alt="BDtsld.jpg" /></a></p></li></ul></li><li><p>结论，长尾差分放大电路</p><ul><li>抑制零点漂移</li><li>抑制共模信号</li><li>放大差模信号</li><li>提高电路共模抑制比</li></ul></li></ol><h2 id="19-03-差分放大电路的四种接法"><a class="markdownIt-Anchor" href="#19-03-差分放大电路的四种接法"></a> 19-03 差分放大电路的四种接法</h2><ol><li><p>四种工作方式</p><ul><li>双入双出</li><li>双入单出</li><li>单入双出</li><li>单入单出</li></ul></li><li><p>四种工作方式比较</p><p><a href="https://imgchr.com/i/BDNVhD"><img src="https://s1.ax1x.com/2020/11/02/BDNVhD.jpg" alt="BDNVhD.jpg" /></a></p></li><li><p>结论</p><ul><li>差模放大倍数只与输出方式有关</li><li>双端输出时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">A_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与单管<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">A_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>基本相同</li><li>单端输出时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">A_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>约为双端输出时的一半</li><li>单端输出时，可以选择从不同的三极管输出，而使输出电压与输入压反相或同相</li><li>输入电阻较单管放大电路大</li><li>双端输出时的输出电阻是单端输出的2倍</li><li>双端输出时，理想情况下，共模抑制比趋近于无穷大</li><li>单端输出模式的共模抑制比不如双端输出高</li><li>单端输出时，由于引入很强的共模负反馈，两个管子仍基本工作在差分状态</li></ul></li></ol><h2 id="19-04-差分放大电路的改进"><a class="markdownIt-Anchor" href="#19-04-差分放大电路的改进"></a> 19-04 差分放大电路的改进</h2><ol><li><p>电路并非理想对称使得输入信号为零输出不为零的现象称为失调</p></li><li><p>接入调零电位器的长尾差分电路</p><p><a href="https://imgchr.com/i/Brrzz6"><img src="https://s1.ax1x.com/2020/11/02/Brrzz6.jpg" alt="Brrzz6.jpg" /></a></p><p>调零电位器小比较好</p></li><li><p>长尾电阻的选择</p><p><a href="https://imgchr.com/i/BrslwQ"><img src="https://s1.ax1x.com/2020/11/02/BrslwQ.jpg" alt="BrslwQ.jpg" /></a></p></li><li><p>带有电流源的差分放大电路</p><p><a href="https://imgchr.com/i/BrsfmD"><img src="https://s1.ax1x.com/2020/11/02/BrsfmD.jpg" alt="BrsfmD.jpg" /></a></p></li><li><p>双端变单端的转换电路</p><p><a href="https://imgchr.com/i/Bry8BD"><img src="https://s1.ax1x.com/2020/11/02/Bry8BD.jpg" alt="Bry8BD.jpg" /></a></p></li><li><p>场效应管差分放大电路的优点</p><ul><li>差模输入电阻很高</li><li>偏置电流小</li><li>功耗低</li><li>工作频率高</li></ul></li></ol><h2 id="19-05-差分放大电路的传输特性"><a class="markdownIt-Anchor" href="#19-05-差分放大电路的传输特性"></a> 19-05 差分放大电路的传输特性</h2><ol><li><p>传输特性就是放大电路输出电流(或电压)与差模输入电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>i</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{id}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的函数关系，当信号较大时，输入输出的关系可通过传输特性曲线来描述</p><p><a href="https://imgchr.com/i/Br6ZKf"><img src="https://s1.ax1x.com/2020/11/02/Br6ZKf.jpg" alt="Br6ZKf.jpg" /></a></p></li><li><p>电流传输特性</p><p><a href="https://imgchr.com/i/Br66sK"><img src="https://s1.ax1x.com/2020/11/02/Br66sK.jpg" alt="Br66sK.jpg" /></a></p></li><li><p>电压传输特性</p><p><a href="https://imgchr.com/i/Br6zzq"><img src="https://s1.ax1x.com/2020/11/02/Br6zzq.jpg" alt="Br6zzq.jpg" /></a></p></li></ol><h2 id="20-01-功率放大电路的特点和要求"><a class="markdownIt-Anchor" href="#20-01-功率放大电路的特点和要求"></a> 20-01 功率放大电路的特点和要求</h2><ol><li><p>功率放大电路需求</p><ul><li>增强带负载能力</li><li>输出较大的功率</li></ul></li><li><p>在电子系统中，模拟信号被放大后，往往要去推动一个实际的负载。如使扬声器发声、继电器动作、仪表指针偏转等。推动一个实际负载需要的功率很大。能输出较大功率的放大器称为功率放大器</p></li><li><p>功率放大器和电压放大电路的异同</p><ul><li><p>相同点</p><ul><li>本质相同：无论哪种放大电路，在负载上都同时存在输出电压、电流和功率，从能量控制的观点来看，放大电路实质上都是能量转换电路</li><li>都要依赖有源器件实现能量的控制和转换</li><li>均在输入信号作用下，将直流电源的直流功率转换为输出信号功率</li></ul></li><li><p>不同点</p><ul><li><p>任务不同</p><ul><li>电压放大电路：不失真地提高输入信号的幅度，以驱动后面的功率放大级，通常工作在小信号状态</li><li>功率放大电路：信号不失真或轻度失真的条件下提高输出功率，通常工作在大信号状态</li></ul></li><li><p>指标不同</p><ul><li>电压放大电路：电压放大倍数、输入电阻、输出电阻等</li><li>功率放大电路：主要指标是功率、效率等</li></ul></li><li><p>研究方法不同</p><ul><li>电压放大电路：图解法、微变等效电路法</li><li>功率放大电路：图解法</li></ul></li><li><p>晶体管工作状态不同</p><p>在小信号电压放大电路中，静态工作点较高，晶体管通常工作在甲类状态，而在功率放大电路中，为了获得更高的输出功率和效率，晶体管通常工作在乙类或甲乙类。</p></li></ul></li></ul></li><li><p>功率放大器的要求</p><ul><li><p>能够输出较大的功率</p><p>为了使负载获得尽可能大的功率，功放电路中电流、电压要求都比较大，其中的半导体器件通常工作在极限状态下。为了保证管子安全工作，要求晶体管电流电压不能超过晶体管的极限值: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>M</mi></mrow></msub><mo separator="true">,</mo><msub><mi>U</mi><mrow><mi>C</mi><mi>M</mi></mrow></msub><mo separator="true">,</mo><msub><mi>P</mi><mrow><mi>C</mi><mi>M</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CM},U_{CM},P_{CM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>具有较高的功率转换效率（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span></span></span></span>）</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>D</mi></msub><mo>=</mo><msub><mi>P</mi><mi>C</mi></msub><mo>+</mo><msub><mi>P</mi><mrow><mi>o</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_D=P_C+P_{omax}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>η</mi><mo>=</mo><mfrac><msub><mi>P</mi><mrow><mi>o</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><msub><mi>P</mi><mi>D</mi></msub></mfrac><mo>×</mo><mn>100</mn><mi mathvariant="normal">%</mi><mo>=</mo><mfrac><msub><mi>P</mi><mrow><mi>o</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mrow><msub><mi>P</mi><mrow><mi>o</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>+</mo><msub><mi>P</mi><mi>C</mi></msub></mrow></mfrac><mo>×</mo><mn>100</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">\eta =\frac{P_{omax}}{P_D} \times 100 \%=\frac{P_{omax}}{P_{omax}+P_C} \times 100 \%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3337359999999998em;vertical-align:-0.44530499999999995em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44530499999999995em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3337359999999998em;vertical-align:-0.44530499999999995em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44530499999999995em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>o</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{omax}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：负载上得到的交流信号功率</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>D</mi></msub></mrow><annotation encoding="application/x-tex">P_D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：电源提供的直流功率</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">P_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：管耗</p><p>转换效率是功率放大器的重要指标之一</p></li><li><p>具有较小的非线性失真<br />输出功率越大，相应的动态电压电流越大，器件非线性特性引起的非线性失真也越大</p></li><li><p>要考虑功率管的散热问题</p><p>功放管工作在大信号极限状态，选择功率管要注意不能超过其极限参数，留有裕量，并考虑过电压和过电流保护措施，以及器件的散热问题</p></li></ul></li><li><p>功率放大电路研究的问题</p><ul><li>结构问题：解决效率和失真之间的矛盾</li><li>性能问题：功率和效率</li><li>安全问题：晶体管的选用</li></ul></li></ol><h2 id="20-02-功率放大电路的指标和分类"><a class="markdownIt-Anchor" href="#20-02-功率放大电路的指标和分类"></a> 20-02 功率放大电路的指标和分类</h2><ol><li><p>功率放大电路的主要指标参数</p><p><a href="https://imgchr.com/i/BpWOaR"><img src="https://s1.ax1x.com/2020/10/20/BpWOaR.png" alt="BpWOaR.png" /></a></p></li><li><p>假设集电极瞬时电流和电压分别为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>c</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i_c(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>c</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u_{ce}(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">P_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>C</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>T</mi></mfrac><msubsup><mo>∫</mo><mn>0</mn><mi>T</mi></msubsup><mrow><msub><mi>i</mi><mi>c</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msub><mi>u</mi><mrow><mi>c</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow></mrow><annotation encoding="application/x-tex">P_C=\frac{1}{T} \int_0^T{i_c(t)u_{ce}(t)dt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.392051em;vertical-align:-0.35582em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.036231em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span></span></p></li><li><p>根据晶体管在周期信号周期内导通的时间不同，可以将功率放大电路分为甲类、乙类、甲乙类和丙类等</p></li><li><p>甲类功放</p><p><a href="https://imgchr.com/i/BpfheH"><img src="https://s1.ax1x.com/2020/10/20/BpfheH.png" alt="BpfheH.png" /></a></p><p><a href="https://imgchr.com/i/BpfbSf"><img src="https://s1.ax1x.com/2020/10/20/BpfbSf.png" alt="BpfbSf.png" /></a></p><p><a href="https://imgchr.com/i/BphZ79"><img src="https://s1.ax1x.com/2020/10/20/BphZ79.png" alt="BphZ79.png" /></a></p><p><a href="https://imgchr.com/i/BphMp6"><img src="https://s1.ax1x.com/2020/10/20/BphMp6.png" alt="BphMp6.png" /></a></p></li><li><p>甲乙类功放</p><p><a href="https://imgchr.com/i/BphJ7d"><img src="https://s1.ax1x.com/2020/10/20/BphJ7d.png" alt="BphJ7d.png" /></a></p></li><li><p>乙类功放</p><p><a href="https://imgchr.com/i/BphoB4"><img src="https://s1.ax1x.com/2020/10/20/BphoB4.png" alt="BphoB4.png" /></a></p></li><li><p>丙类功放</p><p><a href="https://imgchr.com/i/Bp4pHH"><img src="https://s1.ax1x.com/2020/10/20/Bp4pHH.png" alt="Bp4pHH.png" /></a></p></li><li><p>丁类功放</p><p>使管子工作在开关状态,对调制后的脉冲信号进行功率放大，利用晶体管的高速开关特性和低的饱和压降的特点，其效率很高,理论.上可达100%，实际可达90%</p></li><li><p>比较</p><p><a href="https://imgchr.com/i/Bp5Ao9"><img src="https://s1.ax1x.com/2020/10/20/Bp5Ao9.png" alt="Bp5Ao9.png" /></a></p></li></ol><h2 id="20-03-乙类推挽功率放大电路的工作原理"><a class="markdownIt-Anchor" href="#20-03-乙类推挽功率放大电路的工作原理"></a> 20-03 乙类推挽功率放大电路的工作原理</h2><ol><li><p>乙类功率放大电路的特点</p><ul><li>只在有信号时电源才提供电流</li><li>把电源提供的能量大部分用到负载上</li><li>提高整体效率</li></ul></li><li><p>变压器耦合乙类推挽功放</p><p><a href="https://imgchr.com/i/BpODTf"><img src="https://s1.ax1x.com/2020/10/20/BpODTf.png" alt="BpODTf.png" /></a></p><p>优点:输入为零时,静态功耗等于零,效率高,可实现阻抗匹配</p><p>缺点:体积大,成本高,低频高频特性差,易产生自自激振荡，难以集成化</p></li><li><p>乙类互补对称式功放</p><p>互补对称：</p><p>电路中采用两只晶体管</p><p>NPN、PNP各一只</p><p>两管特性一致</p></li><li><p>互补对称功放</p><ul><li>无输出变压器形式（OTL电路）</li><li>无输出电容形式（OCL电路）</li></ul></li><li><p>OCL电路</p><p><a href="https://imgchr.com/i/BpXmAf"><img src="https://s1.ax1x.com/2020/10/20/BpXmAf.png" alt="BpXmAf.png" /></a></p><ul><li>两管互补对称</li><li>双电源供电</li><li>静态时，两管静态工作点为0</li></ul><p><a href="https://imgchr.com/i/BpXHVP"><img src="https://s1.ax1x.com/2020/10/20/BpXHVP.png" alt="BpXHVP.png" /></a></p><p>优点：输出功率大，失真小，保证度高</p><p>缺点：使用两组电源，成本高</p></li><li><p>OTL电路</p><p><a href="https://imgchr.com/i/BpjHy9"><img src="https://s1.ax1x.com/2020/10/20/BpjHy9.png" alt="BpjHy9.png" /></a></p><p><a href="https://imgchr.com/i/Bpv9QH"><img src="https://s1.ax1x.com/2020/10/20/Bpv9QH.png" alt="Bpv9QH.png" /></a></p></li><li><p>变压器耦合、互补推挽功放的比较</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">变压器耦合</th><th style="text-align:center">OTL</th><th style="text-align:center">OCL</th></tr></thead><tbody><tr><td style="text-align:center">电源</td><td style="text-align:center">单电源供电</td><td style="text-align:center">单电源供电</td><td style="text-align:center">互补</td></tr><tr><td style="text-align:center">晶体管类型</td><td style="text-align:center">相同</td><td style="text-align:center">互补</td><td style="text-align:center">互补</td></tr><tr><td style="text-align:center">低频响应</td><td style="text-align:center">差</td><td style="text-align:center">差</td><td style="text-align:center">好</td></tr><tr><td style="text-align:center">体积</td><td style="text-align:center">大</td><td style="text-align:center">小</td><td style="text-align:center">小</td></tr><tr><td style="text-align:center">效率</td><td style="text-align:center">低</td><td style="text-align:center">高</td><td style="text-align:center">高</td></tr></tbody></table></li></ol><h2 id="20-04-ocl功率放大电路性能分析"><a class="markdownIt-Anchor" href="#20-04-ocl功率放大电路性能分析"></a> 20-04 OCL功率放大电路性能分析</h2><ol><li><p>静态分析</p><p><a href="https://imgchr.com/i/Bn8y6g"><img src="https://s1.ax1x.com/2020/10/26/Bn8y6g.png" alt="Bn8y6g.png" /></a></p></li><li><p>动态分析</p><p><a href="https://imgchr.com/i/BnJ1MD"><img src="https://s1.ax1x.com/2020/10/26/BnJ1MD.png" alt="BnJ1MD.png" /></a></p></li><li><p>性能分析</p><p><a href="https://imgchr.com/i/BnJwz8"><img src="https://s1.ax1x.com/2020/10/26/BnJwz8.png" alt="BnJwz8.png" /></a></p><p><a href="https://imgchr.com/i/BnJWWV"><img src="https://s1.ax1x.com/2020/10/26/BnJWWV.png" alt="BnJWWV.png" /></a></p><p><a href="https://imgchr.com/i/BnJjSK"><img src="https://s1.ax1x.com/2020/10/26/BnJjSK.png" alt="BnJjSK.png" /></a></p><p><a href="https://imgchr.com/i/BnYeOg"><img src="https://s1.ax1x.com/2020/10/26/BnYeOg.png" alt="BnYeOg.png" /></a></p><p><a href="https://imgchr.com/i/BnYlYq"><img src="https://s1.ax1x.com/2020/10/26/BnYlYq.png" alt="BnYlYq.png" /></a></p></li></ol><h2 id="20-05-ocl电路中晶体管的选择"><a class="markdownIt-Anchor" href="#20-05-ocl电路中晶体管的选择"></a> 20-05 OCL电路中晶体管的选择</h2><ol><li><p>管耗计算公式</p><p><a href="https://imgchr.com/i/BnNkM8"><img src="https://s1.ax1x.com/2020/10/26/BnNkM8.png" alt="BnNkM8.png" /></a></p></li><li><p>两管电极管耗</p><p><a href="https://imgchr.com/i/BnN4Qf"><img src="https://s1.ax1x.com/2020/10/26/BnN4Qf.png" alt="BnN4Qf.png" /></a></p></li><li><p>晶体管选择条件限制</p><p><a href="https://imgchr.com/i/BnUTc6"><img src="https://s1.ax1x.com/2020/10/26/BnUTc6.png" alt="BnUTc6.png" /></a></p></li><li><p>OTL可以等效成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>C</mi><mi>C</mi></mrow></msub><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">V_{CC}/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msub><mi>V</mi><mrow><mi>C</mi><mi>C</mi></mrow></msub><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">-V_{CC}/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span></span></span></span>的OCL电路</p></li><li><p>OCL和OTL电路比较</p><p><a href="https://imgchr.com/i/BnwYX6"><img src="https://s1.ax1x.com/2020/10/26/BnwYX6.png" alt="BnwYX6.png" /></a></p></li></ol><h2 id="21-01-交越失真"><a class="markdownIt-Anchor" href="#21-01-交越失真"></a> 21-01 交越失真</h2><ol><li><p>交越失真现象</p><p><a href="https://imgchr.com/i/Bn09jx"><img src="https://s1.ax1x.com/2020/10/26/Bn09jx.png" alt="Bn09jx.png" /></a></p></li><li><p>解决思路：在输入端为两管加合适的正偏电压，使其工作在甲乙类。由传输特性图可见:只要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>B</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{BB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>取值合适，上下两路传输特性起始段的弯曲部分就可相互补偿，合成传输特性趋近于直线，在输入正弦电压激励下，得到不失真的输出电压。</p><p><a href="https://imgchr.com/i/BnvcY8"><img src="https://s1.ax1x.com/2020/10/26/BnvcY8.png" alt="BnvcY8.png" /></a></p></li><li><p>二极管偏置电路</p><p><a href="https://imgchr.com/i/Bnv7kV"><img src="https://s1.ax1x.com/2020/10/26/Bnv7kV.png" alt="Bnv7kV.png" /></a></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>B</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{BE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>倍增电路</p><p><a href="https://imgchr.com/i/Bnx9k6"><img src="https://s1.ax1x.com/2020/10/26/Bnx9k6.png" alt="Bnx9k6.png" /></a></p></li><li><p>二极管偏置、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>B</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{BE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>倍增电路具有热补偿功能</p><p><a href="https://imgchr.com/i/Bnxm7t"><img src="https://s1.ax1x.com/2020/10/26/Bnxm7t.png" alt="Bnxm7t.png" /></a></p></li></ol><h2 id="21-02-功率放大电路的改进"><a class="markdownIt-Anchor" href="#21-02-功率放大电路的改进"></a> 21-02 功率放大电路的改进</h2><ol><li><p>问题一：互补对称推挽电路要求两只功率管特性匹配，难以实现，解决办法：用复合管取代互补管，构成准互补推挽电路</p><p><a href="https://imgchr.com/i/BnzwVI"><img src="https://s1.ax1x.com/2020/10/26/BnzwVI.png" alt="BnzwVI.png" /></a></p></li><li><p>问题二：实际中，往往会发生异常情况。例如，负载短路，致使通过功率管的电流迅速增大，一旦超过极限参数，造成管子损坏</p><p><a href="https://imgchr.com/i/BuSVot"><img src="https://s1.ax1x.com/2020/10/26/BuSVot.png" alt="BuSVot.png" /></a></p></li><li><p>问题三</p><p><a href="https://imgchr.com/i/Bu96xO"><img src="https://s1.ax1x.com/2020/10/26/Bu96xO.png" alt="Bu96xO.png" /></a></p><p>解决办法：采用自举电路</p><p>将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">R_1R_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>接入R，接入大容量电容</p><p><a href="https://imgchr.com/i/BuCVoR"><img src="https://s1.ax1x.com/2020/10/26/BuCVoR.png" alt="BuCVoR.png" /></a></p></li></ol><h2 id="21-03-典型集成运放介绍"><a class="markdownIt-Anchor" href="#21-03-典型集成运放介绍"></a> 21-03  典型集成运放介绍</h2><ol><li><p>集成运放内部结构框图</p><p><a href="https://imgchr.com/i/BgRuVI"><img src="https://s1.ax1x.com/2020/11/04/BgRuVI.jpg" alt="BgRuVI.jpg" /></a></p><p>对于高性能、高精度等特殊集成运放，还要增加有关部分的单元电路。例如:温度控制电路、温度补偿电路、内部补偿电路、过流或过热保护电路、限流电路、稳压电路等</p></li><li><p>输入级：输入电阻大、差模放大倍数大、共模放大倍数小、输入端耐压高，并完成电平转换（即对“地”输出）</p></li><li><p>中间级：中间级是主放大器，它所采取的一切措施都是为了增大放大倍数</p></li><li><p>输出级</p></li><li><p>基准电流：基准电流产生各放大级所需的偏置电流</p></li><li><p>特点：输入电阻大、差模增益大、输出电阻小、共模抑制能力强、允许的共模输入电压高、输入端耐压高、功耗低、电源电压适应范围较宽等</p></li><li><p>集成运放的主要参数</p><p><a href="https://imgchr.com/i/BgWRXQ"><img src="https://s1.ax1x.com/2020/11/04/BgWRXQ.jpg" alt="BgWRXQ.jpg" /></a></p><p><a href="https://imgchr.com/i/BgWXnJ"><img src="https://s1.ax1x.com/2020/11/04/BgWXnJ.jpg" alt="BgWXnJ.jpg" /></a></p><p><a href="https://imgchr.com/i/BgfVHA"><img src="https://s1.ax1x.com/2020/11/04/BgfVHA.jpg" alt="BgfVHA.jpg" /></a></p></li><li><p>集成运放的符号</p><p><a href="https://imgchr.com/i/Bgfljg"><img src="https://s1.ax1x.com/2020/11/04/Bgfljg.jpg" alt="Bgfljg.jpg" /></a></p><p><a href="https://imgchr.com/i/BgftNq"><img src="https://s1.ax1x.com/2020/11/04/BgftNq.jpg" alt="BgftNq.jpg" /></a></p></li><li><p>集成运放的实际传输特性</p><p><a href="https://imgchr.com/i/Bgf6ER"><img src="https://s1.ax1x.com/2020/11/04/Bgf6ER.jpg" alt="Bgf6ER.jpg" /></a></p></li></ol><h2 id="22-01-问题的提出"><a class="markdownIt-Anchor" href="#22-01-问题的提出"></a> 22-01 问题的提出</h2><p>放大电路放大倍数不稳定，线性工作区小，频带窄，输入电阻不够高，负载能力不强，反馈是改进电路性能的有效手段之一</p><p><a href="https://imgchr.com/i/Bggie1"><img src="https://s1.ax1x.com/2020/11/04/Bggie1.jpg" alt="Bggie1.jpg" /></a></p><h2 id="22-02-反馈的基本概念"><a class="markdownIt-Anchor" href="#22-02-反馈的基本概念"></a> 22-02 反馈的基本概念</h2><ol><li><p>反馈：泛指发出的事物返回发出的起始点，产生影响，电子技术中的反馈：将电路的输出量(电压或电流)的一部分或全部通过一定的方式回送到放大电路的输入端，并对输入量(电压或电流)产生影响，这个过程称为反馈(Feedback )，要能影响其输入量（电压或电流）才算有反馈!!</p></li><li><p>信号的单向化传输</p><p><a href="https://imgchr.com/i/Bg2Stf"><img src="https://s1.ax1x.com/2020/11/04/Bg2Stf.jpg" alt="Bg2Stf.jpg" /></a></p></li><li><p>反馈的三大环节</p><p><a href="https://imgchr.com/i/BghIzT"><img src="https://s1.ax1x.com/2020/11/04/BghIzT.jpg" alt="BghIzT.jpg" /></a></p></li><li><p>反馈的基本表达式</p><p><a href="https://imgchr.com/i/Bg4kTA"><img src="https://s1.ax1x.com/2020/11/04/Bg4kTA.jpg" alt="Bg4kTA.jpg" /></a></p><p><a href="https://imgchr.com/i/Bg4mSf"><img src="https://s1.ax1x.com/2020/11/04/Bg4mSf.jpg" alt="Bg4mSf.jpg" /></a></p><p><a href="https://imgchr.com/i/Bg4lwj"><img src="https://s1.ax1x.com/2020/11/04/Bg4lwj.jpg" alt="Bg4lwj.jpg" /></a></p></li></ol><h2 id="22-03-反馈的分类"><a class="markdownIt-Anchor" href="#22-03-反馈的分类"></a> 22-03 反馈的分类</h2><ol><li><p>对输出量取样：电压或电流，影响输入量：电压或电流，影响效果：增大或减小</p></li><li><p>正反馈和负反馈</p><p><a href="https://imgchr.com/i/BgI4JI"><img src="https://s1.ax1x.com/2020/11/04/BgI4JI.jpg" alt="BgI4JI.jpg" /></a></p><p><a href="https://imgchr.com/i/Bg71JA"><img src="https://s1.ax1x.com/2020/11/04/Bg71JA.jpg" alt="Bg71JA.jpg" /></a></p></li><li><p>负反馈将从多方面改善放大电路的性能</p></li><li><p>放大电路中引入正反馈后，会进一步加剧输出信号的变化，甚至使整个电路产生自激振荡而不能正常工作</p></li><li><p>正反馈往往用在信号发生电路中，其目的就是要电路发生自激振荡而产生所需的信号</p></li><li><p>当信号频率进入高频段或低频段时，会产生附加相移，在一定的条件下使反馈变为正反馈，甚至产生自激振荡</p></li><li><p>直流反馈:直流通路中存在的反馈称为直流反馈，闭环回路只能传递直流信号（稳定静态工作点）</p></li><li><p>交流反馈∶交流通路中存在的反馈称为交流反馈，闭环回路只能传递交流信号</p></li><li><p>交直流反馈:闭环回路既能传递交流信号，也能传递直流信号</p></li><li><p>电流反馈和电压反馈：根据反馈网络对输出量的取样对象不同，可以分为电压反馈和电流反馈</p><ul><li>反馈信号取自输出电压，叫电压反馈，电压负反馈稳定输出电压</li><li>反馈信号取自输出电流，叫电流反馈，电流负反馈稳定输出电流</li></ul></li><li><p>串联反馈和并联反馈：根据反馈信号在输入端与输入信号叠加形式的不同，可以分为串联反馈和并联反馈</p><ul><li>反馈信号与输入信号以电压形式叠加，称为串联反馈，信号源最好为恒压源，即信号源内阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">R_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越小越好</li><li>反馈信号与输入信号以电流形式叠加，称为并联反馈，信号源最好为恒流源，即信号源内阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">R_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大越好</li></ul></li><li><p>反馈分类</p><ul><li>正反馈</li><li>负反馈<ul><li>交流反馈<ul><li>电压串联负反馈</li><li>电压并联负反馈</li><li>电流串联负反馈</li><li>电流并联负反馈</li></ul></li><li>直流反馈    稳定静态工作点</li></ul></li></ul></li><li><p>四种反馈组态的比较</p><p><a href="https://imgchr.com/i/BgHrAe"><img src="https://s1.ax1x.com/2020/11/04/BgHrAe.jpg" alt="BgHrAe.jpg" /></a></p></li></ol><h2 id="22-04-反馈类型的判别"><a class="markdownIt-Anchor" href="#22-04-反馈类型的判别"></a> 22-04 反馈类型的判别</h2><ol><li>有无反馈的判断：是否有某些元件或网络，将输出信号引回到输入信号，并影响输入量</li><li>交直流反馈的判断：反馈存在于直流通路中还是交流通路中</li><li>反馈极性的判断：瞬时极性法<ul><li>假设输入信号在某瞬时的极性为（+)</li><li>沿着放大电路、反馈网络，逐级标出电路中各点的瞬时极性，直至判断出反馈信号的瞬时极性</li><li>如果反馈信号的瞬时极性使净输入减小，则为负反馈;反之为正反馈</li></ul></li><li>反馈极性快速判断<ul><li>反馈信号与输入信号加在放大器的相同输入端<ul><li>反馈信号与原输入信号瞬时极性相反——负反馈</li><li>反馈信号与原输入信号瞬时极性相同——正反馈</li></ul></li><li>反馈信号与输入信号加在放大器的不同输入端<ul><li>反馈信号与原输入信号瞬时极性相反—正反馈</li><li>反馈信号与原输入信号瞬时极性相同——负反馈</li></ul></li></ul></li><li>串联并联类型的判断<ul><li>反馈信号和输入信号接于放大器的同一输入端—并联反馈</li><li>反馈信号和输入信号接于放大器的不同输入端—串联反馈</li></ul></li><li>电压电流类型的判断<ul><li>将负载短路（未接负载时输出对地短路)，反馈量为零—电压反馈</li><li>将负载短路，反馈量仍然存在—电流反馈</li></ul></li></ol><h2 id="23-01-负反馈对放大电路性能的影响"><a class="markdownIt-Anchor" href="#23-01-负反馈对放大电路性能的影响"></a> 23-01 负反馈对放大电路性能的影响</h2><ol><li><p>提高放大倍数的稳定性</p><p><a href="https://imgchr.com/i/BgbbIe"><img src="https://s1.ax1x.com/2020/11/04/BgbbIe.jpg" alt="BgbbIe.jpg" /></a></p></li><li><p>负反馈使放大倍数下降到基本放大电路的1/(1+AF)</p></li><li><p>|1+AF|值越大，负反馈作用越强，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">A_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>也就越小</p></li><li><p>对输入电阻的影响：对输入电阻的影响仅与反馈网络和基本放大电路在输入端的接法有关，即决定于是串联反馈还是并联反馈</p><ul><li>引入串联负反馈，输入电阻变为原来的1+AF倍</li><li>引入并联负反馈，输入电阻变为原来的1/(1+AF)</li></ul></li><li><p>对输出电阻的影响：对输出电阻的影响仅与反馈网络和基本放大电路在输出端的接法有关，即决定于是电压反馈还是电流反馈</p><ul><li>引入电压负反馈，输出电阻减小到原来的1/(1+AF)</li><li>引入电流负反馈，输出电阻变为原来的1+AF倍</li></ul></li><li><p>电压负反馈稳定输出电压，使之输出趋近于恒压源</p></li><li><p>电流负反馈稳定输出电流，使之输出趋近于恒流源</p></li><li><p>展宽频带：由于负反馈可以提高放大倍数稳定性，因而对于频率不同而引起的放大倍数下降，也可以改善</p></li><li><p>引入负反馈后，带宽增大到无反馈时的1+AF倍</p></li><li><p>减小非线性失真：注意:负反馈只能减小反馈环内的失真</p></li><li><p>噪声性能不变：同减小非线性失真一样，引入负反馈可减小噪声，负反馈在减小噪声的同时，有用信号以同样的倍数在减小，其信噪比不变，所以引入负反馈放大器噪声性能不变</p></li><li><p>负反馈对放大器性能的影响主要表现为</p><ul><li><p>降低增益</p></li><li><p>提高增益稳定性（或减小增益灵敏度）</p></li><li><p>改变电路输入，减小输出电阻</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">串联电压</th><th style="text-align:center">串联电流</th><th style="text-align:center">并联电压</th><th style="text-align:center">并联电流</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">R_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">增大</td><td style="text-align:center">增大</td><td style="text-align:center">减小</td><td style="text-align:center">减小</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">R_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">减小</td><td style="text-align:center">增大</td><td style="text-align:center">减小</td><td style="text-align:center">增大</td></tr></tbody></table></li><li><p>减小频率失真（或扩展通频带）</p></li><li><p>减小非线性失真</p></li></ul></li></ol><h2 id="23-02-按需引入反馈"><a class="markdownIt-Anchor" href="#23-02-按需引入反馈"></a> 23-02 按需引入反馈</h2><ol><li><p>放大电路设计时引入负反馈的一般原则：</p><ul><li><p>根据需影响的信号对象确定交直流反馈</p><ul><li>为了稳定静态工作点应该引入直流负反馈</li><li>为了改善电路的动态性能，应该引入交流负反馈</li></ul></li><li><p>根据信号源的性质确定串并联负反馈</p><ul><li>当信号源是恒压源或内阻很小的电压源时应该引入串联负反馈</li><li>当信号源是恒流源或内阻很大的电流源时应该引入并联负反馈</li></ul></li><li><p>根据负载对放大电路的要求确定电压电流负反馈</p><ul><li>若需要稳定的电压输出或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">R_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>小，应该引入电压负反馈</li><li>若需要稳定的电流输出或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">R_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大，应该引入电流负反馈</li></ul></li><li><p>根据电路对信号源拾取电流大小确定串并联负反馈∶</p><ul><li>若要求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">R_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大或索取信号源电流小，应引入串联负反馈</li><li>若要求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">R_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大或索取信号源电流大，应引入并联负反馈</li></ul></li></ul><p>根据四种组态交流负反馈放大电路的功能，选择合适的组态来实现信号的变换</p></li><li><p>欲从信号源获得更大的电流，并增强带负载能力，应在放大电路中引入何种类型负反馈? 并联电压负反馈</p></li><li><p>为了使电流信号转换成与之成稳定关系的电压信号，应引入什么反馈? 电压并联负反馈</p></li><li><p>为了使电压信号转换成与之成稳定关系的电流信号，应引入什么反馈? 电流串联负反馈</p><p><a href="https://imgchr.com/i/BgX0FU"><img src="https://s1.ax1x.com/2020/11/05/BgX0FU.jpg" alt="BgX0FU.jpg" /></a></p></li></ol><h2 id="23-03-深度负反馈放大电路性能的估算"><a class="markdownIt-Anchor" href="#23-03-深度负反馈放大电路性能的估算"></a> 23-03 深度负反馈放大电路性能的估算</h2><ol><li><p>将T &gt;&gt;1或1+AF &gt;&gt;1称为深度负反馈条件，一般放大电路的开环增益很大，所以1+AF很大，反馈则为深度负反馈</p></li><li><p>深度负反馈放大电路的特点</p><p><a href="https://imgchr.com/i/BgXcO1"><img src="https://s1.ax1x.com/2020/11/05/BgXcO1.jpg" alt="BgXcO1.jpg" /></a></p></li><li><p>深度负反馈放大电路输入输出电阻的估算</p><p><a href="https://imgchr.com/i/B26hyd"><img src="https://s1.ax1x.com/2020/11/05/B26hyd.jpg" alt="B26hyd.jpg" /></a></p><p>上述输入和输出电阻是指反馈环内的电阻，而有些电路的电阻可能不在环内，反馈对它不产生影响，在计算时应予以考虑</p><p><a href="https://imgchr.com/i/B2c6ns"><img src="https://s1.ax1x.com/2020/11/05/B2c6ns.jpg" alt="B2c6ns.jpg" /></a></p></li><li><p>深度负反馈放大电路闭环增益的估算</p><p><a href="https://imgchr.com/i/B2cPYT"><img src="https://s1.ax1x.com/2020/11/05/B2cPYT.jpg" alt="B2cPYT.jpg" /></a></p></li><li><p>分析步骤</p><p><a href="https://imgchr.com/i/B2cE6J"><img src="https://s1.ax1x.com/2020/11/05/B2cE6J.jpg" alt="B2cE6J.jpg" /></a></p></li></ol><h2 id="23-04-负反馈放大电路的稳定性"><a class="markdownIt-Anchor" href="#23-04-负反馈放大电路的稳定性"></a> 23-04 负反馈放大电路的稳定性</h2><ol><li><p>自激振荡的现象：在不加输入信号的情况下，放大电路仍会产生一定频率的信号输出</p></li><li><p>负反馈放大电路自激振荡产生的原因：在高频区或低频区产生的附加相移达到180°，使中频区的负反馈在高频区或低频区变成了正反馈，当满足了一定的幅值条件时，便产生自激振荡</p></li><li><p>自激振荡条件</p><p><a href="https://imgchr.com/i/B2WUKg"><img src="https://s1.ax1x.com/2020/11/05/B2WUKg.jpg" alt="B2WUKg.jpg" /></a></p></li><li><p>电路稳定条件：相位裕量&gt;45°，增益裕量&gt;10dB</p></li><li><p>相位补偿：滞后补偿、超前补偿</p><ul><li>简单滞后补偿</li><li>RC滞后补偿</li><li>密勒效应补偿</li></ul></li></ol><h2 id="24-01-集成运放特性建模及分析依据"><a class="markdownIt-Anchor" href="#24-01-集成运放特性建模及分析依据"></a> 24-01 集成运放特性建模及分析依据</h2><ol><li><p>集成运放参数理想化</p><p><a href="https://imgchr.com/i/BgjCXn"><img src="https://s1.ax1x.com/2020/11/05/BgjCXn.jpg" alt="BgjCXn.jpg" /></a></p></li><li><p>集成运放理想模型</p><p><a href="https://imgchr.com/i/BgjVtU"><img src="https://s1.ax1x.com/2020/11/05/BgjVtU.jpg" alt="BgjVtU.jpg" /></a></p></li><li><p>由于实际集成运放的性能参数与理想运放十分接近，所以在分析计算时用理想运放代替实际运放所引起的误差并不大，在工程计算中是允许的，并且可以使问题的分析和计算大为简化，只有在分析误差时，才考虑运放的具体参数</p></li><li><p>理想传输特性</p><ul><li>虚短</li><li>虚断</li><li>虚地（虚短的特例）</li></ul></li><li><p>“虚地”是反相输入式放大电路的重要特点</p></li><li><p>“虚短”和“虚断”是集成运放线性应用的两个重要的分析依据，“虚短”和“虚断”并不意味着集成运放没有输入</p></li><li><p>理想运放线性应用电路的特点</p><ul><li>线性区窄</li><li>开环增益不稳定</li><li>频带窄</li></ul><p>解决：引入负反馈</p></li><li><p>将反馈信号引向反相输入端，使反馈信号抵消部分输入信号，保证在输入信号较大时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>i</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{id}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>仍然很小，在传输特性的线性范围内，从而使集成运算放大器工作在线性区。同时，扩展带宽，改变输入、输出电阻</p></li><li><p>负反馈是判断是否为线性应用的主要电路标志</p></li><li><p>理想运放非线性区（饱和区）特点：无虚短，有虚断，非线性应用中的集成运放通常工作在开环状态或引入正反馈</p></li><li><p>结论：</p><ul><li>在分析各种应用电路时，必须首先判断运放的工作区域</li><li>线性应用：有虚断、有虚短</li><li>非线性应用∶有虚断、无虚短</li><li>输出电压与负载无关分析多个运放构成的多级电路时可以分别对每个运放进行分析</li><li>分析目标∶传输特性(输入与输出信号关系特性)</li></ul></li><li><p>集成运放的应用</p><ul><li><p>线性应用</p><ul><li><p>信号运算电路</p><ul><li>比例运算</li><li>加减法运算</li><li>微积分运算</li><li>对指数运算</li></ul></li><li><p>信号转换电路</p></li><li><p>有源滤波器</p></li></ul></li><li><p>非线性应用</p><ul><li>电压比较器</li></ul></li></ul></li></ol><h2 id="24-02-比例运算"><a class="markdownIt-Anchor" href="#24-02-比例运算"></a> 24-02 比例运算</h2><ol><li><p>引入深度负反馈后，由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>f</mi></msub><mo>≈</mo><mfrac><mn>1</mn><mi>F</mi></mfrac></mrow><annotation encoding="application/x-tex">A_f \approx \frac {1}{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，输出电压和输入电压的关系基本决定于反馈网络的结构与参数，而与运算放大器本身的参数关系不大，改变输入电路和反馈电路的结构形式，就可以实现不同的线性应用</p></li><li><p>分析</p><ul><li>目的：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>o</mi></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>u</mi><mi>I</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u_o=f(u_I)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>方法：“虚短”和“虚断”是基本出发点</li><li>理想运放模型，分析误差时考虑运放的具体参数</li></ul></li><li><p>反相比例运算</p><p><a href="https://imgchr.com/i/BRLbv9"><img src="https://s1.ax1x.com/2020/11/05/BRLbv9.jpg" alt="BRLbv9.jpg" /></a></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>o</mi></msub><mo>=</mo><mo>−</mo><mfrac><msub><mi>R</mi><mi>f</mi></msub><msub><mi>R</mi><mn>1</mn></msub></mfrac><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_o=- \frac{R_f}{R_1} u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4365109999999999em;vertical-align:-0.44509999999999994em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9914109999999998em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.00773em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.51308em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.00773em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29011428571428566em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">u_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>极性相反</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{uf}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>只与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">R_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">R_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>有关，与运放本身参数无关</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|A_{uf}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span>可大于1，也可等于1或小于1</p><p>输入电阻较小，对信号源的负载能力有一定的要求</p><p>输出电阻小，带负载能力强</p><p>存在“虚地”，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>I</mi><mi>C</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">u_{IC}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>C</mi></msub><mi>M</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">K_CMR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span>的要求低</p></li><li><p>问题</p><p><a href="https://imgchr.com/i/BWPOAJ"><img src="https://s1.ax1x.com/2020/11/05/BWPOAJ.jpg" alt="BWPOAJ.jpg" /></a></p></li><li><p>同相比例运算电路</p><p><a href="https://imgchr.com/i/BWiI5d"><img src="https://s1.ax1x.com/2020/11/05/BWiI5d.jpg" alt="BWiI5d.jpg" /></a></p><p><a href="https://imgchr.com/i/BWibxP"><img src="https://s1.ax1x.com/2020/11/05/BWibxP.jpg" alt="BWibxP.jpg" /></a></p></li><li><p>电压跟随器</p><p><a href="https://imgchr.com/i/BWFKR1"><img src="https://s1.ax1x.com/2020/11/05/BWFKR1.jpg" alt="BWFKR1.jpg" /></a></p><p>电压跟随器输出电压等于输入电压幅度，并对前级电路呈高阻状态，对后级电路呈低阻状态，因而对前后级电路起到“隔离”作用</p></li><li><p>反相输入比例和同相输入比例比较</p><p><a href="https://imgchr.com/i/BWFRWn"><img src="https://s1.ax1x.com/2020/11/05/BWFRWn.jpg" alt="BWFRWn.jpg" /></a></p></li></ol><h2 id="24-03-加减运算"><a class="markdownIt-Anchor" href="#24-03-加减运算"></a> 24-03 加减运算</h2><ol><li><p>反相加法</p><p><a href="https://imgchr.com/i/BWAJCd"><img src="https://s1.ax1x.com/2020/11/05/BWAJCd.jpg" alt="BWAJCd.jpg" /></a></p><p>从不同输入端看进去的输入电阻不同</p><p>存在“虚地”，运算精度受器件性能影响较小</p><p>改变某一电路的输入电阻，可调节电路的比例关系，而不影响其它路的比例关系，调节方便</p><p>可方便的扩展到多个输入电压相加</p></li><li><p>同相加法</p><p><a href="https://imgchr.com/i/BWVElR"><img src="https://s1.ax1x.com/2020/11/05/BWVElR.jpg" alt="BWVElR.jpg" /></a></p></li><li><p>减法运算电路（差分放大器）</p><p><a href="https://imgchr.com/i/BWVN0f"><img src="https://s1.ax1x.com/2020/11/05/BWVN0f.jpg" alt="BWVN0f.jpg" /></a></p><p>元件少，成本低</p><p>电路存在共模输入，集成运放的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mrow><mi>C</mi><mi>M</mi><mi>R</mi></mrow></msub></mrow><annotation encoding="application/x-tex">K_{CMR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对运算精度有影响</p><p>阻值的计算和调整不方便</p><p>每个信号源的输入电阻都较小</p></li><li><p>差分放大器改进</p><p><a href="https://imgchr.com/i/BWev6A"><img src="https://s1.ax1x.com/2020/11/05/BWev6A.jpg" alt="BWev6A.jpg" /></a></p></li><li><p>仪表放大器</p><p><a href="https://imgchr.com/i/BWmApQ"><img src="https://s1.ax1x.com/2020/11/05/BWmApQ.jpg" alt="BWmApQ.jpg" /></a></p><p><a href="https://imgchr.com/i/BWmQtU"><img src="https://s1.ax1x.com/2020/11/05/BWmQtU.jpg" alt="BWmQtU.jpg" /></a></p></li></ol><h2 id="24-04-微积分运算"><a class="markdownIt-Anchor" href="#24-04-微积分运算"></a> 24-04 微积分运算</h2><ol><li><p>反相积分运算电路</p><p><a href="https://imgchr.com/i/BWKXUP"><img src="https://s1.ax1x.com/2020/11/05/BWKXUP.jpg" alt="BWKXUP.jpg" /></a></p><p>与RC积分电路相比，运放所构成的有源积分电路，由于充电电流基本恒定，因此其积分曲线的线性度较好</p></li><li><p>积分电路应用</p><p><a href="https://imgchr.com/i/BWM6G8"><img src="https://s1.ax1x.com/2020/11/05/BWM6G8.jpg" alt="BWM6G8.jpg" /></a></p><p><a href="https://imgchr.com/i/BWMTiV"><img src="https://s1.ax1x.com/2020/11/05/BWMTiV.jpg" alt="BWMTiV.jpg" /></a></p><p><a href="https://imgchr.com/i/BWMOsJ"><img src="https://s1.ax1x.com/2020/11/05/BWMOsJ.jpg" alt="BWMOsJ.jpg" /></a></p></li><li><p>其他积分电路</p><p><a href="https://imgchr.com/i/BWMxd1"><img src="https://s1.ax1x.com/2020/11/05/BWMxd1.jpg" alt="BWMxd1.jpg" /></a></p></li><li><p>反相微分电路</p><p><a href="https://imgchr.com/i/BWQlQg"><img src="https://s1.ax1x.com/2020/11/05/BWQlQg.jpg" alt="BWQlQg.jpg" /></a></p><p>抗干扰能力较差：高频干扰信号使得运放出现阻塞现象，不能正常工作</p><p>易引起自激振荡：滞后效应与运放内部的相位滞后作用叠加，很容易满足自激振荡条件，造成电路不稳定</p></li><li><p>实用微分电路</p><p><a href="https://imgchr.com/i/BWl81O"><img src="https://s1.ax1x.com/2020/11/05/BWl81O.jpg" alt="BWl81O.jpg" /></a></p></li><li><p>PID调节器</p><p><a href="https://imgchr.com/i/BWlxC6"><img src="https://s1.ax1x.com/2020/11/05/BWlxC6.jpg" alt="BWlxC6.jpg" /></a></p></li></ol><h2 id="24-05-其它信号运算电路"><a class="markdownIt-Anchor" href="#24-05-其它信号运算电路"></a> 24-05 其它信号运算电路</h2><ol><li><p>对数运算电路</p><p><a href="https://imgchr.com/i/BW8sgK"><img src="https://s1.ax1x.com/2020/11/05/BW8sgK.jpg" alt="BW8sgK.jpg" /></a></p><p><a href="https://imgchr.com/i/BW82HH"><img src="https://s1.ax1x.com/2020/11/05/BW82HH.jpg" alt="BW82HH.jpg" /></a></p></li><li><p>改进的对数运算电路</p><p><a href="https://imgchr.com/i/BW8Tv8"><img src="https://s1.ax1x.com/2020/11/05/BW8Tv8.jpg" alt="BW8Tv8.jpg" /></a></p></li><li><p>指数运算</p><p><a href="https://imgchr.com/i/BW8xCq"><img src="https://s1.ax1x.com/2020/11/05/BW8xCq.jpg" alt="BW8xCq.jpg" /></a></p></li><li><p>由对数和指数运算电路实现乘法或除法运算电路</p><p><a href="https://imgchr.com/i/BWGe8x"><img src="https://s1.ax1x.com/2020/11/05/BWGe8x.jpg" alt="BWGe8x.jpg" /></a></p><p><a href="https://imgchr.com/i/BWGQqe"><img src="https://s1.ax1x.com/2020/11/05/BWGQqe.jpg" alt="BWGQqe.jpg" /></a></p></li><li><p>模拟乘法器</p><p>是实现两个模拟信号相乘的器件，是一种多用途、通用性很强的集成电路</p><p>广泛应用于乘法、除法、乘方、开方等模拟运算，同时也广泛应用于信号调制、解调、混频、倍频、鉴相等领域</p><p>基本原理</p><p><a href="https://imgchr.com/i/BWJYTJ"><img src="https://s1.ax1x.com/2020/11/05/BWJYTJ.jpg" alt="BWJYTJ.jpg" /></a></p><p>扩展及符号</p><p><a href="https://imgchr.com/i/BWJwSx"><img src="https://s1.ax1x.com/2020/11/05/BWJwSx.jpg" alt="BWJwSx.jpg" /></a></p></li><li><p>乘法器应用</p><p><a href="https://imgchr.com/i/BWJDOO"><img src="https://s1.ax1x.com/2020/11/05/BWJDOO.jpg" alt="BWJDOO.jpg" /></a></p><p><a href="https://imgchr.com/i/BWJgkd"><img src="https://s1.ax1x.com/2020/11/05/BWJgkd.jpg" alt="BWJgkd.jpg" /></a></p><p><a href="https://imgchr.com/i/BWJRfI"><img src="https://s1.ax1x.com/2020/11/05/BWJRfI.jpg" alt="BWJRfI.jpg" /></a></p></li></ol><h2 id="24-06-集成运放参数对运算精度的影响"><a class="markdownIt-Anchor" href="#24-06-集成运放参数对运算精度的影响"></a> 24-06 集成运放参数对运算精度的影响</h2><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{od}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>i</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">R_{id}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">R_{od}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为有限值时，反相放大器的实际增益与理想值之间的偏差与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{od}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>密切相关，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{od}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大，误差越小</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{od}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大，引入的负反馈就越接近深度负反馈，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>A</mi><mrow><mi>u</mi><mi>f</mi></mrow><mo mathvariant="normal">′</mo></msubsup></mrow><annotation encoding="application/x-tex">A_{uf}&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1711079999999998em;vertical-align:-0.4192159999999999em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192159999999999em;"><span></span></span></span></span></span></span></span></span></span>就越接近<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{uf}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>i</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">R_{id}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大，误差越小</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{od}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为有限值时，同相放大器的实际增益与理想值之间的偏差取决于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{uf}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{od}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的比值，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{od}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大，误差越小</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mrow><mi>C</mi><mi>M</mi><mi>R</mi></mrow></msub></mrow><annotation encoding="application/x-tex">K_{CMR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大，同相放大器运算精度越高</li><li>失调电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>I</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{IO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、失调电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>I</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{IO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和偏置电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>I</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{IB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>带来的误差</li><li>利用运放自带的调零电路，输入端增加补偿电路</li></ol><h2 id="25-01-滤波器基本概念"><a class="markdownIt-Anchor" href="#25-01-滤波器基本概念"></a> 25-01 滤波器基本概念</h2><ol><li><p>对信号有选择性地传输的电路称为滤波器，它能使有用信号通过而同时抑制（或大大衰减）无用频率信号</p></li><li><p>滤波器的幅频特性，通带，过渡带，阻带的概念</p></li><li><p>过渡带越窄，频率特性越陡峭，电路的选择性越好，滤波特性越好</p></li><li><p>滤波器分类：</p><ul><li><p>LPF低通滤波器</p></li><li><p>HPF高通滤波器</p></li><li><p>BPF带通滤波器</p></li><li><p>BEF带阻滤波器</p></li><li><p>APF全通滤波器</p></li></ul></li><li><p>全通滤波器主要起移相的作用</p></li><li><p>无源滤波器，由无源器件构成的滤波器</p><p><img src="https://s1.ax1x.com/2020/10/17/0LHeN6.png" alt="0LHeN6.png" /></p></li><li><p>有源滤波器：由有源器件构成的滤波器</p></li><li><p>有源滤波电路的优点</p><ul><li>输入与输出之间具有良好的隔离，滤波参数不随负载变</li><li>电路中的集成运放可引入串联电压负反馈，使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>高，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">r_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>低</li><li>除起滤波作用外，还可以放大，而且放大倍数容易调节</li></ul></li><li><p>有源滤波电路是信号处理电路，其输出电压和电流的大小受有源元件自身参数和供电电源的限制;</p></li><li><p>无源滤波电路可用于高电压大电流，如直流电源中的滤波电路</p></li><li><p>有源滤波器不宜用于高频范围</p></li><li><p>滤波电路的主要参数</p><p><a href="https://imgchr.com/i/B4uVNq"><img src="https://s1.ax1x.com/2020/11/07/B4uVNq.jpg" alt="B4uVNq.jpg" /></a></p></li></ol><h2 id="25-02-有源低通滤波器"><a class="markdownIt-Anchor" href="#25-02-有源低通滤波器"></a> 25-02  有源低通滤波器</h2><ol><li>一阶低通滤波器</li><li>二阶低通滤波器</li></ol><h2 id="25-03-其他滤波器"><a class="markdownIt-Anchor" href="#25-03-其他滤波器"></a> 25-03 其他滤波器</h2><ol><li>高通滤波器</li><li>带通滤波器</li><li>带阻滤波器</li><li>全通滤波器</li></ol><h2 id="26-01-电压比较器简介"><a class="markdownIt-Anchor" href="#26-01-电压比较器简介"></a> 26-01 电压比较器简介</h2><ol><li><p>电压比较器：对两个输入电压的大小进行比较，并根据比较结果输出高、低两个电平，反之，也可以根据输出电平的高低，判断输入信号的大小和极性</p><p><a href="https://imgchr.com/i/BWwxPg"><img src="https://s1.ax1x.com/2020/11/05/BWwxPg.jpg" alt="BWwxPg.jpg" /></a></p></li><li><p>对比分析</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">线性应用</th><th style="text-align:center">非线性应用——电压比较器</th></tr></thead><tbody><tr><td style="text-align:center">分析依据</td><td style="text-align:center">有虚短，有虚断</td><td style="text-align:center">有虚断，无虚短</td></tr><tr><td style="text-align:center">电路特征</td><td style="text-align:center">引入负反馈</td><td style="text-align:center">开环或仅引入正反馈</td></tr><tr><td style="text-align:center">描述方法</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>o</mi></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>u</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u_o=f(u_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">电压传输特性曲线</td></tr><tr><td style="text-align:center">分析方法</td><td style="text-align:center">电流方程或叠加法</td><td style="text-align:center">三W法</td></tr></tbody></table></li><li><p>电压传输特性曲线</p><p><a href="https://imgchr.com/i/BW0Qqx"><img src="https://s1.ax1x.com/2020/11/05/BW0Qqx.jpg" alt="BW0Qqx.jpg" /></a></p></li><li><p>电压比较器的分类</p><ul><li><p>单限比较器：只有一个阈值电压</p><p><a href="https://imgchr.com/i/BW0YJe"><img src="https://s1.ax1x.com/2020/11/05/BW0YJe.jpg" alt="BW0YJe.jpg" /></a></p></li><li><p>滞回比较器（迟滞比较器）：具有滞回特性</p><p>输入电压的变化方向不同，阈值电压也不同，但制人电A牛调变化使输出电压只跃变一次</p><p><a href="https://imgchr.com/i/BW0cWQ"><img src="https://s1.ax1x.com/2020/11/06/BW0cWQ.jpg" alt="BW0cWQ.jpg" /></a></p></li><li><p>窗口比较器：有两个阈值电压，输入电压单调变化时输出电压跃变两次</p><p><a href="https://imgchr.com/i/BW0RQs"><img src="https://s1.ax1x.com/2020/11/06/BW0RQs.jpg" alt="BW0RQs.jpg" /></a></p></li></ul></li></ol><h2 id="26-02-单限比较器"><a class="markdownIt-Anchor" href="#26-02-单限比较器"></a> 26-02  单限比较器</h2><ol><li><p>电压传输特新的三要素</p><ul><li>Where：输出高电平<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>O</mi><mi>H</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{OH}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和输出低电平<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>O</mi><mi>L</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{OL}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>When：门限电平<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">U_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>How输入电压过门限电平时输出电压的跃变方向</li></ul></li><li><p>Where：观察输出电路，一般由运放输出限幅电路求出</p></li><li><p>When：写出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mo>−</mo></msub></mrow><annotation encoding="application/x-tex">u_-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mo>+</mo></msub></mrow><annotation encoding="application/x-tex">u_+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>的表达式，令其相等，求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">U_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>How：结合<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的输出端子，观察<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub><mo>&gt;</mo><msub><mi>U</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">u_i&gt;U_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>U</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">u_i&lt;U_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时的输出</p></li><li><p>过零比较器</p><p><a href="https://imgchr.com/i/BhagQs"><img src="https://s1.ax1x.com/2020/11/06/BhagQs.jpg" alt="BhagQs.jpg" /></a></p></li><li><p>输入端和输出端限幅电路</p><p><a href="https://imgchr.com/i/B4MjE9"><img src="https://s1.ax1x.com/2020/11/07/B4MjE9.jpg" alt="B4MjE9.jpg" /></a></p></li><li><p>例题</p><p><a href="https://imgchr.com/i/B4QkHH"><img src="https://s1.ax1x.com/2020/11/07/B4QkHH.jpg" alt="B4QkHH.jpg" /></a></p></li><li><p>优点：结构简单、灵敏度高</p></li><li><p>缺点：输出波形不够陡、抗干扰能力差</p><p><a href="https://imgchr.com/i/B41o9I"><img src="https://s1.ax1x.com/2020/11/07/B41o9I.jpg" alt="B41o9I.jpg" /></a></p><p>解决办法：采用具有滞回特性的比较器</p></li></ol><h2 id="26-03-滞回比较器和窗口比较器"><a class="markdownIt-Anchor" href="#26-03-滞回比较器和窗口比较器"></a> 26-03 滞回比较器和窗口比较器</h2><ol><li><p>滞回比较器，引入正反馈</p><p><a href="https://imgchr.com/i/B43CvV"><img src="https://s1.ax1x.com/2020/11/07/B43CvV.jpg" alt="B43CvV.jpg" /></a></p><p><a href="https://imgchr.com/i/B43kbF"><img src="https://s1.ax1x.com/2020/11/07/B43kbF.jpg" alt="B43kbF.jpg" /></a></p><p><a href="https://imgchr.com/i/B43VUJ"><img src="https://s1.ax1x.com/2020/11/07/B43VUJ.jpg" alt="B43VUJ.jpg" /></a></p></li><li><p>窗口比较器</p><p><a href="https://imgchr.com/i/B430r8"><img src="https://s1.ax1x.com/2020/11/07/B430r8.jpg" alt="B430r8.jpg" /></a></p></li></ol><h2 id="26-04-电压比较器的应用"><a class="markdownIt-Anchor" href="#26-04-电压比较器的应用"></a> 26-04 电压比较器的应用</h2><p>用于非正弦波发生电路：输出无稳态，有两个暂态，若输出为高电平时定义为第一暂态，则输出低电平为第二暂态，基本组成：开关电路、反馈网络、定时电路</p><ol><li><p>矩形波发生电路</p><p><a href="https://imgchr.com/i/B4JodS"><img src="https://s1.ax1x.com/2020/11/07/B4JodS.jpg" alt="B4JodS.jpg" /></a></p><p>占空比可调的矩形波发生电路</p><p><a href="https://imgchr.com/i/B4Jjs0"><img src="https://s1.ax1x.com/2020/11/07/B4Jjs0.jpg" alt="B4Jjs0.jpg" /></a></p></li><li><p>三角波发生电路</p><p><a href="https://imgchr.com/i/B4YsO0"><img src="https://s1.ax1x.com/2020/11/07/B4YsO0.jpg" alt="B4YsO0.jpg" /></a></p></li><li><p>锯齿波发生器</p><p><a href="https://imgchr.com/i/B4YffJ"><img src="https://s1.ax1x.com/2020/11/07/B4YffJ.jpg" alt="B4YffJ.jpg" /></a></p></li></ol><h2 id="26-05-集成电压比较器"><a class="markdownIt-Anchor" href="#26-05-集成电压比较器"></a> 26-05 集成电压比较器</h2><ol><li><p>集成电压比较器的特点</p><ul><li>两个输出状态转换速度快，响应速度快，传输延迟时间短</li><li>内部噪声抑制技术防止参考电压输入导致的自激</li><li>驱动能力强，可以直接驱动各种负载</li><li>通常可直接驱动集成数字电路</li><li>总体增益较低，共模抑制性能相对较差</li></ul><p>集成电压比较器和集成运放不能互换使用</p></li><li><p>集成电压比较器的类型</p><ul><li>集成个数：单电压比较器、双电压比较器、四电压比较器</li><li>输出方式∶普通输出、集电极开路、互补输出</li><li>信号响应速度∶高速、中速、低速</li><li>集成制造工艺：双极型、CMOS型</li><li>性能指标：高精密、高灵敏度、低功耗、低失调等</li></ul></li><li><p>集成运放使用中的问题</p><ul><li><p>合理选用集成运放：根据实际要求选用运算放大器</p><p><a href="https://imgchr.com/i/B48sOK"><img src="https://s1.ax1x.com/2020/11/07/B48sOK.jpg" alt="B48sOK.jpg" /></a></p></li><li><p>调零：为了提高电路的运算精度，要求对失调电压和失调电流造成的误差进行补偿</p><ul><li>内部调零</li><li>外部调零</li></ul><p><a href="https://imgchr.com/i/B48cwD"><img src="https://s1.ax1x.com/2020/11/07/B48cwD.jpg" alt="B48cwD.jpg" /></a></p></li><li><p>消振：为使放大器能稳定的工作，就需外加一定的频率补偿网络，以消除自激振荡</p></li><li><p>保护电路：输入电压电流过大、输出短路及电源极性接反等原因会造成集成运放损坏，因此需要采取保护措施</p><ul><li>输入保护：利用二极管的限幅作用对输入信号幅度加以限制，以免输入信号超过额定值损坏集成运放的内部结构</li></ul><p><a href="https://imgchr.com/i/B4GC0U"><img src="https://s1.ax1x.com/2020/11/07/B4GC0U.jpg" alt="B4GC0U.jpg" /></a></p><ul><li>输出保护：利用稳压二极管将输出电压限制在一定范围内，保护输出级</li></ul><p><a href="https://imgchr.com/i/B4Ge6x"><img src="https://s1.ax1x.com/2020/11/07/B4Ge6x.jpg" alt="B4Ge6x.jpg" /></a></p><ul><li>电源反接保护：利用二极管的单向导电性防止由于电源极性接反而造成的损坏</li></ul><p><a href="https://imgchr.com/i/B4GYct"><img src="https://s1.ax1x.com/2020/11/07/B4GYct.jpg" alt="B4GYct.jpg" /></a></p></li></ul></li></ol><h2 id="27-01-直流稳压电源简介"><a class="markdownIt-Anchor" href="#27-01-直流稳压电源简介"></a> 27-01  直流稳压电源简介</h2><ol><li><p>直流稳压电源：将220V、50Hz的交流电转换成幅值稳定的直流电压(几伏或几十伏)，同时提供一定的直流电流(几安或几十安)</p></li><li><p>小功率直流稳压电源的组成：</p><ul><li>变压电路</li><li>整流电路</li><li>滤波电路</li><li>稳压电路</li></ul></li><li><p>直流稳压电源的主要技术指标</p><p>质量指标：衡量稳压电源稳定性能状况</p><p><a href="https://imgchr.com/i/Bgu139"><img src="https://s1.ax1x.com/2020/11/04/Bgu139.jpg" alt="Bgu139.jpg" /></a></p><p>稳压系数</p><p><a href="https://imgchr.com/i/Bgu2E8"><img src="https://s1.ax1x.com/2020/11/04/Bgu2E8.jpg" alt="Bgu2E8.jpg" /></a>输出电阻</p><p><a href="https://imgchr.com/i/BguIvn"><img src="https://s1.ax1x.com/2020/11/04/BguIvn.jpg" alt="BguIvn.jpg" /></a></p><p>温度系数</p><p><a href="https://imgchr.com/i/BgK6z9"><img src="https://s1.ax1x.com/2020/11/04/BgK6z9.jpg" alt="BgK6z9.jpg" /></a></p><p>纹波电压</p><p><a href="https://imgchr.com/i/BgKUrq"><img src="https://s1.ax1x.com/2020/11/04/BgKUrq.jpg" alt="BgKUrq.jpg" /></a></p><p>纹波系数</p><p><a href="https://imgchr.com/i/BgK2s1"><img src="https://s1.ax1x.com/2020/11/04/BgK2s1.jpg" alt="BgK2s1.jpg" /></a></p></li></ol><h2 id="27-02-整流电路"><a class="markdownIt-Anchor" href="#27-02-整流电路"></a> 27-02 整流电路</h2><ol><li><p>整流电路的作用：将交流电压转变为单向脉动的直流电压</p></li><li><p>整流原理：利用二极管的单向导电性</p></li><li><p>常见的整流电路：半波、全波、桥式整流</p></li><li><p>分析时可把二极管当作理想元件处理：二极管的正向导通电阻为零，反向电阻为无穷大</p></li><li><p>单相半波整流</p><ul><li>优点：结构简单，使用的元件少</li><li>缺点：仅在电源的半个周期内导通，电源利用率低，输出的直流电压成分比较低，输出波形的脉动大</li></ul><p>故半波整流只用在要求不高，输出电流较小的场合</p></li><li><p>全波整流：结构复杂，对二极管的耐压要求高</p></li><li><p>单相桥式整流的四种画法</p><p><a href="https://imgchr.com/i/BgMI00"><img src="https://s1.ax1x.com/2020/11/04/BgMI00.jpg" alt="BgMI00.jpg" /></a></p></li><li><p>单相桥式整流电路的特点</p><p>缺点：二极管用得较多</p><p>优点：输出直流电压大，纹波电压较小，晶体管所承受的最大反向电压较低，电源变压器得到了充分的利用，效率较高</p><p>整流桥∶体积小，成本低、可靠性高，使用方便</p></li><li><p>三种整流电路的性能比较</p><p><a href="https://imgchr.com/i/BgQKN8"><img src="https://s1.ax1x.com/2020/11/04/BgQKN8.jpg" alt="BgQKN8.jpg" /></a></p><p>单相桥式整流电路的总体性能优于单相半波和全波整流电路，应用最为广泛</p></li></ol><h2 id="27-03-滤波电路"><a class="markdownIt-Anchor" href="#27-03-滤波电路"></a> 27-03 滤波电路</h2><ol><li><p>滤波</p><p><a href="https://imgchr.com/i/Bg1PQH"><img src="https://s1.ax1x.com/2020/11/04/Bg1PQH.jpg" alt="Bg1PQH.jpg" /></a></p></li><li><p>电容滤波：电容滤波电路的输出电压在负载变化时波动较大，说明它的带负载能力较差，适用于输出电压较高，负载电流较小且负载变动不大的场合</p></li><li><p>电感滤波：</p><ul><li>电感L与负载<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">R_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>串联组成分压电路，L越大或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">R_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越小，输出电压和电流的脉动越小，滤波效果越好</li><li>整流管导电角较大，峰值电流很小，输出特性比较平坦，带负载能力强</li><li>缺点是电感铁芯笨重，体积大，易引起电磁干扰，输出电压没有电容滤波高</li></ul></li><li><p>LC滤波电路</p><p><a href="https://imgchr.com/i/BgdTMV"><img src="https://s1.ax1x.com/2020/11/04/BgdTMV.jpg" alt="BgdTMV.jpg" /></a></p></li><li><p>其他滤波电路</p><p><a href="https://imgchr.com/i/Bgwusf"><img src="https://s1.ax1x.com/2020/11/04/Bgwusf.jpg" alt="Bgwusf.jpg" /></a></p><p><a href="https://imgchr.com/i/Bgw1oQ"><img src="https://s1.ax1x.com/2020/11/04/Bgw1oQ.jpg" alt="Bgw1oQ.jpg" /></a></p></li><li><p>常用滤波电路的特点</p><p><a href="https://imgchr.com/i/Bg13mn"><img src="https://s1.ax1x.com/2020/11/04/Bg13mn.jpg" alt="Bg13mn.jpg" /></a></p></li></ol><h2 id="27-04-稳压电路"><a class="markdownIt-Anchor" href="#27-04-稳压电路"></a> 27-04 稳压电路</h2><ol><li><p>将不稳定的直流电压变换成稳定且可调的直流电压的电路称为稳压电路</p></li><li><p>稳压电路需要解决的问题</p><ul><li>当负载变化时，由于整流滤波电路存在内阻，因此输出直流电压将随之发生变化</li><li>当电网电压波动时，因整流电路的输出电压直接与变压器副边电压有关，因此也要相应地变化</li><li>环境温度变化时,输出电压将变化</li></ul></li><li><p>分类：线性稳压电路、开关型稳压电路</p></li><li><p>并联稳压电路</p><p><a href="https://imgchr.com/i/BgwaLT"><img src="https://s1.ax1x.com/2020/11/04/BgwaLT.jpg" alt="BgwaLT.jpg" /></a></p><p>优点：电路结构简单，使用元件少，调试方便</p><p>缺点：输出电压不可调，输出电流小</p><p>适用于输出电压固定，输出电流不大，且负载变动不大的场合</p></li><li><p>串联反馈式稳压电路</p></li><li><p>串联反馈式电路的特点：</p><ul><li>稳压性能较好</li><li>输出电压调节范围宽</li><li>输出电流较大</li><li>电源效率较低，大功率电源需设散热装置</li></ul><p>负载变动大，稳压性能要求高，输出电压可调的场合</p></li></ol><h2 id="27-05-集成稳压器"><a class="markdownIt-Anchor" href="#27-05-集成稳压器"></a> 27-05 集成稳压器</h2><ol><li><p>将串联稳压电源和保护电路集成在一起就是集成稳压器</p></li><li><p>最简单的集成稳压电源只有输入，输出和公共引出端，故称之为三端集成稳压器</p><p><a href="https://imgchr.com/i/BgB32n"><img src="https://s1.ax1x.com/2020/11/04/BgB32n.jpg" alt="BgB32n.jpg" /></a></p></li><li><p>分类</p><p><a href="https://imgchr.com/i/BgB2VO"><img src="https://s1.ax1x.com/2020/11/04/BgB2VO.jpg" alt="" /></a></p></li></ol><h2 id="28-01-正弦波振荡电路简介"><a class="markdownIt-Anchor" href="#28-01-正弦波振荡电路简介"></a> 28-01 正弦波振荡电路简介</h2><ol><li><p>正弦波振荡电路：将直流能量转换为交流能量，与放大电路不通同，它不需要外加激励信号，只要满足振荡的平衡条件就可以产生一定频率和幅度的正弦交流信号</p></li><li><p>起振条件</p><p><a href="https://imgchr.com/i/BhWer8"><img src="https://s1.ax1x.com/2020/11/06/BhWer8.jpg" alt="BhWer8.jpg" /></a></p></li><li><p>平衡条件</p><p><a href="https://imgchr.com/i/BhW2ZD"><img src="https://s1.ax1x.com/2020/11/06/BhW2ZD.jpg" alt="BhW2ZD.jpg" /></a></p></li><li><p>起振</p><p><a href="https://imgchr.com/i/BhWIzt"><img src="https://s1.ax1x.com/2020/11/06/BhWIzt.jpg" alt="BhWIzt.jpg" /></a></p></li><li><p>稳幅</p><p><a href="https://imgchr.com/i/BhWHL8"><img src="https://s1.ax1x.com/2020/11/06/BhWHL8.jpg" alt="BhWHL8.jpg" /></a></p></li><li><p>振荡电路的基本组成</p><ul><li>放大电路</li><li>反馈网络</li><li>选频网络</li><li>稳幅环节</li></ul></li></ol><h2 id="28-02-rc正弦波振荡电路"><a class="markdownIt-Anchor" href="#28-02-rc正弦波振荡电路"></a> 28-02 RC正弦波振荡电路</h2><p><a href="https://imgchr.com/i/BhwCNT"><img src="https://s1.ax1x.com/2020/11/06/BhwCNT.jpg" alt="BhwCNT.jpg" /></a></p><h2 id="28-03-lc正弦波振荡电路"><a class="markdownIt-Anchor" href="#28-03-lc正弦波振荡电路"></a> 28-03 LC正弦波振荡电路</h2><ol><li><p>几种典型LC振荡电路的比较</p><p><a href="https://imgchr.com/i/BhwqVx"><img src="https://s1.ax1x.com/2020/11/06/BhwqVx.jpg" alt="BhwqVx.jpg" /></a></p></li><li><p>电容三点式和电感三点式振荡器比较</p><p><a href="https://imgchr.com/i/Bh0pMd"><img src="https://s1.ax1x.com/2020/11/06/Bh0pMd.jpg" alt="Bh0pMd.jpg" /></a></p></li></ol><h2 id="28-04-石英晶体振荡器"><a class="markdownIt-Anchor" href="#28-04-石英晶体振荡器"></a> 28-04 石英晶体振荡器</h2><ol><li><p>要求较高的场合均采用石英晶体振荡器</p></li><li><p>石英谐振器的等效电路和频率特性</p><p><a href="https://imgchr.com/i/BhgJKO"><img src="https://s1.ax1x.com/2020/11/06/BhgJKO.jpg" alt="BhgJKO.jpg" /></a></p></li><li><p>并联型</p><p><a href="https://imgchr.com/i/BhRtNd"><img src="https://s1.ax1x.com/2020/11/06/BhRtNd.jpg" alt="BhRtNd.jpg" /></a></p></li><li><p>串联型</p><p><a href="https://imgchr.com/i/BhRsHg"><img src="https://s1.ax1x.com/2020/11/06/BhRsHg.jpg" alt="BhRsHg.jpg" /></a></p></li><li><p>石英晶体振荡器</p><ul><li>并联型晶体振荡器（等效电感）</li><li>串联型晶体振荡器（串联谐振元件）</li></ul></li><li><p>正弦波发生器小结</p><ul><li>一个过程——振荡建立和稳定过程</li><li>两个条件——相位条件和幅度条件</li><li>三种类型——RC振荡电路、LC振荡电路、石英晶体振荡电路</li><li>四个部分——放大、反馈、选频稳幅</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电子技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++四种变量命名规范</title>
      <link href="2017/12/14/C++%E5%9B%9B%E7%A7%8D%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>2017/12/14/C++%E5%9B%9B%E7%A7%8D%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<ol><li><p>大驼峰法(帕斯卡命名法)：所有单词首字母大写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> MyAge;</span><br><span class="line"><span class="keyword">char</span> MyName[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">float</span> ManHeight;</span><br></pre></td></tr></table></figure></li><li><p>小驼峰法：除第一个单词之外，其他单词首字母大写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> myAge;</span><br><span class="line"><span class="keyword">char</span> myName[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">float</span> manHeight;</span><br></pre></td></tr></table></figure></li><li><p>匈牙利命名法：变量名=属性+类型+对象描述</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hwnd ： h 是类型描述，表示句柄， wnd 是变量对象描述，表示窗口，所以 hwnd 表示窗口句柄；</span><br><span class="line">pfnEatApple ： pfn 是类型描述，表示指向函数的指针， EatApple 是变量对象描述，所以它表示指向 EatApple 函数的函数指针变量。</span><br><span class="line">g_cch ： g_ 是属性描述，表示全局变量，c 和 ch 分别是计数类型和字符类型，一起表示变量类型，这里忽略了对象描述，所以它表示一个对字符进行计数的全局变量。</span><br></pre></td></tr></table></figure><p>属性部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g_ 全局变量</span><br><span class="line">c_ 　常量</span><br><span class="line">m_ 　c++类成员变量</span><br><span class="line">s_ 　静态变量</span><br></pre></td></tr></table></figure><p>类型部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">数组 a</span><br><span class="line">指针　p</span><br><span class="line">函数　fn</span><br><span class="line">无效　v</span><br><span class="line">句柄　h</span><br><span class="line">长整型　l</span><br><span class="line">布尔　b</span><br><span class="line">浮点型（有时也指文件）　f</span><br><span class="line">双字 　dw</span><br><span class="line">字符串　 sz</span><br><span class="line">短整型　 n</span><br><span class="line">双精度浮点　d</span><br><span class="line">计数　c（通常用cnt）</span><br><span class="line">字符　ch（通常用c）</span><br><span class="line">整型　i（通常用n）</span><br><span class="line">字节　by</span><br><span class="line">字　w</span><br><span class="line">实型　r</span><br><span class="line">无符号　u</span><br></pre></td></tr></table></figure><p>描述部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">最大　Max</span><br><span class="line">最小　Min</span><br><span class="line">初始化　Init</span><br><span class="line">临时变量　T（或Temp）</span><br><span class="line">源对象　Src</span><br><span class="line">目的对象　Dest</span><br></pre></td></tr></table></figure></li><li><p>下划线法：求单词与单词之间通过下划线连接</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> my_age;</span><br><span class="line"><span class="keyword">char</span> my_name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">float</span> man_height;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++复习</title>
      <link href="2017/12/13/C++%E5%A4%8D%E4%B9%A0/"/>
      <url>2017/12/13/C++%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>C中的命名空间：在C语言中只有一个全局作用域，C语言中所有的全局标识符共享同一个作用域，标识符之间可能发生冲突 ；</p></li><li><p>C++ 中提出了命名空间的概念：命名空间将全局作用域分成不同的部分，不同命名空间中的标识符可以同名而不会发生冲突，命名空间可以相互嵌套，全局作用域也叫默认命名空间；</p></li><li><p>C++  命名空间的定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> name &#123;  …  &#125;</span><br></pre></td></tr></table></figure></li><li><p>C++  命名空间的使用：</p><ul><li><p>使用整个命名空间：using namespace name;</p></li><li><p>使用命名空间中的变量：using name::variable;</p></li><li><p>使用默认命名空间中的变量：::variable，默认情况下可以直接使用默认命名空间中的所有标识符</p></li></ul></li><li><p>C语言中无法取得register变量地址，在C++  中依然支持register关键字，C++  编译器有自己的优化方式，不使用register也可能做优化，C++ 中可以取得register变量的地址，C++ 编译器发现程序中需要取register变量的地址时，register对变量的声明变得无效；</p></li><li><p>C语言的struct定义了一组变量的集合，C编译器并不认为这是一种新的类型，C++  中的struct是一个新类型的定义声明</p></li><li><p>C++ 在C语言的基本类型系统之上增加了bool，C++ 中的bool可取的值只有true和false，理论上bool只占用一个字节， 如果多个bool变量定义在一起，可能会各占一个bit，这取决于编译器的实现，true代表真值，编译器内部用1来表示，false代表非真值，编译器内部用0来表示， bool类型只有true（非0、false（0）两个值， C++ 编译器会在赋值时将非0值转换为true，0值转换为false；</p></li><li><p>C++  中三目运算结果可以当左值；</p></li><li><p>C++ 中对const增强，不再能通过指针间接修改const修饰的值；当碰见常量声明时，在符号表中放入常量 =è问题：那有如何解释取地址，编译过程中若发现使用常量则直接以符号表中的值替换，编译过程中若发现对const使用了extern或者&amp;操作符，则给对应的常量分配存储空间（兼容C）</p></li><li><p>C语言中的const变量：const变量是只读变量，有自己的存储空间；</p></li><li><p>C++ 中的const常量：可能分配存储空间,也可能不分配存储空间 ，当const常量为全局，并且需要在其它文件中使用，会分配存储空间，当使用&amp;操作符，取const常量的地址时，会分配存储空间，当const int &amp;a = 10; const修饰引用时，也会分配存储空间；</p></li><li><p>C++ 中的const修饰的，是一个真正的常量，而不是C中变量（只读）。在const修饰的常量编译期间，就已经确定下来了；</p></li><li><p>const常量是由编译器处理的，提供类型检查和作用域检查，宏定义由预处理器处理，单纯的文本替换</p></li><li><p>练习</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> a 10</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//#undef a  # undef 卸载宏，可以卸载所有宏，也可以卸载某个宏</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    <span class="comment">//printf(&quot;b = %d\n&quot;, b);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fun1</span>();</span><br></pre></td></tr></table></figure></li><li><p>引用是C++ 的概念，C语言中没有引用的概念，不能用C的语法考虑C++ 中的引用；</p></li><li><p>引用的一般语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type&amp; name = var;</span><br></pre></td></tr></table></figure></li><li><p>普通引用在声明时必须用其它的变量进行初始化，引用作为函数参数声明时不进行初始化；</p></li><li><p>引用作为其它变量的别名而存在，因此在一些场合可以代替指针，引用相对于指针来说具有更好的可读性和实用性</p></li><li><p>引用类似于定义一个常指针指向变量，指针的指向只能指向引用变量的地址不能变；</p></li><li><p>C++ 编译器在编译过程中使用常指针作为引用的内部实现，因此引用所占用的空间大小与指针相同；</p></li><li><p>当函数返回值为引用时，若返回栈变量，不能成为其它引用的初始值，不能作为左值使用，但是返回静态变量或全局变量，可以成为其他引用的初始值，既可作为右值使用，也可作为左值使用；</p></li><li><p>用引用去接受函数的返回值，是不是乱码，关键是看返回的内存空间是不是被编译器回收了；</p></li><li><p>指针的引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTe</span><span class="params">(Teacher*  &amp;myp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">myp = (Teacher *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Teacher));</span><br><span class="line">myp-&gt;age = <span class="number">34</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">getTe2</span>(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;age:%d \n&quot;</span>, p-&gt;age);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>常引用：const引用让变量拥有只读属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">案例<span class="number">1</span>：</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = a; </span><br><span class="line"></span><br><span class="line"><span class="comment">//int *p = (int *)&amp;b;</span></span><br><span class="line">b = <span class="number">11</span>; <span class="comment">//err</span></span><br><span class="line"><span class="comment">//*p = 11; //只能用指针来改变了</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b---&gt;&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b:%d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a:%d\n&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;b:%d\n&quot;</span>, &amp;b);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">案例<span class="number">2</span>：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main41</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = a; <span class="comment">//const引用 使用变量a初始化</span></span><br><span class="line">a = <span class="number">11</span>;</span><br><span class="line"><span class="comment">//b = 12; //通过引用修改a,对不起修改不了</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTe2</span><span class="params">(<span class="keyword">const</span> Teacher1 *<span class="keyword">const</span> pt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const引用让变量(所指内存空间)拥有只读属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTe</span><span class="params">(<span class="keyword">const</span> Teacher1 &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//t.age  = 11;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main42</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher1 t1;</span><br><span class="line">t1.age = <span class="number">33</span>;</span><br><span class="line"><span class="built_in">printTe</span>(t1);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用变量对const引用初始化，用常量对const引用初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//普通引用</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br><span class="line"><span class="comment">//常量引用 ：让变量引用只读属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;c = a;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//常量引用初始化 分为两种</span></span><br><span class="line"><span class="comment">//1 用变量 初始化 常量引用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; y = x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;y:%d \n&quot;</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 用常量 初始化 常量引用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int &amp;m = 10; //引用是内存空间的别名 字面量10没有内存空间 没有方法做引用</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;m = <span class="number">10</span>; </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用的有关结论</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Const &amp; int e  相当于 const int * const e</span></span><br><span class="line"><span class="comment">//普通引用 相当于 int *const e1</span></span><br><span class="line"><span class="comment">//当使用常量（字面量）对const引用进行初始化时，C++ 编译器会为常量值分配空间，并将引用名作为这段空间的别名</span></span><br><span class="line"><span class="comment">//使用字面量对const引用初始化后，将生成一个只读变量</span></span><br></pre></td></tr></table></figure></li><li><p>综合练习</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">j</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="built_in">g</span>();</span><br><span class="line"><span class="keyword">int</span>&amp; b = <span class="built_in">g</span>();</span><br><span class="line"><span class="built_in">j</span>() = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;f() = %d\n&quot;</span>, <span class="built_in">f</span>());</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>C++中的const常量可以替代宏常数定义，推荐使用内联函数替代宏代码片段，使用inline关键字声明内联函数，内联函数声明时inline关键字必须和函数定义结合在一起，否则编译器会直接忽略内联请求；</p></li><li><p>内联函数在最终生成的代码中是没有定义的，C++编译器直接将函数体插入在函数调用的地方，内联函数没有普通函数调用时的额外开销(压栈，跳转，返回)</p></li><li><p>C++ 编译器不一定准许函数的内联请求，内联函数是一种特殊的函数，具有普通函数的特征（参数检查，返回类型等），内联函数是对编译器的一种请求，因此编译器可能拒绝这种请求，内联函数由编译器处理，直接将编译后的函数体插入调用的地方，宏代码片段 由预处理器处理， 进行简单的文本替换，没有任何编译过程，现代C++ 编译器能够进行编译优化，因此一些函数即使没有inline声明，也可能被编译器内联编译；</p></li><li><p>一些现代C++ 编译器提供了扩展语法，能够对函数进行强制内联</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((always_inline))<span class="comment">//g++属性</span></span><br></pre></td></tr></table></figure></li><li><p>C++中内联编译的限制：不能存在任何形式的循环语句 ，不能存在过多的条件判断语句，函数体不能过于庞大，不能对函数进行取址操作，函数内联声明必须在调用语句之前；</p></li><li><p>编译器对于内联函数的限制并不是绝对的，内联函数相对于普通函数的优势只是省去了函数调用时压栈，跳转和返回的开销，因此，当函数体的执行开销远大于压栈，跳转和返回所用的开销时，那么内联将无意义；</p></li><li><p>内联函数解决了带参数宏++，–操作一系列的问题</p></li><li><p>C++中可以在函数声明时为参数提供一个默认值，当函数调用时没有指定这个参数的值，编译器会自动用默认值代替；</p></li><li><p>函数默认参数的规则：只有参数列表后面部分的参数才可以提供默认参数值，一旦在一个函数调用中开始使用默认参数值，那么这个参数后的所有参数都必须使用默认参数；</p></li><li><p>函数占位参数：函数调用时，必须写够参数，占位参数只有参数类型声明，而没有参数名声明；</p></li><li><p>函数占位参数和默认参数结合起来使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果默认参数和占位参数在一起，都能调用起来</span></span><br><span class="line"><span class="built_in">func2</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">func2</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果默认参数和占位参数在一起，都能调用起来;</p></li><li><p>函数重载：用同一个函数名定义不同的函数，当函数名和不同的参数搭配时函数的含义不同；</p></li><li><p>函数重载的判断标准：函数重载至少满足下面的一个条件：</p><ul><li>参数个数不同</li><li>参数类型不同</li><li>参数顺序不同</li></ul></li><li><p>函数返回值不是函数重载的判断标准；</p></li><li><p>编译器调用重载函数的准则：</p><ul><li>将所有同名函数作为候选者</li><li>尝试寻找可行的候选函数</li><li>精确匹配实参</li><li>通过默认参数能够匹配实参</li><li>通过默认类型转换匹配实参</li><li>匹配失败</li><li>最终寻找到的可行候选函数不唯一，则出现二义性，编译失败。</li><li>无法匹配所有候选者，函数未定义，编译失败</li></ul></li><li><p>重载函数在本质上是相互独立的不同函数（静态链编）；</p></li><li><p>函数重载与默认参数在一起</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%d b:%d c:%d \n&quot;</span>, a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%d b:%d\n&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//myfunc(1, 2); //函数调用时,会产生二义性</span></span><br><span class="line"><span class="built_in">myfunc</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数重载与函数指针在一起：当使用重载函数名对函数指针进行赋值时，根据重载规则挑选与函数指针参数列表一致的候选者，严格匹配候选者的函数类型与函数指针的函数类型；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// int(int a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strlen</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*PFUNC)</span><span class="params">(<span class="keyword">int</span> a)</span></span>; <span class="comment">// int(int a)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">PFUNC p = func;</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">p</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Press enter to continue ...&quot;</span>);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>面向对象三大概念：封装、继承、多态；</p></li><li><p>封装的两层含义：把属性和方法进行封装，对属性和方法进行访问控制；</p></li><li><p>Public修饰成员变量和成员函数可以在类的内部和类的外部被访问，Private修饰成员变量和成员函数只能在类的内部被访问；</p></li><li><p>struct和class关键字区别：在用struct定义类时，所有成员的默认属性为public，在用class定义类时，所有成员的默认属性为private；</p></li><li><p>类的声明和实现分开</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;AdvCircle.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyPoint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AdvCircle c1;</span><br><span class="line">MyPoint p1;</span><br><span class="line"></span><br><span class="line">c1.<span class="built_in">setCircle</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">p1.<span class="built_in">setPoint</span>(<span class="number">7</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在圆形1  不在圆内 0</span></span><br><span class="line"><span class="keyword">int</span> tag = c1.<span class="built_in">judge</span>(p1);</span><br><span class="line"><span class="keyword">if</span> (tag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;点在圆形内&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;点在圆形外&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AdvCircle.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyPoint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvCircle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCircle</span><span class="params">(<span class="keyword">int</span> _r, <span class="keyword">int</span> _x0, <span class="keyword">int</span> _y0)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(MyPoint &amp;myp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">int</span> x0;</span><br><span class="line"><span class="keyword">int</span> y0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AdvCircle.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;AdvCircle.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyPoint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdvCircle::setCircle</span><span class="params">(<span class="keyword">int</span> _r, <span class="keyword">int</span> _x0, <span class="keyword">int</span> _y0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r = _r; x0 = _x0; y0 = _y0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AdvCircle::judge</span><span class="params">(MyPoint &amp;myp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> dd = (myp.<span class="built_in">getX1</span>() - x0 )*(myp.<span class="built_in">getX1</span>() - x0 ) + (myp.<span class="built_in">getY1</span>()-y0)* (myp.<span class="built_in">getY1</span>()-y0);</span><br><span class="line"><span class="keyword">if</span> (dd &lt;= r*r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//圆形内部</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//0点在圆外</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数分类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参数构造函数</span></span><br><span class="line"><span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带参数的构造函数</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赋值构造函数</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = _a;</span><br><span class="line">b = _b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>无参构造函数调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test t1,t2;</span><br></pre></td></tr></table></figure></li><li><p>有参构造函数的调用方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test5</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//带参数的构造函数</span></span><br><span class="line"><span class="built_in">Test5</span>(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\na:%d&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Test5</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\na:%d b:%d&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Test5 <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;  <span class="comment">//c++编译器默认调用有参构造函数 括号法 </span></span><br><span class="line">Test5 t2 = (<span class="number">20</span>, <span class="number">10</span>); <span class="comment">//c++编译器默认调用有参构造函数 等号法,括号里是逗号表达式，结果会调用一个参数的构造函数</span></span><br><span class="line">Test5 t3 = <span class="built_in">Test5</span>(<span class="number">30</span>); <span class="comment">//程序员手工调用构造函数 产生了一个对象 直接调用构造构造函数法</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象的初始化和对象的赋值是不通的概念，用一个对象初始化另一个对象会调用拷贝构造函数，但是对象赋值给另一个对象不会调用，只是简单的赋值运算，如果存在浅拷贝问题，需要对赋值运算符“=”重载；</p></li><li><p>类没有提供构造函数,c++ 编译器会自动给你提供一个默认的构造函数，类没有提供构造函数 copy构造构造函数, c++ 编译器会自动给程序员提供一个 默认的copy构造函数 ；</p></li><li><p>拷贝构造函数的调用时机（有的编译器会优化，不会调用）</p><ul><li>用一个对象去初始化另外一个对象，Test5 t2 = t1;</li><li>Test5 t2(t1);</li><li>实参传给形参时</li><li>函数返回值是匿名对象，用该匿名对象赋值给一个对象，会调用拷贝构造函数，拷贝到匿名对象，赋值给对象然后匿名对象自动析构</li><li>函数返回值是匿名对象，用该用匿名对象初始化一个对象，直接将匿名对象转为初始化的对象（改名）</li></ul></li><li><p>匿名对象的去和留，关键看，返回时如何接；</p></li><li><p>当类中没有定义构造函数时，编译器默认提供一个无参构造函数，并且其函数体为空；</p></li><li><p>当类中没有定义拷贝构造函数时，编译器默认提供一个默认拷贝构造函数，简单的进行成员变量的值复制；</p></li><li><p>当类中定义了拷贝构造函数时，c++编译器不会提供无参数构造函数；</p></li><li><p>当类中定义了任意的非拷贝构造函数（即：当类中提供了有参构造函数或无参构造函数），c++编译器不会提供默认无参构造函数；</p></li><li><p>默认拷贝构造函数成员变量简单赋值；</p></li><li><p>只要你写了构造函数就必须用；</p></li><li><p>默认复制构造函数可以完成对象的数据成员值简单的复制，对象的数据资源是由指针指示的堆时，默认复制构造函数仅作指针值复制，浅拷贝</p></li><li><p>浅拷贝程序C++提供的解决方法：显式提供copy构造函数，显式操作重载=号操作，不使用编译器提供的浅copy；</p></li><li><p>如果我们有一个类成员，它本身是一个类或者是一个结构，而且这个成员它只有一个带参数的构造函数，没有默认构造函数。这时要对这个类成员进行初始化，就必须调用这个类成员的带参数的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> _a)</span><br><span class="line">&#123;</span><br><span class="line">a = _a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;构造函数&quot;</span> &lt;&lt; <span class="string">&quot;a&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; <span class="string">&quot;a&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 构造函数的初始化列表  解决: 在B类中 组合了一个 A类对象 (A类设计了构造函数)</span></span><br><span class="line"><span class="comment">//根据构造函数的调用规则 设计A的构造函数, 必须要用;没有机会初始化A</span></span><br><span class="line"><span class="comment">//新的语法  Constructor::Contructor() : m1(v1), m2(v1,v2), m3(v3)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="keyword">int</span> _b1, <span class="keyword">int</span> _b2) : <span class="built_in">a1</span>(<span class="number">1</span>), <span class="built_in">a2</span>(<span class="number">2</span>), <span class="built_in">c</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">B</span>(<span class="keyword">int</span> _b1, <span class="keyword">int</span> _b2, <span class="keyword">int</span> m, <span class="keyword">int</span> n) : <span class="built_in">a1</span>(m), <span class="built_in">a2</span>(n), <span class="built_in">c</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">b1 = _b1;</span><br><span class="line">b2 = _b2;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;B的构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;B的析构函数&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> b1;</span><br><span class="line"><span class="keyword">int</span> b2;</span><br><span class="line">A a2;</span><br><span class="line">A a1;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2 先执行 被组合对象的构造函数 </span></span><br><span class="line"><span class="comment">//如果组合对象有多个,按照定义顺序, 而不是按照初始化列表的顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数 : 和构造函数的调用顺序相反</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 被组合对象的构造顺序 与定义顺序有关系 ,与初始化列表的顺序没有关系.</span></span><br><span class="line"><span class="comment">//4 初始化列表 用来 给const 属性赋值 </span></span><br></pre></td></tr></table></figure></li><li><p>拷贝构造函数也可以带初始化列表，因为类作函数参数会调用拷贝构造函数将实参传给一个匿名对象时进行初始化；</p></li><li><p>匿名对象使用完就会调用析构函数析构；</p></li><li><p>在构造函数中不能调用构造函数，因为只会产生一个匿名对象，影响不了实际要初始化的对象；</p></li><li><p>C语言中是利用库函数malloc和free来分配和撤销内存空间的。C++提供了较简便而功能较强的运算符new和delete来取代malloc和free函数，new和delete是运算符，不是函数，因此执行效率高；</p></li><li><p>在执行new运算时，如果内存量不足，无法开辟所需的内存空间，目前大多数C++编译系统都使new返回一个0指针值。只要检测返回值是否为0，就可判断分配内存是否成功；</p></li><li><p>虽然为了与C语言兼容，C++仍保留malloc和free函数，但建议用户不用malloc和free函数，而用new和delete运算符；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>; <span class="comment">//开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">100</span>);  <span class="comment">//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];  <span class="comment">//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">4</span>];  <span class="comment">//开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址</span></span><br><span class="line"><span class="keyword">float</span> *p=<span class="keyword">new</span> <span class="built_in"><span class="keyword">float</span></span> (<span class="number">3.14159</span>);  <span class="comment">//开辟一个存放单精度数的空间，并指定该实数的初值为//3.14159，将返回的该空间的地址赋给指针变量p</span></span><br><span class="line"></span><br><span class="line">Box *pt;  <span class="comment">//定义一个指向Box类对象的指针变量pt</span></span><br><span class="line">pt=<span class="keyword">new</span> Box;  <span class="comment">//在pt中存放了新建对象的起始地址</span></span><br><span class="line">在程序中就可以通过pt访问这个新建的对象。如</span><br><span class="line">cout&lt;&lt;pt-&gt;height;  <span class="comment">//输出该对象的height成员</span></span><br><span class="line">cout&lt;&lt;pt-&gt;<span class="built_in">volume</span>( );  <span class="comment">//调用该对象的volume函数，计算并输出体积</span></span><br><span class="line">C++还允许在执行<span class="keyword">new</span>时，对新建立的对象进行初始化。如</span><br><span class="line">Box *pt=<span class="keyword">new</span> <span class="built_in">Box</span>(<span class="number">12</span>,<span class="number">15</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;释放指针</span><br><span class="line"><span class="keyword">delete</span> [] arry;释放数组</span><br></pre></td></tr></table></figure></li><li><p>用malloc分配类对象内存和free释放内存不会自动调用构造和析构函数，而用new和delete会自动调用构造和析构函数；</p></li><li><p>把一个类的成员说明为 static 时，这个类无论有多少个对象被创建，这些对象共享这个 static 成员；</p></li><li><p>静态成员局部于类，它不是对象成员；</p></li><li><p>初始化和访问静态成员变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>  counter :: Smem = <span class="number">1</span> ;<span class="comment">//必须在类的外面初始化</span></span><br><span class="line">cout &lt;&lt; counter::Smem &lt;&lt; <span class="string">&#x27;\t&#x27;</span> ;  <span class="comment">//访问静态成员变量方法2</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;c.Smem = &quot;</span>&lt;&lt;c.Smem&lt;&lt;endl; <span class="comment">//访问静态成员变量方法1</span></span><br></pre></td></tr></table></figure></li><li><p>静态成员函数：静态成员函数数冠以关键字static，静态成员函数提供不依赖于类数据结构的共同操作，它没有this指针，在类外调用静态成员函数用 “类名 :: ”作限定词，或通过对象调用，同静态成员变量一样；</p></li><li><p>静态成员函数中，能使用静态成员变量但不能使用普通变量；</p></li><li><p>C++对象模型：</p><ul><li>语言中直接支持面向对象程序设计的部分，主要涉及如构造函数、析构函数、虚函数、继承（单继承、多继承、虚继承）、多态等等</li><li>对于各种支持的底层实现机制，在c语言中，“数据”和“处理数据的操作（函数）”是分开来声明的，也就是说，语言本身并没有支持“数据和函数”之间的关联性。在c++中，通过抽象数据类型（abstract data type，ADT），在类中定义数据和函数，来实现数据和函数直接的绑定</li></ul><p>概括来说，在C++类中有两种成员数据：static、nonstatic；三种成员函数：static、nonstatic、virtual</p></li><li><p>C++类对象中的成员变量和成员函数是分开存储的：成员变量：普通成员变量：存储于对象中，与struct变量有相同的内存布局和字节对齐方式，静态成员变量：存储于全局数据区中，成员函数：存储于代码段中。</p></li><li><p>C语言中的内存四区模型仍然有效，C++中类的普通成员函数都隐式包含一个指向当前对象的this指针；静态成员函数、成员变量属于类，静态成员函数与普通成员函数的区别：静态成员函数不包含指向具体对象的指针，普通成员函数包含一个指向具体对象的指针；</p></li><li><p>类成员函数的形参和类的属性名字相同，通过this指针来解决，类的成员函数可通过const修饰，const修饰的是this指针指向的内容，const写在后面；</p></li><li><p>this指针不能修改指向；</p></li><li><p>把全局函数转化成成员函数，通过this指针隐藏左操作数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Test <span class="title">add</span><span class="params">(Test &amp;t1, Test &amp;t2)</span></span>===》Test <span class="built_in">add</span>(Test &amp;t2)</span><br></pre></td></tr></table></figure></li><li><p>把成员函数转换成全局函数，多了一个参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAB</span><span class="params">()</span></span>===》<span class="keyword">void</span> <span class="built_in">printAB</span>(Test *pthis)</span><br></pre></td></tr></table></figure></li><li><p>全局函数转换成成员函数案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a:&quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;析构函数自动被调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a:&quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//t3 = t1.TestAdd(t2);</span></span><br><span class="line"><span class="function">Test <span class="title">TestAdd</span><span class="params">(Test &amp;t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Test <span class="title">tmp</span><span class="params">(<span class="keyword">this</span>-&gt;a + t2.a, <span class="keyword">this</span>-&gt;b + t2.b)</span></span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t1.TestAdd2(t2);</span></span><br><span class="line"><span class="comment">//返回一个引用 相当于返回自身 </span></span><br><span class="line"><span class="comment">//返回t1这个元素 this就是&amp;t1</span></span><br><span class="line"><span class="function">Test&amp; <span class="title">TestAdd2</span><span class="params">(Test &amp;t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = <span class="keyword">this</span>-&gt;a + t2.a;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = <span class="keyword">this</span>-&gt;b + t2.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//把 *(&amp;t1) 又回到了 t1元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把成员函数 转成 全局函数 多了一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printT</span><span class="params">(Test *pT)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a:&quot;</span>&lt;&lt;pT-&gt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;pT-&gt;b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数的方法 </span></span><br><span class="line"><span class="comment">//全局函数 转成 成员函数  少了一个参数 </span></span><br><span class="line"><span class="function">Test <span class="title">TestAdd</span><span class="params">(Test &amp;t1, Test &amp;t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test tmp;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t1 = t1 + t2;</span></span><br><span class="line">t1.<span class="built_in">TestAdd2</span>(t2);</span><br><span class="line">t1.<span class="built_in">printT</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main181</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">Test t3 ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数方法</span></span><br><span class="line">t3 = <span class="built_in">TestAdd</span>(t1, t2);</span><br><span class="line"><span class="comment">//成员函数方法</span></span><br><span class="line">&#123;</span><br><span class="line">Test t4 = t1.<span class="built_in">TestAdd</span>(t2); <span class="comment">//匿名对象直接转化成t4</span></span><br><span class="line">t4.<span class="built_in">printT</span>();</span><br><span class="line">Test t5;</span><br><span class="line">t5 = t1.<span class="built_in">TestAdd</span>(t2); <span class="comment">//匿名对象 复制 给t5</span></span><br><span class="line">t5.<span class="built_in">printT</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数返回元素和返回引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Test&amp; <span class="title">add</span><span class="params">(Test &amp;t2)</span> <span class="comment">//*this //函数返回引用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = <span class="keyword">this</span>-&gt;a + t2.<span class="built_in">getA</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;b = <span class="keyword">this</span>-&gt;b + t2.<span class="built_in">getB</span>();</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//*操作让this指针回到元素状态</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">add2</span><span class="params">(Test &amp;t2)</span> <span class="comment">//*this //函数返回元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//t3是局部变量</span></span><br><span class="line"><span class="function">Test <span class="title">t3</span><span class="params">(<span class="keyword">this</span>-&gt;a+t2.getA(), <span class="keyword">this</span>-&gt;b + t2.getB())</span> </span>;</span><br><span class="line"><span class="keyword">return</span> t3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组类的实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arry.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span>  once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Array</span>(<span class="keyword">int</span> length);</span><br><span class="line"><span class="built_in">Array</span>(<span class="keyword">const</span> Array&amp; obj);</span><br><span class="line">~<span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> valude)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_length;</span><br><span class="line"><span class="keyword">int</span> *m_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值当左值，需要返回一个引用</span></span><br><span class="line"><span class="comment">//应该返回一个引用(元素本身) 而不是一个值</span></span><br><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载=</span></span><br><span class="line">Array&amp; <span class="keyword">operator</span>=(Array &amp;a1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载 ==</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Array &amp;a1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载 !=</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(Array &amp;a1);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要求重载以下操作符</span></span><br><span class="line"><span class="comment">// []  ==  !=  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//arry.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myarray.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Array::<span class="built_in">Array</span>(<span class="keyword">int</span> length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (length &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">length = <span class="number">0</span>; <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_length = length;</span><br><span class="line">m_space = <span class="keyword">new</span> <span class="keyword">int</span>[m_length];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Array a2 = a1;</span></span><br><span class="line">Array::<span class="built_in">Array</span>(<span class="keyword">const</span> Array&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_length = obj.m_length;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;m_length]; <span class="comment">//分配内存空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m_length; i++) <span class="comment">//数组元素复制</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_space[i] = obj.m_space[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Array::~<span class="built_in">Array</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_space != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] m_space;</span><br><span class="line">m_space = <span class="literal">NULL</span>;</span><br><span class="line">m_length = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a1.setData(i, i);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Array::setData</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> valude)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_space[index] = valude;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Array::getData</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_space[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Array::length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span>&amp; Array::<span class="keyword">operator</span>[](<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_space[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a3 = a1;</span></span><br><span class="line">Array&amp; Array::<span class="keyword">operator</span>=(Array &amp;a1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1 释放原来的内存空间</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_space != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] m_space;</span><br><span class="line">m_length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2 根据a1大小 分配内存 </span></span><br><span class="line">m_length = a1.m_length;</span><br><span class="line">m_space = <span class="keyword">new</span> <span class="keyword">int</span>[m_length];</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 copy数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m_length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//m_space[i] = a1.m_space[i];</span></span><br><span class="line">m_space[i] = a1[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if (a3 == a1)</span></span><br><span class="line"><span class="keyword">bool</span> Array::<span class="keyword">operator</span>==(Array &amp;a1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_length !=  a1.m_length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m_length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_space[i] != a1[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Array::<span class="keyword">operator</span>!=(Array &amp;a1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (*this == a1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myarray.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类的框架设计完毕</span></span><br><span class="line"><span class="comment">//类的测试案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载[]</span></span><br><span class="line"><span class="comment">//void operator[](int i)</span></span><br><span class="line"><span class="comment">//int operator[](int i);</span></span><br><span class="line"><span class="comment">//int&amp; operator[](int i);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Array  <span class="title">a1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a1.<span class="built_in">length</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">a1.<span class="built_in">setData</span>(i, i);</span><br><span class="line"><span class="comment">//2 </span></span><br><span class="line">a1[i] = i;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数返回值当左值，需要返回一个引用</span></span><br><span class="line"><span class="comment">//a1.operator [i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n打印数组a1: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a1.<span class="built_in">length</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;a1.getData(i)&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">cout&lt;&lt;a1[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">Array a2 = a1;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n打印数组a2: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a2.<span class="built_in">length</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;a2.<span class="built_in">getData</span>(i)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="function">Array <span class="title">a3</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">a3 = a1;</span><br><span class="line">a3 = a2 = a1;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n打印数组a3: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a3.<span class="built_in">length</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;a3[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a3.operator=(a1)</span></span><br><span class="line"><span class="comment">//Array&amp; operator=(Array &amp;a1)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//功能4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a3 == a1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;相等\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不相等\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a3.operator==(a1);</span></span><br><span class="line"><span class="comment">//bool operator==(Array &amp;a1);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a3 != a1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不相等\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;相等\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//a3.operator!=(a1)</span></span><br><span class="line"><span class="comment">// bool operator!=(Array &amp;a1);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>友元函数：在类里面声明友元函数，声明位置随意，友元函数可以访问类的私有属性，破化了类的封装；</p></li><li><p>若B类是A类的友员类，则B类的所有成员函数都是A类的友员函数，友员类通常设计为一种对数据操作或类之间传递消息的辅助类；</p></li><li><p>友元函数类似于java中的反射机制；</p></li><li><p>不能重载的运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. :: .* ?: <span class="keyword">sizeof</span></span><br></pre></td></tr></table></figure></li><li><p>复数类中重载+和-运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载-运算符将下面+号换成-号</span></span><br><span class="line"><span class="comment">//全局函数法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(Complex &amp;obj1, Complex &amp;obj2);</span><br><span class="line"><span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex &amp;obj1, Complex &amp;obj2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Complex <span class="title">tmp</span><span class="params">(obj1.a + obj2.a, obj1.b + obj2.b)</span></span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Complex <span class="title">t1</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">Complex <span class="title">t2</span><span class="params">(<span class="number">5</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line"><span class="function">Complex <span class="title">t3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">t3 = t1 + t2;</span><br><span class="line">t3.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Complex <span class="title">tmp</span><span class="params">(<span class="keyword">this</span>-&gt;a + obj.a, <span class="keyword">this</span>-&gt;b + obj.b)</span></span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Complex <span class="title">t1</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">Complex <span class="title">t2</span><span class="params">(<span class="number">5</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line"><span class="function">Complex <span class="title">t3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">t3 = t1 + t2;</span><br><span class="line">t3.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重载前置和后置++和–，成员函数法，左移右移重载，全局函数法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Complex <span class="title">tmp</span><span class="params">(<span class="keyword">this</span>-&gt;a + obj.a, <span class="keyword">this</span>-&gt;b + obj.b)</span></span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>-(Complex &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Complex <span class="title">tmp</span><span class="params">(<span class="keyword">this</span>-&gt;a - obj.a, <span class="keyword">this</span>-&gt;b - obj.b)</span></span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">Complex &amp;<span class="keyword">operator</span>++()<span class="comment">//前置++</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a++;</span><br><span class="line"><span class="keyword">this</span>-&gt;b++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Complex &amp;<span class="keyword">operator</span>--()<span class="comment">//前置--</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a--;</span><br><span class="line"><span class="keyword">this</span>-&gt;b--;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>++(<span class="keyword">int</span>)<span class="comment">//后置++</span></span><br><span class="line">&#123;</span><br><span class="line">Complex tmp = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;a++;</span><br><span class="line"><span class="keyword">this</span>-&gt;b++;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">Complex <span class="keyword">operator</span>--(<span class="keyword">int</span>)<span class="comment">//后置--</span></span><br><span class="line">&#123;</span><br><span class="line">Complex tmp = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;a--;</span><br><span class="line"><span class="keyword">this</span>-&gt;b--;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Complex <span class="title">t1</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">Complex <span class="title">t2</span><span class="params">(<span class="number">5</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line"><span class="function">Complex <span class="title">t3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">t3 = t1 + t2;</span><br><span class="line">t3.<span class="built_in">print</span>();</span><br><span class="line">t3 = t1 - t2;</span><br><span class="line">t3.<span class="built_in">print</span>();</span><br><span class="line">++t3;</span><br><span class="line">t3.<span class="built_in">print</span>();</span><br><span class="line">--t3;</span><br><span class="line">t3.<span class="built_in">print</span>();</span><br><span class="line">t3++;</span><br><span class="line">t3.<span class="built_in">print</span>();</span><br><span class="line">t3--;</span><br><span class="line">t3.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>友元函数一般用于重载左移右移操作符，其他情况少用和慎用；</p></li><li><p>重载赋值运算符，先释放旧的内存，返回一个引用；</p></li><li><p>函数返回值当左值，需要返回一个引用；</p></li><li><p>Mystring类的实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mystring.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c中没有字符串 字符串类(c风格的字符串)</span></span><br><span class="line"><span class="comment">//空串 &quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">MyString</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, MyString &amp;s);</span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;in, MyString &amp;s);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyString</span>(<span class="keyword">int</span> len = <span class="number">0</span>);</span><br><span class="line"><span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span> *p);</span><br><span class="line"><span class="built_in">MyString</span>(<span class="keyword">const</span> MyString&amp; s);</span><br><span class="line">~<span class="built_in">MyString</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//重载=号操作符</span></span><br><span class="line">MyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *p);</span><br><span class="line">MyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;s);</span><br><span class="line"><span class="keyword">char</span>&amp; <span class="keyword">operator</span>[] (<span class="keyword">int</span> index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//重载 == !== </span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> MyString&amp; s) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString&amp; s) <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> *p);</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> *p);</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> MyString&amp; s);</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> MyString&amp; s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把类的指针 露出来</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">c_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">c_str2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span>m_len;</span><br><span class="line"><span class="keyword">char</span> *m_p;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyString s1;</span><br><span class="line"><span class="function">MyString <span class="title">s2</span><span class="params">(<span class="string">&quot;s2&quot;</span>)</span></span>;</span><br><span class="line">MyString s2_2 = <span class="literal">NULL</span>;</span><br><span class="line">MyString s3 = s2;</span><br><span class="line">MyString s4 = <span class="string">&quot;s4444444444&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试运算符重载 和 重载[]</span></span><br><span class="line"><span class="comment">//=</span></span><br><span class="line"></span><br><span class="line">s4 = s2;</span><br><span class="line">s4 = <span class="string">&quot;s2222&quot;</span>;</span><br><span class="line">s4[<span class="number">1</span>] = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, s4[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;s4 &lt;&lt;endl;</span><br><span class="line"><span class="comment">//ostream&amp; operator&lt;&lt;(ostream &amp;out, MyString &amp;s)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char&amp; operator[] (int index)</span></span><br><span class="line"><span class="comment">//MyString&amp; operator=(const char *p);</span></span><br><span class="line"><span class="comment">//MyString&amp; operator=(const MyString &amp;s);</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyString s1;</span><br><span class="line"><span class="function">MyString <span class="title">s2</span><span class="params">(<span class="string">&quot;s2&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">MyString s3 = s2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s2 == <span class="string">&quot;aa&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s3 == s2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyString s1;</span><br><span class="line"><span class="function">MyString <span class="title">s2</span><span class="params">(<span class="string">&quot;s2&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">MyString s3 = s2;</span><br><span class="line">s3 = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tag = (s3 &lt; <span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (tag &lt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s3 小于 bbbb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s3 大于 bbbb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString s4 = <span class="string">&quot;aaaaffff&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(s4.<span class="built_in">c_str</span>(), <span class="string">&quot;aa111&quot;</span>); <span class="comment">//MFC</span></span><br><span class="line">cout&lt;&lt;s4&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main011</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MyString <span class="title">s1</span><span class="params">(<span class="number">128</span>)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n请输入字符串(回车结束)&quot;</span>;</span><br><span class="line">cin&gt;&gt;s1;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;s1;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MyString <span class="title">s1</span><span class="params">(<span class="number">128</span>)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n请输入字符串(回车结束)&quot;</span>;</span><br><span class="line">cin&gt;&gt;s1;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mystring.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, MyString &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">out&lt;&lt;s.m_p;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;in, MyString &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;s.m_p;</span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_p, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_len = len;</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">memset</span>(m_p, <span class="number">0</span>, m_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_p, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_len = <span class="built_in">strlen</span>(p);</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_p, p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="comment">//MyString s3 = s2;</span></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">const</span> MyString&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">m_len = s.m_len;</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(m_p, s.m_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::~<span class="built_in">MyString</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] m_p;</span><br><span class="line">m_p = <span class="literal">NULL</span>;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// s4 = &quot;s2222&quot;;</span></span><br><span class="line">MyString&amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1 旧内存释放掉</span></span><br><span class="line"><span class="keyword">if</span> (m_p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] m_p;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2 根据p分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_p, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_len = <span class="built_in">strlen</span>(p);</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_p, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s4 = s2;</span></span><br><span class="line">MyString&amp; MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1 旧内存释放掉</span></span><br><span class="line"><span class="keyword">if</span> (m_p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] m_p;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2 根据s分配内存</span></span><br><span class="line">m_len = s.m_len;</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="keyword">char</span>[m_len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_p, s.m_p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>&amp; MyString::<span class="keyword">operator</span>[] (<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_p[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if (s2 == &quot;s222222&quot;)</span></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_len == <span class="built_in">strlen</span>(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="built_in">strcmp</span>(m_p, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">char</span> *p) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>==(<span class="keyword">const</span> MyString&amp; s)  <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_len != s.m_len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> !<span class="built_in">strcmp</span>(m_p, s.m_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> MyString::<span class="keyword">operator</span>!=(<span class="keyword">const</span> MyString&amp; s) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//if (s3 &lt; &quot;bbbb&quot;)</span></span><br><span class="line"><span class="keyword">int</span> MyString::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;m_p , p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MyString::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(p, <span class="keyword">this</span>-&gt;m_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MyString::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> MyString&amp; s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;m_p , s.m_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MyString::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> MyString&amp; s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">strcmp</span>(s.m_p, m_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>类之间的关系：包含关系，组合关系，继承关系</p></li><li><p>子类拥有父类的所有成员变量和成员函数，子类可以拥有父类没有的方法和属性，子类对象可以当作父类对象使用，子类就是一种特殊的父类；</p></li><li><p>public继承：父类成员在子类中保持原有访问级别，private继承：父类成员在子类中变为private成员，protected继承：父类中public成员会变成protected，父类中protected成员仍然为protected，父类中private成员仍然为private；</p></li><li><p>private成员在子类中依然存在，但是却无法访问到。不论种方式继承基类，派生类都不能直接使用基类的私有成员；</p></li><li><p>C++中的继承方式（public、private、protected）会影响子类的对外访问属性，判断某一句话，能否被访问</p><ul><li>看调用语句，这句话写在子类的内部、外部</li><li>看子类如何从父类继承（public、private、protected）</li><li>看父类中的访问级别（public、private、protected）</li></ul></li><li><p>恰当的使用public，protected和private为成员声明访问级别</p><ul><li>需要被外界访问的成员直接设置为public</li><li>只能在当前类中访问的成员设置为private</li><li>只能在当前类和子类中访问的成员设置为protected，protected成员的访问权限介于public和private之间</li></ul></li><li><p>public继承不会改变父类对外访问属性，private继承会改变父类对外访问属性为private，protected继承会部分改变父类对外访问属性；</p></li><li><p>类型兼容规则是指在需要基类对象的任何地方，都可以使用公有派生类的对象来替代，通过公有继承，派生类得到了基类中除构造函数、析构函数之外的所有成员，这样，公有派生类实际就具备了基类的所有功能，凡是基类能解决的问题，公有派生类都可以解决。类型兼容规则中所指的替代包括以下情况：</p><ul><li>子类对象可以当作父类对象使用</li><li>子类对象可以直接赋值给父类对象</li><li>子类对象可以直接初始化父类对象</li><li>父类指针和引用可以直接指向和引用子类对象</li></ul></li><li><p>在子类对象构造时，需要调用父类构造函数对其继承得来的成员进行初始化，在子类对象析构时，需要调用父类析构函数对其继承得来的成员进行清理；</p></li><li><p>继承中的构造初始化列表的简化写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>):<span class="built_in">a</span>(a),<span class="built_in">b</span>(b)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) :<span class="built_in">A</span>(<span class="number">1</span>, <span class="number">2</span>),<span class="built_in">c</span>(c)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a1;</span><br><span class="line"><span class="function">B <span class="title">b1</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承中的构造析构调用原则：</p><ul><li>子类对象在创建时会首先调用父类的构造函数</li><li>父类构造函数执行结束后，执行子类的构造函数</li><li>当父类的构造函数有参数时，需要在子类的初始化列表中显示调用</li><li>析构函数调用的先后顺序与构造函数相反</li></ul></li><li><p>继承与组合混搭情况下，构造和析构调用原则：先构造父类，再构造成员变量、最后构造自己，先析构自己，在析构成员变量、最后析构父类；</p></li><li><p>当子类成员变量与父类成员变量同名时子类依然从父类继承同名成员，成员在子类中通过作用域分辨符::进行同名成员区分（在派生类中使用基类的同名成员，显式地使用类名限定符） ，同名成员存储在内存中的不同位置；</p></li><li><p>同名成员变量和成员函数通过作用域分辨符进行区分；</p></li><li><p>基类定义的静态成员，将被所有派生类共享，根据静态成员自身的访问特性和派生类的继承方式，在类层次体系中具有不同的访问性质 （遵守派生类的访问控制），派生类中访问静态成员，用以下形式显式说明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 :: 成员</span><br></pre></td></tr></table></figure></li><li><p>一个类有多个直接基类的继承关系称为多继承， 多继承声明语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  派生类名 :</span> 访问控制  基类名<span class="number">1</span> ,  访问控制  基类名<span class="number">2</span> ,  … , 访问控制  基类名n</span><br><span class="line">    基类名n</span><br><span class="line">    &#123;</span><br><span class="line">         数据成员和成员函数声明</span><br><span class="line">    &#125;；</span><br></pre></td></tr></table></figure></li><li><p>多个基类的派生类构造函数可以用初始式调用基类构造函数初始化数据成员，执行顺序与单继承构造函数情况类似，多个直接基类构造函数执行顺序取决于定义派生类时指定的各个继承基类的顺序，一个派生类对象拥有多个直接或间接基类的成员。不同名成员访问不会出现二义性。如果不同的基类有同名成员，派生类对象访问时应该加以识别；</p></li><li><p>如果一个派生类从多个基类派生，而这些基类又有一个共同的基类，则在对该基类中声明的名字进行访问时，可能产生二义性；</p></li><li><p>如果在多条继承路径上有一个公共的基类，那么在继承路径的某处汇合点，这个公共基类就会在派生类的对象中产生多个基类子对象，要使这个公共基类在派生类中只产生一个子对象，必须对这个基类声明为虚继承，使这个基类成为虚基类，虚继承声明使用关键字virtual；</p></li><li><p>虚继承能解决一个祖宗类的多继承问题，不能解决不是一个祖宗类的多继承问题；</p></li><li><p>加上virtual关键字的类的大小会变大，实际上是加了一个指针；</p></li><li><p>面向对象新需求：根据实际的对象类型来判断重写函数的调用，如果父类指针指向的是父类对象则调用父类中定义的函数，如果父类指针指向的是子类对象则调用子类中定义的函数；</p></li><li><p>C++中通过virtual关键字对多态进行支持，使用virtual声明的函数被重写后即可展现多态特性，父类中virtual可写可不写，一般写上比较好，容易看；</p></li><li><p>多态成立的三个条件</p><ul><li>要有继承</li><li>要有虚函数重写</li><li>用父类指针或引用指向子类对象</li></ul></li><li><p>多态是设计模式和框架的基础；</p></li><li><p>联编是指一个程序模块、代码之间互相关联的过程；</p></li><li><p>静态联编（static binding），是程序的匹配、连接在编译阶段实现，也称为早期匹配，重载函数使用静态联编；</p></li><li><p>动态联编是指程序联编推迟到运行时进行，所以又称为晚期联编（迟绑定），switch 语句和 if 语句是动态联编的例子；</p></li><li><p>不写virtual关键字，是静态联编，加virtual关键字，动态联编；</p></li><li><p>虚析构函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//虚析构函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">&quot;obja&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">virtual</span> ~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;~A()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">&quot;objb&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  ~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;~B()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">C</span>()</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">&quot;objc&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;C()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">C</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;~C()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//只执行了 父类的析构函数</span></span><br><span class="line"><span class="comment">//向通过父类指针  把 所有的子类对象的析构函数 都执行一遍</span></span><br><span class="line"><span class="comment">//向通过父类指针 释放所有的子类资源 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">howtodelete</span><span class="params">(A *base)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">delete</span> base;  <span class="comment">//这句话不会表现成多态 这种属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void howtodelete(B *base)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">delete base;  //这句话不会表现成多态 这种属性</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">C *myC = <span class="keyword">new</span> C; <span class="comment">//new delete匹配</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">delete</span> myC; <span class="comment">//直接通过子类对象释放资源 不需要写virtual </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//howtodelete(myC);</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过子类对象的指针作函数参数传给父类指针，通过父类指针释放内存，需要对父类的析构函数加virtual关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//虚析构函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">&quot;obja&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">virtual</span> ~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;~A()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">&quot;objb&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  ~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;~B()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">C</span>()</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">&quot;objc&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;C()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">C</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;~C()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//只执行了 父类的析构函数</span></span><br><span class="line"><span class="comment">//向通过父类指针  把 所有的子类对象的析构函数 都执行一遍</span></span><br><span class="line"><span class="comment">//向通过父类指针 释放所有的子类资源 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">howtodelete</span><span class="params">(A *base)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">delete</span> base;  <span class="comment">//这句话不会表现成多态 这种属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void howtodelete(B *base)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">delete base;  //这句话不会表现成多态 这种属性</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">C *myC = <span class="keyword">new</span> C; <span class="comment">//new delete匹配</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">delete</span> myC; <span class="comment">//直接通过子类对象释放资源 不需要写virtual </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//howtodelete(myC);</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数重载：</p><ul><li>必须在同一个类中进行</li><li>子类无法重载父类的函数，父类同名函数将被名称覆盖</li><li>重载是在编译期间根据参数类型和个数决定函数调用</li></ul></li><li><p>函数重写：</p><ul><li>必须发生于父类与子类之间</li><li>并且父类与子类中的函数必须有完全相同的原型</li><li>使用virtual声明之后能够产生多态(如果不使用virtual，那叫重定义)</li></ul></li><li><p>多态是在运行期间根据具体对象的类型决定函数调用；</p></li><li><p>子类无法重载父类的函数，父类同名函数将被名称覆盖，无法再通过子类访问父类的函数，要调用需要显式调用，用子类.父类::函数名</p></li><li><p>C++中多态的实现原理：当类中声明虚函数时，编译器会生成一个虚函数表，虚函数表是一个存储类成员函数指针的数据结构，虚函数表是由编译器自动生成与维护的，virtual成员函数指针会被编译器放入虚函数表中，存在虚函数时，每个对象中都有一个指向虚函数表的指针(vptr指针)；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多态成立的三个条件 </span></span><br><span class="line"><span class="comment">//要有继承  虚函数重写  父类指针指向子类对象 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Parent</span>(<span class="keyword">int</span> a=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span>  <span class="comment">//1 动手脚  写virtal关键字 会特殊处理 //虚函数表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;我是爹&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span>  <span class="comment">//1 动手脚  写virtal关键字 会特殊处理 //虚函数表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;我是爹&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span> <span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Child</span>(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>):<span class="built_in">Parent</span>(a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;我是儿子&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HowToPlay</span><span class="params">(Parent *base)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">base-&gt;<span class="built_in">print</span>(); <span class="comment">//有多态发生  //2 动手脚  </span></span><br><span class="line"><span class="comment">//效果:传来子类对 执行子类的print函数 传来父类对执行父类的print函数 </span></span><br><span class="line"><span class="comment">//C++编译器根本不需要区分是子类对象 还是父类对象</span></span><br><span class="line"><span class="comment">//父类对象和子类对象分步有vptr指针 , ==&gt;虚函数表===&gt;函数的入口地址</span></span><br><span class="line"><span class="comment">//迟绑定 (运行时的时候,c++编译器才去判断)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Parentp1; <span class="comment">//3 动手脚 提前布局  </span></span><br><span class="line"><span class="comment">//用类定义对象的时候 C++编译器会在对象中添加一个vptr指针 </span></span><br><span class="line">Childc1; <span class="comment">//子类里面也有一个vptr指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">HowToPlay</span>(&amp;p1);</span><br><span class="line"><span class="built_in">HowToPlay</span>(&amp;c1);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>证明vptr指针的存在</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Parent1</span>(<span class="keyword">int</span> a=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;我是爹&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Parent2</span>(<span class="keyword">int</span> a=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;我是爹&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(Parent):%d sizeof(Parent2):%d \n&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(Parent1), <span class="built_in"><span class="keyword">sizeof</span></span>(Parent2));</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数中能调用虚函数不能实现多态，因为vptr指针分步初始化，当执行父类的构造函数时，c1.vptr指向父类的虚函数表，当父类的构造函数运行完毕后，才把c1.vptr指向子类的虚函数表；</p></li><li><p>通过虚函数表指针VPTR调用重写函数是在程序运行时进行的，因此需要通过寻址操作才能确定真正应该调用的函数。而普通成员函数是在编译时就确定了调用的函数。在效率上，虚函数的效率要低很多，出于效率考虑，没有必要将所有成员函数都声明为虚函数；</p></li><li><p>父类指针的步长和子类指针的步长只有在子类没有定义新属性时是一样的，子类定义了新属性，步长就不一样；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结论:</span></span><br><span class="line"><span class="comment">//多态是用父类指针指向子类对象 和 父类步长++,是两个不同的概念</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Parent</span>(<span class="keyword">int</span> a=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;我是爹&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成功 ,一次偶然的成功 ,必然的失败更可怕</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span> <span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Child(int a = 0, int b=0):Parent(a)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">this-&gt;b = b;</span></span><br><span class="line"><span class="comment">print();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Child</span>(<span class="keyword">int</span> b = <span class="number">0</span>):<span class="built_in">Parent</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//this-&gt;b = b;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;我是儿子&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//int b;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HowToPlay</span><span class="params">(Parent *base)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">base-&gt;<span class="built_in">print</span>(); <span class="comment">//有多态发生  //2 动手脚  </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Child  c1; <span class="comment">//定义一个子类对象 ,在这个过程中,在父类构造函数中调用虚函数print 能发生多态吗?</span></span><br><span class="line"><span class="comment">//c1.print();</span></span><br><span class="line"></span><br><span class="line">Parent *pP = <span class="literal">NULL</span>;</span><br><span class="line">Child  *pC = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">Child  array[] = &#123;<span class="built_in">Child</span>(<span class="number">1</span>), <span class="built_in">Child</span>(<span class="number">2</span>), <span class="built_in">Child</span>(<span class="number">3</span>)&#125;;</span><br><span class="line">pP = array;</span><br><span class="line">pC = array;</span><br><span class="line"></span><br><span class="line">pP-&gt;<span class="built_in">print</span>();</span><br><span class="line">pC-&gt;<span class="built_in">print</span>(); <span class="comment">//多态发生</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pP++;</span><br><span class="line">pC++;</span><br><span class="line">pP-&gt;<span class="built_in">print</span>();</span><br><span class="line">pC-&gt;<span class="built_in">print</span>(); <span class="comment">//多态发生</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pP++;</span><br><span class="line">pC++;</span><br><span class="line">pP-&gt;<span class="built_in">print</span>();</span><br><span class="line">pC-&gt;<span class="built_in">print</span>(); <span class="comment">//多态发生</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(fun)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">fun *fun1 = &amp;add;</span><br><span class="line"><span class="keyword">int</span> c = <span class="built_in">fun1</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数指针类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*fun)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">fun fun1 = &amp;add;</span><br><span class="line"><span class="keyword">int</span> c = <span class="built_in">fun1</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数指针</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span>(*fun)(<span class="keyword">int</span> a, <span class="keyword">int</span> b);</span><br><span class="line">fun = add;</span><br><span class="line"><span class="keyword">int</span> c = <span class="built_in">fun</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数指针类型的强制转换（c语言）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a + b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span>(*funa)(<span class="keyword">int</span> a, <span class="keyword">int</span> b);</span><br><span class="line">funa = (<span class="built_in"><span class="keyword">void</span></span>(*)(<span class="keyword">int</span>, <span class="keyword">int</span>))add;</span><br><span class="line"><span class="built_in">funa</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数指针和指针函数：</p><ul><li>函数指针是指指向函数的指针</li><li>指针函数是指函数返回值是指针的函数</li></ul></li><li><p>函数指针作函数参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span>  <span class="comment">//子任务的实现者</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func add() do...\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span>  <span class="comment">//子任务的实现者</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func add2() do...\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd3</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span>  <span class="comment">//子任务的实现者</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func add3() do...\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span>  <span class="comment">//子任务的实现者</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func add4() do...\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义了一个类型 </span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*MyTypeFuncAdd)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数指针 做 函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MainOp</span><span class="params">(MyTypeFuncAdd myFuncAdd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="built_in">myFuncAdd</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int (*MyPointerFuncAdd)(int a, int b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MainOp2</span><span class="params">(<span class="keyword">int</span> (*MyPointerFuncAdd)(<span class="keyword">int</span> a, <span class="keyword">int</span> b) )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="built_in">MyPointerFuncAdd</span>(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">//间接调用</span></span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//间接调用 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务的调用 和 任务的编写可以分开</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MyTypeFuncAdd  myFuncAdd = NULL;</span></span><br><span class="line"><span class="comment">myadd(1, 2); //直接调用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">myFuncAdd = myadd; </span></span><br><span class="line"><span class="comment">myFuncAdd(3, 4); //间接调用 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">MainOp2(myadd);</span></span><br><span class="line"><span class="comment">MainOp(myadd);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在mainop框架 没有发生任何变化的情况下 ...</span></span><br><span class="line"><span class="built_in">MainOp</span>(myadd2);</span><br><span class="line"><span class="built_in">MainOp</span>(myadd3);</span><br><span class="line"><span class="built_in">MainOp</span>(myadd4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello...\n&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数指针的正向调用：被调用函数和主调函数不在同一个文件中、模块中；</p></li><li><p>函数指针的反向调用，回调函数；</p></li><li><p>cctype常用函数，需要包含头文件cctype</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isalnum</span>()  <span class="comment">//如果参数是字母数字，即字母或者数字，函数返回true</span></span><br><span class="line"><span class="built_in">isalpha</span>()  <span class="comment">//如果参数是字母，函数返回true</span></span><br><span class="line"><span class="built_in">iscntrl</span>()  <span class="comment">//如果参数是控制字符，函数返回true</span></span><br><span class="line"><span class="built_in">isdigit</span>()  <span class="comment">//如果参数是数字（0－9），函数返回true</span></span><br><span class="line"><span class="built_in">isgraph</span>()  <span class="comment">//如果参数是除空格之外的打印字符，函数返回true</span></span><br><span class="line"><span class="built_in">islower</span>()  <span class="comment">//如果参数是小写字母，函数返回true</span></span><br><span class="line"><span class="built_in">isprint</span>()  <span class="comment">//如果参数是打印字符（包括空格），函数返回true</span></span><br><span class="line"><span class="built_in">ispunct</span>()  <span class="comment">//如果参数是标点符号，函数返回true</span></span><br><span class="line"><span class="built_in">isspace</span>()  <span class="comment">//如果参数是标准空白字符，如空格、换行符、水平或垂直制表符，函数返回true</span></span><br><span class="line"><span class="built_in">isupper</span>()  <span class="comment">//如果参数是大写字母，函数返回true</span></span><br><span class="line"><span class="built_in">isxdigit</span>() <span class="comment">//如果参数是十六进制数字，即0－9、a－f、A－F，函数返回true</span></span><br><span class="line"><span class="built_in">tolower</span>()  <span class="comment">//如果参数是大写字符，返回其小写，否则返回该参数</span></span><br><span class="line"><span class="built_in">toupper</span>()  <span class="comment">//如果参数是小写字符，返回其大写，否则返回该参数</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模电复习1</title>
      <link href="2017/12/04/%E6%A8%A1%E7%94%B5%E5%A4%8D%E4%B9%A01/"/>
      <url>2017/12/04/%E6%A8%A1%E7%94%B5%E5%A4%8D%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h2 id="00-01-绪论"><a class="markdownIt-Anchor" href="#00-01-绪论"></a> 00-01 绪论</h2><ol><li>为什么要学模电？学什么？怎么学？</li><li>电子技术是研究电子器件、电子电路及其应用的科学技术</li></ol><h2 id="00-02-基本概念"><a class="markdownIt-Anchor" href="#00-02-基本概念"></a> 00-02 基本概念</h2><ol><li>电子系统处理信号，信号是信息的载体</li><li>模拟信号和数字信号的概念</li><li>通过A/D和D/A将模拟和数字信号进行转换</li></ol><h2 id="01-01-本征半导体"><a class="markdownIt-Anchor" href="#01-01-本征半导体"></a> 01-01 本征半导体</h2><ol><li>半导体材料：锗、硅、砷化镓和一些硫化物、氧化物</li><li>半导体的导电特性：热敏性、光敏性、掺杂性</li><li>本征半导体的概念</li><li>本征激发和复合的概念</li><li>自由电子和空穴成为载流子</li></ol><h2 id="01-02-杂质半导体"><a class="markdownIt-Anchor" href="#01-02-杂质半导体"></a> 01-02 杂质半导体</h2><ol><li>掺入三价或者五价元素</li><li>掺入五价元素，如磷原子   N型半导体/电子半导体</li><li>掺入三价元素，如硼原子   P型半导体/空穴半导体</li><li>多子和少子的概念</li><li>在杂志半导体中，多子的浓度主要取决于掺杂浓度（本征激发），少子的浓度与温度有较大关系</li><li>在杂质半导体中，少子数目比未掺杂的数目减少了</li><li>杂质半导体呈电中性，本身不带电</li><li>在杂质半导体中，温度变化，载流子数目变化，多子和少子数目变化相同，浓度变化不同，少子浓度变化大</li></ol><h2 id="01-03-pn结"><a class="markdownIt-Anchor" href="#01-03-pn结"></a> 01-03 PN结</h2><ol><li>空间电荷区的概念及形成（耗尽层，势垒区）</li><li>内电场的概念，内电场阻碍多子运动，少子在内电场的作用下运动，称为漂移运动</li><li>达到动态平衡，空间电荷区厚度保持不变</li><li>掺杂浓度不同，空间电荷区在两种不同杂质半导体的厚度不同，浓度低的厚度大</li><li>加正偏电压，产生外电场，多子在外电场的作用下定向移动形成正向电流</li><li>加正偏电压，产生外电场，外电场阻碍多子的运动，促进少子漂移运动，增大空间电荷区厚度</li><li>温度越高，少子浓度越大，反向电流越大</li><li>势垒电容<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">C_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，扩散电容<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">C_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的概念，总电容=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>b</mi></msub><mo>+</mo><msub><mi>C</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">C_b+C_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>势垒电容，反偏时起主要作用，扩散电容正偏时起主要作用</li><li>任何电子或电气系统都是对频率敏感的</li></ol><h2 id="02-01-二极管的组成"><a class="markdownIt-Anchor" href="#02-01-二极管的组成"></a> 02-01 二极管的组成</h2><ol><li>二极管的分类：小功率、大功率、稳压、点接触型、面接触型、平面型</li><li>点接触型：结面积小，结允许电流小，结电容小，最高工作频率高</li><li>面接触型：结面积大，结允许电流大，结电容大，最高工作频率底</li><li>平面型：结面积可大可小，小的工作频率高，大的允许电流大</li></ol><h2 id="02-02-二极管的伏安特性及电流方程"><a class="markdownIt-Anchor" href="#02-02-二极管的伏安特性及电流方程"></a> 02-02 二极管的伏安特性及电流方程</h2><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i=f(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span></p></li><li><p>测量电路</p></li><li><p>曲线图，特点：非线性</p></li><li><p>工作区划分：死区，导通区，反向截至区，反向击穿区</p></li><li><p>反向饱和电流和导通压降在图中的位置及各种半导体材料的值</p></li><li><p>电击穿（可逆）：雪崩击穿（掺杂浓度低），齐纳击穿（掺杂浓度高）</p></li><li><p>热击穿（不可逆）</p></li><li><p>特性方程：<img src="https://s1.ax1x.com/2020/09/30/0K9YCj.png" alt="" /></p><p>温度电压当量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mi>T</mi></msub><mo>=</mo><mn>26</mn><mi>m</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">U_T =26mv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span></p></li><li><p>正向偏置: <img src="https://s1.ax1x.com/2020/09/30/0K9s54.png" alt="" /></p><p>反向偏置，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>D</mi></msub><mo>≈</mo><msub><mi>I</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">I_D\approx I_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>正向特性为指数曲线，反向特性为横轴平行线</p></li><li><p>电压不变，温度增大，正向特性曲线左移，反向特性曲线下移</p></li><li><p>温度对单行特性的影响较大</p></li><li><p>二极管的动态电阻个静态电阻的概念</p></li><li><p>静态电阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>D</mi></msub><mo>=</mo><mfrac><msub><mi>V</mi><mi>D</mi></msub><msub><mi>I</mi><mi>D</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">R_D=\frac{V_D}{I_D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3339409999999998em;vertical-align:-0.44530499999999995em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8886359999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.410305em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.22222em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44530499999999995em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>动态电阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>D</mi></msub><mo>=</mo><mfrac><mrow><mi mathvariant="normal">Δ</mi><msub><mi>V</mi><mi>D</mi></msub></mrow><mrow><mi mathvariant="normal">Δ</mi><msub><mi>I</mi><mi>D</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">r_D=\frac{\Delta V_D}{\Delta I_D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3339409999999998em;vertical-align:-0.44530499999999995em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8886359999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.410305em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.22222em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44530499999999995em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li></ol><h2 id="02-03-二极管的主要参数"><a class="markdownIt-Anchor" href="#02-03-二极管的主要参数"></a> 02-03 二极管的主要参数</h2><ol><li>最大整流电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">I_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：二极管长期使用时允许二极管的最大正向平均电流</li><li>最大反向工作电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">U_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：保证二极管不被击穿而给出的反向峰值电压，一般是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>B</mi><mi>R</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{BR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>反向电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">I_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：二极管加规定工作电压时的反向电流</li><li>最高工作频率<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>M</mi></msub></mrow><annotation encoding="application/x-tex">f_M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：取决于PN结的结电容大小，超过的话，单向导电性变得较差</li><li>选用二极管的一般原则：<ul><li>要求导通压降较小时选锗管，要求反向电流小时选硅管</li><li>要求工作电流大时选面接触型</li><li>要求频率高时选点接触型</li><li>要求反向击穿电压高时选硅管</li><li>要求温度特性好时选硅管</li></ul></li><li>为什么二极管的反向饱和电流与所加的电压基本没有关系，而当温度升高时又明显增大</li><li>怎样用万用表判断二极管的正负极和管子的好坏</li><li>用万用表的X10档测得二极管的正向电阻为200欧姆，若用X100档测量，读数会有什么变化</li></ol><h2 id="03-01-二极管电路的分析思路"><a class="markdownIt-Anchor" href="#03-01-二极管电路的分析思路"></a> 03-01 二极管电路的分析思路</h2><ol><li><p>电源反接保护电路</p></li><li><p>叠加原理，信号响应=直流响应+交流响应</p></li><li><p>静态和动态的概念</p></li><li><p>分析电路先静态后动态</p></li><li><p>符号规定：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 直流分量（大符号，大下标）</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">i_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 交流分量（小符号，小下标）</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">i_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 电流总瞬时值（小符号，大下标）</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">I_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 电流有效值（大符号，小下标）</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>b</mi><mi>m</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{bm}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 交流幅值</li></ul></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>B</mi></msub><mo>=</mo><msub><mi>I</mi><mi>B</mi></msub><mo>+</mo><msub><mi>i</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">i_B=I_B+i_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>交流信号驮载在直流信号之上</p></li><li><p>分析方法：</p><ul><li>数值求解法</li><li>图解法</li><li>等效模型分析方法</li></ul></li></ol><h2 id="03-02-二极管电路图解分析方法"><a class="markdownIt-Anchor" href="#03-02-二极管电路图解分析方法"></a> 03-02 二极管电路图解分析方法</h2><ol><li>图解分析：利用器件伏安特性曲线和外电路的特性曲线，通过作图的方法求解电路问题</li><li>静态分析：假设交流信号为0，得到直流通路，结合外电路的特性曲线得到静态工作点Q(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>D</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>D</mi></msub></mrow><annotation encoding="application/x-tex">I_D,V_D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)</li><li>动态分析：直流电源置0，得到交流通路，在静态工作点基础上，进行小信号分析</li><li>图解法：<ul><li>优点：直观，帮助理解电路参数对特性的影响</li><li>缺点：有作图误差，某些参数无法求取</li><li>前提：已知器件的实际伏安特性曲线</li></ul></li><li>例题：<br /><img src="https://s1.ax1x.com/2020/10/04/0Jl5L9.png" alt="0Jl5L9.png" /><br /><img src="https://s1.ax1x.com/2020/10/04/0Jl6I0.png" alt="0Jl6I0.png" /></li></ol><h2 id="03-03-二极管的等效模型"><a class="markdownIt-Anchor" href="#03-03-二极管的等效模型"></a> 03-03 二极管的等效模型</h2><ol><li><p>特性曲线具有局部线性的特性</p></li><li><p>等效电路：选择合适的原件，等效反应设备或系统在特定工作区域的实际端口特性</p><p>建模——线性化——应用线性电路分析方法分析电路</p></li><li><p>理想模型</p><p><img src="https://s1.ax1x.com/2020/10/04/08TlAH.png" alt="08TlAH.png" /></p><p><img src="https://s1.ax1x.com/2020/10/04/08TaDS.png" alt="08TaDS.png" /></p><p><img src="https://s1.ax1x.com/2020/10/04/08TdHg.png" alt="08TdHg.png" /></p></li><li><p>三个模型成立的条件：二极管工作在线性区</p></li></ol><h2 id="03-04-二极管等效模型分析方法"><a class="markdownIt-Anchor" href="#03-04-二极管等效模型分析方法"></a> 03-04 二极管等效模型分析方法</h2><ol><li><p>定性分析：</p><ul><li>将二极管断开</li><li>分析二极管阴阳两极接入点间电压的极性和大小</li></ul></li><li><p>定量分析：</p><ul><li>根据所选择的等效模型得到等效电路</li><li>利用线性电路分析方法分析电路</li></ul></li><li><p><img src="https://s1.ax1x.com/2020/10/04/08qqWd.png" alt="08qqWd.png" /></p><p><img src="https://s1.ax1x.com/2020/10/04/08LEyq.png" alt="08LEyq.png" /></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>D</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{DD}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>比较小时，选折线模型比较精确</p></li></ol><h2 id="03-05-常见二极管应用电路"><a class="markdownIt-Anchor" href="#03-05-常见二极管应用电路"></a> 03-05 常见二极管应用电路</h2><ol><li><p>限幅电路：</p><p><img src="https://s1.ax1x.com/2020/10/04/0J1Okq.png" alt="0J1Okq.png" /></p></li><li><p>门电路：</p><p><img src="https://s1.ax1x.com/2020/10/04/0GkHkd.png" alt="0GkHkd.png" /></p></li><li><p>其他电路</p><ul><li>整流电路</li><li>滤波电路</li><li>双电源电路</li><li>供电门</li><li>倍压电路</li></ul></li></ol><h2 id="04-01-稳压二极管基础"><a class="markdownIt-Anchor" href="#04-01-稳压二极管基础"></a> 04-01 稳压二极管基础</h2><ol><li><p>符号</p><p><img src="https://s1.ax1x.com/2020/10/04/0JN681.png" alt="0JN681.png" /></p></li><li><p>稳压原理和过程：</p><p><img src="https://s1.ax1x.com/2020/10/04/0JUC2q.png" alt="0JUC2q.png" /></p></li></ol><h2 id="04-02-稳压二极管的应用"><a class="markdownIt-Anchor" href="#04-02-稳压二极管的应用"></a> 04-02 稳压二极管的应用</h2><ol><li><p>限流电阻选择：</p><p><img src="https://s1.ax1x.com/2020/10/05/0Ja3pn.png" alt="0Ja3pn.png" /></p><p><img src="https://s1.ax1x.com/2020/10/05/0JaDpR.png" alt="0JaDpR.png" /></p></li><li><p>例题：</p><p><img src="https://s1.ax1x.com/2020/10/05/0JauTg.png" alt="0JauTg.png" /></p><p><img src="https://s1.ax1x.com/2020/10/05/0JUXS1.png" alt="0JUXS1.png" /></p></li><li><p>稳压管的特点：</p><ul><li>稳压管工作在反向击穿区；普通二极管工作在正向导通区</li><li>稳压管反向特性比普通二极管陡，电流虽然在较大范围内变化，但稳压管两端电压变化很小，故具有稳压作用</li><li>稳压管反向击穿电压比普通二极管低：一般二极管25-50V,稳压管则较低，6v左右的稳压管最稳定</li><li>稳压管去掉反向击穿电压后，又恢复正常；而普通二极管则失去单向导电性，易于损坏</li></ul></li></ol><h2 id="04-03-其他类型的二极管"><a class="markdownIt-Anchor" href="#04-03-其他类型的二极管"></a> 04-03 其他类型的二极管</h2><p><img src="https://s1.ax1x.com/2020/10/04/0J8C28.png" alt="0J8C28.png" /></p><h2 id="05-01-晶体管的结构和工作原理"><a class="markdownIt-Anchor" href="#05-01-晶体管的结构和工作原理"></a> 05-01 晶体管的结构和工作原理</h2><ol><li>晶体管是一种把输入电流进行放大的半导体器件</li><li>分类：NPN，PNP型</li><li>三个极：发射极（e），集电极（c），基极（b），三个区：发射区，集电区，基区，两个结：发射结，集电区</li><li>图标箭头总是从P型指向N型</li></ol><h2 id="05-02-晶体管的放大原理"><a class="markdownIt-Anchor" href="#05-02-晶体管的放大原理"></a> 05-02 晶体管的放大原理</h2><ol><li><p>晶体管能实现放大，必须从内部结构和外部偏置条件来保证</p></li><li><p>基区：最薄，掺杂浓度最低，传递和控制载流子</p></li><li><p>发射区：掺杂浓度最高，发射载流子</p></li><li><p>集电极：面积最大，收集载流子</p></li><li><p>集电极和发射极不能混用</p></li><li><p>外部满足条件：发射结正偏，集电极反偏</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>E</mi></msub><mo>=</mo><msub><mi>I</mi><mrow><mi>E</mi><mi>N</mi></mrow></msub><mo>+</mo><msub><mi>I</mi><mrow><mi>E</mi><mi>P</mi></mrow></msub><mo>=</mo><msub><mi>I</mi><mrow><mi>C</mi><mi>N</mi></mrow></msub><mo>+</mo><msub><mi>I</mi><mrow><mi>B</mi><mi>N</mi></mrow></msub><mo>+</mo><msub><mi>I</mi><mrow><mi>E</mi><mi>P</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_E=I_{EN}+I_{EP}=I_{CN}+I_{BN}+I_{EP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub><mo>=</mo><msub><mi>I</mi><mrow><mi>B</mi><mi>N</mi></mrow></msub><mo>+</mo><msub><mi>I</mi><mrow><mi>E</mi><mi>P</mi></mrow></msub><mo>−</mo><msub><mi>I</mi><mrow><mi>C</mi><mi>B</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_B=I_{BN}+I_{EP}-I_{CBO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub><mo>=</mo><msub><mi>I</mi><mrow><mi>C</mi><mi>N</mi></mrow></msub><mo>+</mo><msub><mi>I</mi><mrow><mi>E</mi><mi>P</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_C=I_{CN}+I_{EP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub><mo>=</mo><msub><mi>I</mi><mi>B</mi></msub><mo>+</mo><msub><mi>I</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">I_C=I_B+I_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">I_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在B，C极之间分配比例主要取决于基区宽度，发射区多子浓度，与外加电压无关</p></li><li><p>参数定义：</p><p><img src="https://s1.ax1x.com/2020/10/11/0cYdx0.png" alt="0cYdx0.png" /></p></li><li><p>重要结论：</p><p><img src="https://s1.ax1x.com/2020/10/11/0cYDqU.png" alt="0cYDqU.png" /></p></li></ol><h2 id="05-03-晶体管的伏安特性"><a class="markdownIt-Anchor" href="#05-03-晶体管的伏安特性"></a> 05-03 晶体管的伏安特性</h2><ol><li><p>晶体管的伏安特性：管子各电极电压与电流的关系曲线，是管子内部载流子运动的外部表现，反映了晶体管的性能</p></li><li><p>测量晶体管特性的试验电路：</p><p><img src="https://s1.ax1x.com/2020/10/11/0ctnwF.png" alt="0ctnwF.png" /></p></li><li><p>输入特性曲线：</p><p><img src="https://s1.ax1x.com/2020/10/11/0ctdFH.png" alt="0ctdFH.png" /></p></li><li><p>输出特性曲线：</p><p><img src="https://s1.ax1x.com/2020/10/11/0ctwYd.png" alt="0ctwYd.png" /></p></li></ol><h2 id="05-04-晶体管的工作区"><a class="markdownIt-Anchor" href="#05-04-晶体管的工作区"></a> 05-04 晶体管的工作区</h2><ol><li><p>放大区：</p><p><img src="https://s1.ax1x.com/2020/10/11/0cNdBT.png" alt="0cNdBT.png" /></p></li><li><p>截止区：</p><p><img src="https://s1.ax1x.com/2020/10/11/0cNwHU.png" alt="0cNwHU.png" /></p></li><li><p>饱和区：</p><p><img src="https://s1.ax1x.com/2020/10/11/0cNr4J.png" alt="0cNr4J.png" /></p></li><li><p>比较：</p><p><img src="https://s1.ax1x.com/2020/10/11/0cNTCd.png" alt="0cNTCd.png" /></p></li><li><p>当晶体管饱和时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>约等于0，集射之间如同开关的接通，其间电阻很小，当晶体管饱和时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">I_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>约等于0，集射之间如同开关的断开，其间电阻很大，可见，晶体管除了放大作用外，还有开关作用</p></li><li><p>晶体管工作状态的判定：</p><ul><li>三极管结偏置判定法</li><li>三极管电流关系判定法</li></ul></li><li><p>结偏置判定法：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">发射结</th><th style="text-align:center">集电结</th></tr></thead><tbody><tr><td style="text-align:center">截止</td><td style="text-align:center">零偏或反偏</td><td style="text-align:center">反偏</td></tr><tr><td style="text-align:center">放大</td><td style="text-align:center">正偏</td><td style="text-align:center">反偏</td></tr><tr><td style="text-align:center">饱和</td><td style="text-align:center">正偏</td><td style="text-align:center">正偏或零偏</td></tr></tbody></table></li><li><p>饱和区：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub><mo>≈</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">U_{CE}\approx 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li>临界饱和时集电极电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>S</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mrow><mi>C</mi><mi>C</mi></mrow></msub><mo>−</mo><msub><mi>U</mi><mrow><mi>E</mi><mi>S</mi></mrow></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>R</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">I_{CS}=(V_{CC}-U_{ES})/R_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>$I_{BS}=I_{CS}/{\beta}</li></ul></li><li><p>电流关系判定法：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">I_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></th><th style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">I_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">截止</td><td style="text-align:center">0</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><msub><mi>I</mi><mrow><mi>C</mi><mi>E</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">&lt;I_{CEO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><msub><mi>I</mi><mrow><mi>C</mi><mi>E</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">&lt;I_{CEO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center">放大</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>I</mi><mi>B</mi></msub><mo>&lt;</mo><msub><mi>I</mi><mrow><mi>B</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">0&lt;I_B&lt;I_{BS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">\beta I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub><mo>+</mo><msub><mi>I</mi><mi>C</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_B+I_C=(1+\beta)I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center">饱和</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo><msub><mi>I</mi><mrow><mi>B</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">&gt;I_{BS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><mi>β</mi><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">&lt;\beta I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">&lt;(1+\beta)I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table></li><li><p>例题：</p><p><img src="https://s1.ax1x.com/2020/10/11/0gUwXq.png" alt="0gUwXq.png" /></p><p><img src="https://s1.ax1x.com/2020/10/11/0gUa1s.png" alt="0gUa1s.png" /></p><p><img src="https://s1.ax1x.com/2020/10/11/0gUYtg.png" alt="0gUYtg.png" /></p></li></ol><h2 id="05-05-晶体管的主要参数"><a class="markdownIt-Anchor" href="#05-05-晶体管的主要参数"></a> 05-05 晶体管的主要参数</h2><ol><li><p>共射极电流放大系数：</p><ul><li>直流放大系数（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>F</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{FE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）</li><li>交流放大系数（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{fe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>）</li></ul></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>β</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.08888em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.89444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.81444em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>含义不同，但在特性曲线近于平行等距并且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>E</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CEO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>较小的情况下，两者数值接近</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>的值并不固定，随<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">I_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的变化而变化</p></li><li><p>共基极电流放大系数：</p><ul><li>直流放大系数</li><li>交流放大系数</li></ul></li><li><p>两种放大系数的换算</p></li><li><p>极间反向电流</p><ul><li>集-基极反向截止电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>B</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CBO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：硅管：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>B</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CBO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为纳安数量级。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>B</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CBO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是由少数载流子的漂移运动所形成的电流，受温度的影响大</li><li>集-射极反向截止电流（穿透电流）：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>E</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CEO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>受温度的影响大，温度升高，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>E</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CEO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>升高，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">I_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>也相应升高，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>E</mi><mi>O</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>β</mi><mo stretchy="false">)</mo><msub><mi>I</mi><mrow><mi>C</mi><mi>B</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CEO}=(1+\beta)I_{CBO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li><li><p>极限参数</p><ul><li><p>集电极最大允许电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>M</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>当值下降到线性放大区<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>值的70%时，所对应的集电极电流称为集电极最大允许电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>M</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>集射极反向击穿电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mo stretchy="false">(</mo><mi>B</mi><mi>R</mi><mo stretchy="false">)</mo><mi>C</mi><mi>E</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{(BR)CEO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span></p><p>当集-射极之间的电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>超过一定的数值时，三极管就会被击穿。</p></li><li><p>集电极最大允许功率损耗<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>C</mi><mi>M</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{CM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>集电极电流通过集电结时所产生的功耗，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>C</mi></msub><mo>=</mo><msub><mi>I</mi><mi>C</mi></msub><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub><mo>&lt;</mo><msub><mi>P</mi><mrow><mi>C</mi><mi>M</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_C=I_CU_{CE}&lt;P_{CM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li></ul></li><li><p>由三个极限参数可画出三极管的安全工作区</p><p><img src="https://s1.ax1x.com/2020/10/11/0grGKH.png" alt="0grGKH.png" /></p></li><li><p>温度的影响：</p><p><img src="https://s1.ax1x.com/2020/10/11/0gsidI.png" alt="0gsidI.png" /></p><p><img src="https://s1.ax1x.com/2020/10/11/0gsPeA.png" alt="0gsPeA.png" /></p></li></ol><h2 id="06-01-放大的概念与放大电路的性能指标"><a class="markdownIt-Anchor" href="#06-01-放大的概念与放大电路的性能指标"></a> 06-01 放大的概念与放大电路的性能指标</h2><ol><li><p>放大电路的功能时把微弱的电信号（电压、电流和功率）放大到所需的量级</p></li><li><p>放大的本质：能量的控制和转换</p></li><li><p>放大的基本要求：不失真——放大的前提</p></li><li><p>信号响应=交流信号响应+直流信号响应</p></li><li><p>静态：放大电路没有输入信号时，电路中各点的电流和电压是直流信号，称为直流工作状态或静止工作状态，简称静态</p></li><li><p>动态：放大电路有输入信号时，电路中的电压和电流随交流信号而变化，称为动态</p></li><li><p>静态参数：</p><p><img src="https://s1.ax1x.com/2020/10/11/0gcN6S.png" alt="0gcN6S.png" /></p></li><li><p>放大电路建立正确的静态工作点，是为了使三极管工作在线性区，以保证信号不失真</p></li><li><p>动态参数：</p><ul><li>放大倍数</li><li>输入电阻</li><li>输出电阻</li><li>非线性失真</li><li>最大输出幅度</li><li>通频带（频率响应）</li><li>最大输出功率、效率、信号噪声比、抗干扰能力</li></ul></li><li><p>放大倍数：表示放大器的放大能力</p><p><img src="https://s1.ax1x.com/2020/10/11/0gf1R1.png" alt="0gf1R1.png" /></p></li><li><p>输入电阻：从放大电路的输入端看进去的等效电阻，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub><mo>=</mo><msub><mi>U</mi><mi>I</mi></msub><mi mathvariant="normal">/</mi><msub><mi>I</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">R_i=U_I/I_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，一般来说，电压放大，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">R_I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大越好</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">R_I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">I_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>就越小，从信号源索取的电流越小</li><li>当信号源有内阻时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">R_I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>就越接近<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">u_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li><li><p>输出电阻： 从放大电路的输出端看进去的等效电阻，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>o</mi></msub><mo>=</mo><msub><mi>u</mi><mi>o</mi></msub><mi mathvariant="normal">/</mi><msub><mi>i</mi><mi>o</mi></msub><mo stretchy="false">(</mo><msub><mi>R</mi><mi>L</mi></msub><mo>=</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><msub><mi>u</mi><mi>s</mi></msub><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R_o=u_o/i_o (R_L=\infty,u_s=0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">R_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越小，放大电路带负载能力越强，反之则差</p></li></ol><h2 id="06-02-放大电路的偏置和组态"><a class="markdownIt-Anchor" href="#06-02-放大电路的偏置和组态"></a> 06-02 放大电路的偏置和组态</h2><ol><li><p>组成放大电路时必须遵循以下几个原则：</p><ul><li>静态：<ul><li>外加直流电源的极性必须使三极管发射结正偏，集电结反偏以保证其工作于放大区</li><li>配置大小合适的直流电源和电阻以保证合适的静态工作点</li></ul></li><li>动态：动态信号能够作用于晶体管的输入回路，在负载上能够获得放大了的动态信号：<ul><li>输入回路的接法应该使输入电压的变化量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\Delta u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>能够传送到基极回路，并使基极电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">i_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>产生相应的变化量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msub><mi>i</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">\Delta i_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>输出回路的接法应使集电极电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">i_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的变化量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msub><mi>i</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">\Delta i_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>能够转化为集电极电压的变化<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><msub><mi>u</mi><mrow><mi>c</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\Delta u_{ce}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,并传送到输出端</li></ul></li></ul></li><li><p>偏置：利用直流电源，为电路设置固定直流电压和电流（即静态工作点）的过程</p></li><li><p>偏置电路要求：</p><ul><li>提供晶体管所需的静态工作点</li><li>保证静态工作点的稳定</li></ul></li><li><p>固定偏置</p><p><a href="https://imgchr.com/i/0jGFsI"><img src="https://s1.ax1x.com/2020/10/18/0jGFsI.png" alt="0jGFsI.png" /></a></p><p>基极回路确定，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不变，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>改变，静态工作点也改变，不能稳定静态工作点</p></li><li><p>射极偏置</p><p><a href="https://imgchr.com/i/0jYOLn"><img src="https://s1.ax1x.com/2020/10/18/0jYOLn.png" alt="0jYOLn.png" /></a></p><p><a href="https://imgchr.com/i/0jtiQJ"><img src="https://s1.ax1x.com/2020/10/18/0jtiQJ.png" alt="0jtiQJ.png" /></a></p><p>射极偏置引入了直流负反馈</p></li><li><p>分压式偏置</p><p><a href="https://imgchr.com/i/0jtuWD"><img src="https://s1.ax1x.com/2020/10/18/0jtuWD.png" alt="0jtuWD.png" /></a></p></li><li><p>电压反馈式偏置</p><p><a href="https://imgchr.com/i/0jtwlQ"><img src="https://s1.ax1x.com/2020/10/18/0jtwlQ.png" alt="0jtwlQ.png" /></a></p></li><li><p>常用偏置方式</p><ul><li>固定偏置</li><li>射极偏置</li><li>分压偏置</li><li>电压反馈式偏置</li></ul></li><li><p>三种组态</p><ul><li><p>共射放大电路</p></li><li><p>共集放大电路</p></li><li><p>共基放大电路</p></li></ul><p><a href="https://imgchr.com/i/0jNp7t"><img src="https://s1.ax1x.com/2020/10/18/0jNp7t.png" alt="0jNp7t.png" /></a></p></li><li><p>判定组态的方法：哪一极既没有做输入也没有做输出，则为共这一级</p></li><li><p>阻容耦合共射放大电路和直接耦合共射放大电路</p><p><a href="https://imgchr.com/i/0jNOU0"><img src="https://s1.ax1x.com/2020/10/18/0jNOU0.png" alt="0jNOU0.png" /></a></p></li></ol><h2 id="06-03-共射放大电路的工作原理"><a class="markdownIt-Anchor" href="#06-03-共射放大电路的工作原理"></a> 06-03 共射放大电路的工作原理</h2><ol><li><p>输入变化引起输出变化的过程</p><p><a href="https://imgchr.com/i/0jd19f"><img src="https://s1.ax1x.com/2020/10/18/0jd19f.png" alt="0jd19f.png" /></a></p><p><a href="https://imgchr.com/i/0jdWU1"><img src="https://s1.ax1x.com/2020/10/18/0jdWU1.png" alt="0jdWU1.png" /></a></p></li><li><p>直流、交流分量共存，两种信号分量的作用不同</p></li><li><p>直流分量是基础。保证三极管正确的偏置，保证三极管工作在放大状态，为放大电路提供合适的静态工作点，保证放大电路不失真的放大信号</p></li><li><p>交流分量是被放大的量</p></li></ol><h2 id="07-01-直流通路和交流通路"><a class="markdownIt-Anchor" href="#07-01-直流通路和交流通路"></a> 07-01 直流通路和交流通路</h2><ol><li>直流时基础，交流时目的，交流驮载在直流之上</li><li>放大电路中的电抗元件对直流信号和交流信号呈现的阻抗时不同的</li><li>电容：隔直通交，对直流信号的阻抗是无穷大，视为断路；对交流信号在电容上的压降可以忽略，可视为短路</li><li>电感：隔交通直，对直流信号而言阻抗很小，视为短路；对交流呈现感抗<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi><mi>L</mi></mrow><annotation encoding="application/x-tex">\omega L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord mathdefault">L</span></span></span></span>，理想下视为断路</li><li>理想直流电压源：由于其电压恒定不变，即电压变化量等子零，故在交流作用下相当于短路</li><li>理想直流电压源：由于其电流恒定不变，即电流变化量等子零，故在交流作用下相当于开路</li><li>直流通路：无交流信号源作用时，电流（直流电流）流经的通路，用来分析静态工作点</li><li>交流通路：在输入信号的作用下，交流信号流经的通路，用来计算电压放大倍数，输入电阻，输出电阻等动态性能指标</li><li>画好放大电路交直流通路的意义：<ul><li>是进行静态分析和动态分析的基础</li><li>直流通路——识别偏置方式，定性判断静态特性</li><li>交流通路——识别电路组态，定性判断交流特性</li><li>判断电路是否满足放大电路的组成要求</li></ul></li><li>如何画直流通路？<ul><li>交流电压信号源短路，保留内阻</li><li>交流电流信号源开路，保留内阻</li><li>电容视为开路</li><li>电感视为短路</li></ul></li><li>如何画交流通路？<ul><li>大容量电容视为短路</li><li>无内阻的直流电源视为短路</li><li>关于电感处理：在中低频电路中，电感元件往往体积、重量比较大，所以一般在电路设计时都避免使用电感。 高频电路中，电感使用就比较多了，分析时，当然是用“隔交通直”来处理扼流圈等电感量较大的电感元件了。若在谐振、耦合等电路中，电感量是重要参数，不能简化为短路或断路。</li></ul></li></ol><h2 id="07-02-静态分析估算法"><a class="markdownIt-Anchor" href="#07-02-静态分析估算法"></a> 07-02 静态分析估算法</h2><ol><li><p>静态分析的目标：求取静态工作点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>B</mi><mi>Q</mi></mrow></msub><mo separator="true">,</mo><msub><mi>U</mi><mrow><mi>B</mi><mi>E</mi><mi>Q</mi></mrow></msub><mo separator="true">,</mo><msub><mi>I</mi><mrow><mi>C</mi><mi>Q</mi></mrow></msub><mo separator="true">,</mo><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi><mi>Q</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{BQ},U_{BEQ},I_{CQ},U_{CEQ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>静态分析的意义：</p><ul><li>确认三极管的工作状态</li><li>是动态分析的基础</li></ul></li><li><p>静态分析的方法</p><ul><li>估算法</li><li>图解法</li></ul></li><li><p>估算法步骤</p><p><a href="https://imgchr.com/i/0jfoBq"><img src="https://s1.ax1x.com/2020/10/18/0jfoBq.png" alt="0jfoBq.png" /></a></p></li><li><p>例题</p><p><a href="https://imgchr.com/i/0jhSD1"><img src="https://s1.ax1x.com/2020/10/18/0jhSD1.png" alt="0jhSD1.png" /></a></p></li><li><p>估算法的一般步骤：</p><ul><li>画出放大电路的直流通路</li><li>根据基极回路求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>由BJT的电流分配关系求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">I_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>由集电极回路求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li></ol><h2 id="07-03-静态分析图解法"><a class="markdownIt-Anchor" href="#07-03-静态分析图解法"></a> 07-03 静态分析图解法</h2><ol><li><p>静态工作点(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>B</mi><mi>Q</mi></mrow></msub><mo separator="true">,</mo><msub><mi>U</mi><mrow><mi>B</mi><mi>E</mi><mi>Q</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{BQ},U_{BEQ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>)和(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>C</mi><mi>Q</mi></mrow></msub><mo separator="true">,</mo><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi><mi>Q</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{CQ},U_{CEQ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>)分别对应于输入输出特性曲线上的一个点</p></li><li><p>图解法：利用晶体管的特性曲线，通过作图的方法分析静态工作点</p></li><li><p>图解法的优点：</p><ul><li>能直观地分析各个参数对静态工作点的影响</li><li>能直观地了解静态工作点变化对放大电路静态特性的影响</li></ul></li><li><p>图解法前提：已知器件的实际伏安特性曲线</p></li><li><p>输入和输出回路方程</p><p><a href="https://imgchr.com/i/0j5zuj"><img src="https://s1.ax1x.com/2020/10/18/0j5zuj.png" alt="0j5zuj.png" /></a></p></li><li><p>电路参数对静态工作点的影响</p><p><a href="https://imgchr.com/i/0j7VxS"><img src="https://s1.ax1x.com/2020/10/18/0j7VxS.png" alt="0j7VxS.png" /></a></p><p><a href="https://imgchr.com/i/0j71P0"><img src="https://s1.ax1x.com/2020/10/18/0j71P0.png" alt="0j71P0.png" /></a></p><p><a href="https://imgchr.com/i/0j7BPx"><img src="https://s1.ax1x.com/2020/10/18/0j7BPx.png" alt="0j7BPx.png" /></a></p><p><a href="https://imgchr.com/i/0j7fII"><img src="https://s1.ax1x.com/2020/10/18/0j7fII.png" alt="0j7fII.png" /></a></p></li><li><p>如何有效地调整静态工作点，一般调节<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">R_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，改变<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，牵一发而动全身且不会影响输出特性</p></li></ol><h2 id="08-01-bjt基本放大电路交流分析思路"><a class="markdownIt-Anchor" href="#08-01-bjt基本放大电路交流分析思路"></a> 08-01 BJT基本放大电路交流分析思路</h2><ol><li>交流分析方法：<ul><li>采用非线性电路的分析方法</li><li>等效电路分析法</li><li>图解法</li></ul></li><li>把非线性元件晶体管所组成的放大电路等效为一个线性电路，即把非线性的晶体管线性化，等效为一个线性元件，简化放大电路的分析和设计</li><li>晶体管小信号交流等效模型<ul><li>物理模型<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>参数等效模型</li><li>T参数等效模型</li></ul></li><li>网络参数等效模型<ul><li>h参数等效模型</li><li>y参数等效模型</li><li>z参数等效模型</li></ul></li></ul></li><li>建模的条件：<ul><li>静态工作点合适</li><li>交流小信号</li><li>中低频信号</li></ul></li></ol><h2 id="08-02-bjt混合参数模型的建立"><a class="markdownIt-Anchor" href="#08-02-bjt混合参数模型的建立"></a> 08-02 BJT混合参数模型的建立</h2><ol><li><p>在交流通路中可将晶体管看成为一个二端口网络，输入回路输、出回路各为一个端口</p><p><img src="https://s1.ax1x.com/2020/10/18/0XabIP.png" alt="0XabIP.png" /></p></li><li><p>用两个函数分别描述输入和输出端口特性</p><p><img src="https://s1.ax1x.com/2020/10/18/0Xdli6.png" alt="0Xdli6.png" /></p><p><img src="https://s1.ax1x.com/2020/10/18/0XwSSO.png" alt="0XwSSO.png" /></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为常数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">i_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为常数的意义</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=常数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><msub><mi>u</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">du_{CE}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，即输出端只有直流输出，没有交流输出，相当于输出端交流短路</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">i_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=常数，即输入端只有直流电流输入，没有交流电流，相当于输入端交流开路</li></ul><p>因为此时只有直流电流和电压，所以是在静态工作点附近的情况</p></li><li><p>完整的混合参数等效模型</p><p><img src="https://s1.ax1x.com/2020/10/18/0X0aPP.png" alt="0X0aPP.png" /></p></li></ol><h2 id="08-03-bjt混合参数模型的简化"><a class="markdownIt-Anchor" href="#08-03-bjt混合参数模型的简化"></a> 08-03  BJT混合参数模型的简化</h2><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>i</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{ie}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>恒定（输出端交流短路）时的输入电阻</p><ul><li>物理意义：反映了输入电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>b</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{be}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对输入电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">i_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的控制能力</li><li>几何意义：表示输入特性的Q点处的切线的斜率的倒数</li><li>常用符号：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">r_{be}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>大小量级：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span></li></ul></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>r</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{re}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>恒定（输入端交流开路）时的反向电压传输比</p><ul><li>物理意义：反映了输出回路<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对输入回路<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>B</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{BE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>影响的程度</li><li>几何意义：Q点附近输入特性曲线横向的疏密程度</li><li>常用符号：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">\mu T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></li><li>大小量级：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>4</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span></li></ul></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{fe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>：恒定（输出端交流短路）时的电流放大系数</p><ul><li>物理意义：晶体管对电流的放大能力</li><li>几何意义：Q点附近输出特性曲线纵向的疏密程度</li><li>常用符号：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span></li><li>大小量级：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li></ul></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>o</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{oe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>恒定（输入端交流开路）时的输出电导</p><ul><li>物理意义：反映了输出电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">u_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对输出电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">i_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的控制能力</li><li>几何意义：输出特性曲线在恒流区的倾斜程度</li><li>常用符号：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>r</mi><mrow><mi>c</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">1/r_{ce}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>大小量级：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span>S</li></ul></li><li><p>简化的h参数等效电路</p><p><a href="https://imgchr.com/i/0XsL0e"><img src="https://s1.ax1x.com/2020/10/18/0XsL0e.png" alt="0XsL0e.png" /></a></p></li></ol><h2 id="08-04-bjt混合参数的确定"><a class="markdownIt-Anchor" href="#08-04-bjt混合参数的确定"></a> 08-04  BJT混合参数的确定</h2><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>的获取：晶体管的参数手册上的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>f</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{fe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">r_{be}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的求解</p><p><img src="https://s1.ax1x.com/2020/10/18/0X2Li4.png" alt="0X2Li4.png" /></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">r_{be}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的意义</p><ul><li>晶体管的动态等效输入电阻</li><li>只有经过静态分析，才能确定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">r_{be}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">r_{be}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值与静态工作点密切相关</li><li>架起了静态与动态的桥梁</li></ul></li><li><p>关于h参数模型的几点说明</p><ul><li>h参数是针对变化量定义的，因此该模型只 能用于分析动态信号，而不能用于分析直流信号</li><li>h参数是在静态工作点的基础上定义的，因此只有晶体管工作于线性区，并且输入信号幅度不大时，此等效模型才成立</li><li>模型中的受控电流方向不能随意假定，必须和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">i_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>方向一致，即当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">i_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>流入基极时，受控电流应从集电极流向发射极</li><li>模型中没有考虑结电容的影响，因此只适用于低频信号，故称低频小信号模型</li><li>NPN和PNP管的模型相同，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">i_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和受控电流方向也相同</li></ul></li></ol><h2 id="08-05-微变等效电路法"><a class="markdownIt-Anchor" href="#08-05-微变等效电路法"></a> 08-05 微变等效电路法</h2><ol><li><p>微变等效电路法：</p><ul><li>动态：放大电路有信号输入(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub><mi mathvariant="normal">≠</mi><mn>0</mn></mrow><annotation encoding="application/x-tex">u_i\neq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>)时的工作状态</li><li>动态分析：计算电压放大倍数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">A_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、输入电阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、输出电阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">r_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>等</li><li>所用电路：放大电路的交流通路</li><li>目的：找出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>u</mi></msub><mi mathvariant="normal">，</mi><msub><mi>r</mi><mi>i</mi></msub><mi mathvariant="normal">，</mi><msub><mi>r</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">A_u，r_i，r_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与电路参数的关系，为设计打下基础</li></ul></li><li><p>步骤：</p><p><a href="https://imgchr.com/i/0vKW0U"><img src="https://s1.ax1x.com/2020/10/19/0vKW0U.png" alt="0vKW0U.png" /></a></p><p><a href="https://imgchr.com/i/0vKO0O"><img src="https://s1.ax1x.com/2020/10/19/0vKO0O.png" alt="0vKO0O.png" /></a></p><p><a href="https://imgchr.com/i/0vMyUe"><img src="https://s1.ax1x.com/2020/10/19/0vMyUe.png" alt="0vMyUe.png" /></a></p><p><a href="https://imgchr.com/i/0vQwGj"><img src="https://s1.ax1x.com/2020/10/19/0vQwGj.png" alt="0vQwGj.png" /></a></p><p><a href="https://imgchr.com/i/0vQWi4"><img src="https://s1.ax1x.com/2020/10/19/0vQWi4.png" alt="0vQWi4.png" /></a></p><p><a href="https://imgchr.com/i/0vliTS"><img src="https://s1.ax1x.com/2020/10/19/0vliTS.png" alt="0vliTS.png" /></a></p></li><li><p>h参数等效模型的适用条件是什么</p></li><li><p>什么情况下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>r</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{re}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>o</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{oe}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的作用可忽略不计</p></li><li><p>如何有效地调整共射极放大电路的放大倍数</p></li></ol><h2 id="09-01-交流负载线分析"><a class="markdownIt-Anchor" href="#09-01-交流负载线分析"></a> 09-01 交流负载线分析</h2><p>假设已经获得器件的实际特性曲线</p><p>画出交流通路</p><p><a href="https://imgchr.com/i/0v1gC4"><img src="https://s1.ax1x.com/2020/10/19/0v1gC4.png" alt="0v1gC4.png" /></a></p><p>输入回路分析</p><p><a href="https://imgchr.com/i/0v175D"><img src="https://s1.ax1x.com/2020/10/19/0v175D.png" alt="0v175D.png" /></a></p><p>输出回路分析</p><p><a href="https://imgchr.com/i/0v3SVf"><img src="https://s1.ax1x.com/2020/10/19/0v3SVf.png" alt="0v3SVf.png" /></a></p><p>交流负载线比直流负载线更陡峭，当空载时，两线重合</p><p><a href="https://imgchr.com/i/0v3lRJ"><img src="https://s1.ax1x.com/2020/10/19/0v3lRJ.png" alt="0v3lRJ.png" /></a></p><p><a href="https://imgchr.com/i/0v30RH"><img src="https://s1.ax1x.com/2020/10/19/0v30RH.png" alt="0v30RH.png" /></a></p><h2 id="09-02-非线性失真分析"><a class="markdownIt-Anchor" href="#09-02-非线性失真分析"></a> 09-02 非线性失真分析</h2><ol><li><p>非线性失真：由于器件特性的非线性引起的输出信号失真</p></li><li><p>截止失真</p><p><a href="https://imgchr.com/i/0v2JaT"><img src="https://s1.ax1x.com/2020/10/19/0v2JaT.png" alt="0v2JaT.png" /></a></p><p>消除方法：适当增加基极电流（减小<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">R_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）可消除失真</p></li><li><p>饱和失真</p><p><a href="https://imgchr.com/i/0vRrlj"><img src="https://s1.ax1x.com/2020/10/19/0vRrlj.png" alt="0vRrlj.png" /></a></p></li><li><p>信号幅度过大产生失真</p><p><a href="https://imgchr.com/i/0vWScd"><img src="https://s1.ax1x.com/2020/10/19/0vWScd.png" alt="0vWScd.png" /></a></p><p>消除方法：减小信号幅度</p></li><li><p>最大不失真输出电压</p><p><a href="https://imgchr.com/i/0vW84U"><img src="https://s1.ax1x.com/2020/10/19/0vW84U.png" alt="0vW84U.png" /></a></p></li><li><p>静态工作点的位置应该适中，既不能太高，也不能低</p></li><li><p>静态工作点的位置尽量设置在交流负载线的中间位置</p></li><li><p>如果输入信号幅度较小，可以适当降低静态工作点，减小管子的静态功耗</p></li><li><p>图解法特点</p><ul><li>分析过程较为直观，有利于进一步理解放大电路的工作原理</li><li>适用手大信号作用下放大电路的动态分析</li><li>不易定量求解，难以分析输入输出电阻、频率特性等</li><li>主要用于观察Q点的位置是否合适，分析波形的非线性失真</li><li>方便估算最大输出幅值的数值</li></ul></li></ol><h2 id="10-01-静态工作点稳定需求分析"><a class="markdownIt-Anchor" href="#10-01-静态工作点稳定需求分析"></a> 10-01 静态工作点稳定需求分析</h2><ol><li><p>在温度变化、三极管老化、电源电压波动等外部因素的影响下，将引起静态工作点的变动，严重时将使放大电路不能正常工作，其中影响最大的时温度的变化</p></li><li><p>固定偏置，温度的影响</p><p><a href="https://imgchr.com/i/0xl2q0"><img src="https://s1.ax1x.com/2020/10/19/0xl2q0.png" alt="0xl2q0.png" /></a></p><p><a href="https://imgchr.com/i/0x3KhD"><img src="https://s1.ax1x.com/2020/10/19/0x3KhD.png" alt="0x3KhD.png" /></a></p></li><li><p>当温度升高时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">I_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>将增加，使Q点沿负载线上移，容易使晶体管T进入饱和区造成饱和失真，甚至引起过热烧坏三极管</p></li><li><p>稳定静态工作点的途径：</p><ul><li>从元件入手<ul><li>选择温度性能好的元件</li><li>经过一定的工艺处理以稳定元件的参数，防止器件老化</li></ul></li><li>从环境入手<ul><li>采取恒温措施</li></ul></li><li>从电路改进入手<ul><li>采用温度补偿</li><li>引入反馈</li></ul></li></ul></li><li><p>固定偏置不能稳定静态工作点，解决方案：改进偏置电路，当温度升高使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">I_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>增加时，能够自动减少<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">I_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，从而抑制Q点的变化，保持Q点基本稳定</p></li></ol><h2 id="10-02-稳定静态工作点的典型电路及其原理"><a class="markdownIt-Anchor" href="#10-02-稳定静态工作点的典型电路及其原理"></a> 10-02 稳定静态工作点的典型电路及其原理</h2><ol><li><p>二极管温度补偿电路</p><p><a href="https://imgchr.com/i/0z9t1g"><img src="https://s1.ax1x.com/2020/10/19/0z9t1g.png" alt="0z9t1g.png" /></a></p></li><li><p>直流负反馈Q点稳定电路</p><p><a href="https://imgchr.com/i/0z95Ax"><img src="https://s1.ax1x.com/2020/10/19/0z95Ax.png" alt="0z95Ax.png" /></a></p></li><li><p>射极偏置（直流电流负反馈）</p><p><a href="https://imgchr.com/i/0zCJV1"><img src="https://s1.ax1x.com/2020/10/19/0zCJV1.png" alt="0zCJV1.png" /></a></p></li><li><p>分压偏置共射放大电路电路</p><p><a href="https://imgchr.com/i/0zAujS"><img src="https://s1.ax1x.com/2020/10/19/0zAujS.png" alt="0zAujS.png" /></a></p><p><img src="https://s1.ax1x.com/2020/10/19/0zi9XQ.png" alt="0zi9XQ.png" /></p></li><li><p>引入负反馈和温度补偿</p><p><a href="https://imgchr.com/i/0zkvfx"><img src="https://s1.ax1x.com/2020/10/19/0zkvfx.png" alt="0zkvfx.png" /></a></p></li><li><p>问题：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是不是越大越好</li><li>动态性能如何</li><li>旁路电容的作用</li><li>有无旁路电容对电路性能的影响</li></ul></li></ol><h2 id="10-03-分压偏置共射放大电路的静态分析"><a class="markdownIt-Anchor" href="#10-03-分压偏置共射放大电路的静态分析"></a> 10-03 分压偏置共射放大电路的静态分析</h2><ol><li><p>戴维南等效法</p><p><a href="https://imgchr.com/i/0zKbn0"><img src="https://s1.ax1x.com/2020/10/19/0zKbn0.png" alt="0zKbn0.png" /></a></p><p><a href="https://imgchr.com/i/0zKnmV"><img src="https://s1.ax1x.com/2020/10/19/0zKnmV.png" alt="0zKnmV.png" /></a></p></li><li><p>估算法</p><p><a href="https://imgchr.com/i/0zMlHf"><img src="https://s1.ax1x.com/2020/10/19/0zMlHf.png" alt="0zMlHf.png" /></a></p></li><li><p>关于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的讨论</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>越大，负反馈越强，电路温度稳定性越好</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>太大其功率损耗也大</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>增大，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">V_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>增高，使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{CE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>减小，导致电路动态范围变窄，减小了最大输出电压幅度，若想保持不变，必须增大<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mrow><mi>C</mi><mi>C</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{CC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不宜取得太大。在小电流工作状态下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>可取几百欧到几千欧，大电流工作时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为几欧到几十欧</p></li></ol><h2 id="10-04-分压偏置共射放大电路的动态分析"><a class="markdownIt-Anchor" href="#10-04-分压偏置共射放大电路的动态分析"></a> 10-04 分压偏置共射放大电路的动态分析</h2><ol><li><p>动态参数求解</p><p><a href="https://imgchr.com/i/0zU6jU"><img src="https://s1.ax1x.com/2020/10/19/0zU6jU.png" alt="0zU6jU.png" /></a></p></li><li><p>如果不加旁路电容</p><p><a href="https://imgchr.com/i/0zUTgK"><img src="https://s1.ax1x.com/2020/10/19/0zUTgK.png" alt="0zUTgK.png" /></a></p><p><a href="https://imgchr.com/i/0zUqDe"><img src="https://s1.ax1x.com/2020/10/19/0zUqDe.png" alt="0zUqDe.png" /></a></p></li><li><p>加旁路电容和不加旁路电容的比较</p><p><a href="https://imgchr.com/i/0zapgf"><img src="https://s1.ax1x.com/2020/10/19/0zapgf.png" alt="0zapgf.png" /></a></p></li><li><p>工程问题</p><ul><li>为了保证分压偏置放大电路能够稳定静态工作点，应合理选择元件参数，满足以下两个条件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mn>2</mn></msub><mo>&gt;</mo><mo>&gt;</mo><msub><mi>I</mi><mi>B</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>B</mi></msub><mo>&gt;</mo><mo>&gt;</mo><msub><mi>U</mi><mrow><mi>B</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_2&gt;&gt;I_B,V_B&gt;&gt;U_{BE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（实际电路中通常取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mn>2</mn></msub><mo>=</mo><mn>10</mn><msub><mi>I</mi><mi>B</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>B</mi></msub><mo>=</mo><mn>3</mn><msub><mi>U</mi><mrow><mi>B</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_2=10I_B,V_B=3U_{BE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">R_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不宜取得太大。在小电流工作状态下，可取几百欧到几干欧</li><li>若要调整分压偏置放大电路的静态工作点，通常的方法是调整上偏置电阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>B</mi><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">R_{B1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>若分压偏上放大电路的静态工作点正常，而放大倍数严重下降，应重点检查旁踏电容<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">C_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是否开路或者失效</li></ul></li></ol><h2 id="11-01-基本共集放大电路"><a class="markdownIt-Anchor" href="#11-01-基本共集放大电路"></a> 11-01 基本共集放大电路</h2><ol><li><p>基本电路结构</p><p><a href="https://imgchr.com/i/0zsAyt"><img src="https://s1.ax1x.com/2020/10/19/0zsAyt.png" alt="0zsAyt.png" /></a></p></li><li><p>静态分析</p><p><a href="https://imgchr.com/i/0zsmTS"><img src="https://s1.ax1x.com/2020/10/19/0zsmTS.png" alt="0zsmTS.png" /></a></p></li><li><p>动态分析</p><ul><li><p>画交流通路</p><p><a href="https://imgchr.com/i/0zsWfH"><img src="https://s1.ax1x.com/2020/10/20/0zsWfH.png" alt="0zsWfH.png" /></a></p></li><li><p>电压放大倍数</p><p><a href="https://imgchr.com/i/0zsH78"><img src="https://s1.ax1x.com/2020/10/20/0zsH78.png" alt="0zsH78.png" /></a></p></li><li><p>电流放大倍数</p><p><a href="https://imgchr.com/i/0zsv1s"><img src="https://s1.ax1x.com/2020/10/20/0zsv1s.png" alt="0zsv1s.png" /></a></p></li><li><p>输入电阻</p><p><a href="https://imgchr.com/i/0zyiAU"><img src="https://s1.ax1x.com/2020/10/20/0zyiAU.png" alt="0zyiAU.png" /></a></p></li><li><p>输出电阻</p><p><a href="https://imgchr.com/i/0zyYjI"><img src="https://s1.ax1x.com/2020/10/20/0zyYjI.png" alt="0zyYjI.png" /></a></p></li></ul></li><li><p>共集放大电路的基本特点</p><ul><li>有电压放大能力，但能够放大电流，因此具有功率放大作用</li><li>输出电压与输入电压的相位相同，输出电压和输入电压的波形几乎相同，故又名射极跟随器</li><li>输入电阻高且与R,有关，减小信号源到放大电路的信号衰减，信号获取能力强</li><li>输出电阻小且与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">R_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>有关，具有恒压输出特性，带负载能力强</li></ul></li><li><p>共集放大电路的应用</p><p><a href="https://imgchr.com/i/0zy7vR"><img src="https://s1.ax1x.com/2020/10/20/0zy7vR.png" alt="0zy7vR.png" /></a></p><p><a href="https://imgchr.com/i/0z69xA"><img src="https://s1.ax1x.com/2020/10/20/0z69xA.png" alt="0z69xA.png" /></a></p><p><a href="https://imgchr.com/i/0z60qx"><img src="https://s1.ax1x.com/2020/10/20/0z60qx.png" alt="0z60qx.png" /></a></p></li></ol><h2 id="11-02-基本共基放大电路"><a class="markdownIt-Anchor" href="#11-02-基本共基放大电路"></a> 11-02 基本共基放大电路</h2><ol><li><p>基本电路结构</p><p><a href="https://imgchr.com/i/BSUOoj"><img src="https://s1.ax1x.com/2020/10/20/BSUOoj.png" alt="BSUOoj.png" /></a></p></li><li><p>静态分析</p><p><a href="https://imgchr.com/i/BSUxWq"><img src="https://s1.ax1x.com/2020/10/20/BSUxWq.png" alt="BSUxWq.png" /></a></p></li><li><p>动态分析</p><p>交流通路</p><p><a href="https://imgchr.com/i/BSamSx"><img src="https://s1.ax1x.com/2020/10/20/BSamSx.png" alt="BSamSx.png" /></a></p><p><a href="https://imgchr.com/i/BSaGtA"><img src="https://s1.ax1x.com/2020/10/20/BSaGtA.png" alt="BSaGtA.png" /></a></p><p><a href="https://imgchr.com/i/BSarkj"><img src="https://s1.ax1x.com/2020/10/20/BSarkj.png" alt="BSarkj.png" /></a></p><p><a href="https://imgchr.com/i/BSdVHg"><img src="https://s1.ax1x.com/2020/10/20/BSdVHg.png" alt="BSdVHg.png" /></a></p></li><li><p>共基放大电路的基本特点和应用</p><ul><li>共基放大电路电压放大能力强，且输出电压与输入电压同相，但不能放大电流，具有功率放大能力</li><li>共基放大电路的输入电阻低，输出电阻与共射放大电路相同</li><li>共基极放大电路的输入阻抗很小，会使输入信号严重衰减，不适合作为电压放大器，但可以作为“电流缓冲器”使用</li><li>共基极放大电路的高频性能良好，通频带在三种组态的放大电路中最宽</li><li>共基极放大电路适用于宽频带和高频的情况，稳定性较好的场合</li></ul></li></ol><h2 id="11-03-三种组态放大电路的对比"><a class="markdownIt-Anchor" href="#11-03-三种组态放大电路的对比"></a> 11-03 三种组态放大电路的对比</h2><ol><li><p>三种组态放大电路交流参数对比</p><p><a href="https://imgchr.com/i/BSw1JA"><img src="https://s1.ax1x.com/2020/10/20/BSw1JA.png" alt="BSw1JA.png" /></a></p></li><li><p>特点和应用</p><ul><li>共射电路：电压增益和电流增益都较高，输入电阻在三种组态中居中，输出电期与集电极电阻有很大关系。由于具备这些优点，它是最常用的一<br />种组态，而且还可以将多个共射放大器级联起来，构成多级放大器，以获得更高的增益</li><li>共集电脑：只放大电流、不放大电压，有电压跟随作用。所以不能用多个共然电路组成多级放大电路。但其在三种组态中，输入电阻最高，输出电阻最小，常用于多级电路输入级、输出级，以及作中间缓冲级</li><li>共基电路：只放大电压，不放大电流，有电流跟随作用，所以也不宜单纯由共基电路组成多级电路。其输入电阻小，输出电阻高。可用作恒流源。从目前我们所看到的这些特性，还看不出它突出的优点，实际上共基放大电路的通频带很宽，在高频和宽带的领域，它是大有用武之地的</li></ul></li></ol><h2 id="11-04-复合管放大电路"><a class="markdownIt-Anchor" href="#11-04-复合管放大电路"></a> 11-04 复合管放大电路</h2><ol><li><p>用两只或多只三极管按一定规律进行组合，等效成一只三极管，称为复合管，又称达林顿管</p></li><li><p>组成复合管的原则</p><ul><li>在前后两个三极管的连接关系上，应保证前级三极管的输出电流与后级三极管的输入电流的实际方向一致</li><li>外加电压的极性应保证前后两个三极管均为发射结正偏，集电结反偏，使两管都工作在放大区</li><li>为实现放大，应将前一只管子的集电极或射极电流作为第二只管子的基极电流</li></ul></li><li><p>判断能否组成复合管</p></li><li><p>不同类型晶体管组合成的复合管，其类型取决于第一个管子</p></li><li><p>常用复合管结构</p><p><a href="https://imgchr.com/i/BSBWG9"><img src="https://s1.ax1x.com/2020/10/20/BSBWG9.png" alt="BSBWG9.png" /></a></p><p><a href="https://imgchr.com/i/BSDvY4"><img src="https://s1.ax1x.com/2020/10/20/BSDvY4.png" alt="BSDvY4.png" /></a></p></li><li><p>同类型的三极管组成复合管：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi><mo>≈</mo><msub><mi>β</mi><mn>1</mn></msub><msub><mi>β</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\beta \approx \beta _1 \beta _2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi></mrow></msub><mo>=</mo><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi><mn>1</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><mo stretchy="false">)</mo><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">r_{be}=r_{be1}+(1+ \beta _1)r_{be2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>两个不同类型的三极管组成复合管：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi><mo>≈</mo><msub><mi>β</mi><mn>1</mn></msub><msub><mi>β</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\beta \approx \beta _1 \beta _2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi></mrow></msub><mo>=</mo><msub><mi>r</mi><mrow><mi>b</mi><mi>e</mi><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">r_{be}=r_{be1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">e</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>复合管共射放大电路</p><p><a href="https://imgchr.com/i/BSsxMR"><img src="https://s1.ax1x.com/2020/10/20/BSsxMR.png" alt="BSsxMR.png" /></a></p></li><li><p>复合管共集放大电路</p><p><a href="https://imgchr.com/i/BSysSJ"><img src="https://s1.ax1x.com/2020/10/20/BSysSJ.png" alt="BSysSJ.png" /></a></p></li></ol><h2 id="12-01-频率响应问题的提出"><a class="markdownIt-Anchor" href="#12-01-频率响应问题的提出"></a> 12-01 频率响应问题的提出</h2><ol><li>实际应用中，电子电路所处理的信号几乎都不是简单的单一频率信号，它们的幅度及相位通常由固定比例关系的多频率分量组合而成，且具有一定的频谱</li><li>可以通过傅里叶变换得到基波和二次谐波，放大电路对不同频率信号的幅值放大不同，叫幅度失真，放大电路对不同频率信号产生的相移不同，表现为时间延时不同，叫相位失真，统称为频率失真</li><li>失真可分为线性失真和非线性失真</li><li>非线性失真：信号进入器件的非线性区域，会产生新的频率分量</li><li>频率失真：对不同频率的信号响应不同而造成的失真，不产生新的频率分量</li><li>是否产生新的频率分量区分线性和非线性失真</li><li>由于放大电路中存在电抗元件（如管子的极间电容，电路的负载电容、分布电容、耦合电容、射极旁路电容等），当信号频率较高或较低时，不但放大倍数会变小，而且会产生超前或滞后的相移，使得放大电路对不同频率信号分量的放大倍数和相移都不同</li><li>放大电路的放大倍数时信号频率的函数，称之为频率响应或频率特性</li><li>放大电路中存在电抗性元件，如耦合电容，旁路电容，变压器等</li><li>随着信号频率逐渐升高，晶体管极间电容和分布电容、寄生电容等杂散电容的容抗减小，对信号的传输带来较大的影响</li><li>当研究电路的高频响应时，三极管的低频小信号模型不再适用，而要采用高频小信号模型</li><li>电路中存在着电抗器件是影响频响的主要因素，当低频时，主要是耦合电容起作用，当高频时，主要是晶体管结电容起作用，由于耦合电容和结电容的影响，使得放大电路的放大倍数在低频和高频都会产生损失</li><li>频率响应是衡量放大电路对不同频率输入信号适应能力的一项技术指标</li><li>放大器频率特性的好坏直接影响输出信号的质量，对放大器的稳定性也有影响，因而在电路的分析和设计中十分重要<ul><li>在设计电路时，应先了解信号的频率范围，并据此设计电路的频率特性</li><li>在使用电路前，应分析或实测其通频带，以确定电路是否适于工作频率</li></ul></li></ol><h2 id="12-02-频率响应基本概念"><a class="markdownIt-Anchor" href="#12-02-频率响应基本概念"></a> 12-02 频率响应基本概念</h2><ol><li><p>频率响应：</p><p>放大器的增益禹频率的关系可表示为：</p><p><img src="https://s1.ax1x.com/2020/10/17/0O1co4.png" alt="0O1co4.png" /></p><p><img src="https://s1.ax1x.com/2020/10/17/0O3Qk4.png" alt="0O3Qk4.png" /></p><p><img src="https://s1.ax1x.com/2020/10/17/0O31h9.png" alt="0O31h9.png" /></p></li><li><p>频平响应的波特图</p><ul><li>横坐标改线性增长为指数增长以对数坐标表示</li><li>幅频纵坐标以分贝形式表示</li><li>曲线做直线化处理</li></ul></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">f_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>H</mi></msub></mrow><annotation encoding="application/x-tex">f_H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处以下降3dB（纵坐标相除得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>g</mi><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">lg2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>约等于3dB）</p><p><img src="https://s1.ax1x.com/2020/10/18/0X1eAg.png" alt="0X1eAg.png" /></p></li></ol><h2 id="12-03-单时间常数rc电路的频率响应"><a class="markdownIt-Anchor" href="#12-03-单时间常数rc电路的频率响应"></a> 12-03 单时间常数RC电路的频率响应</h2><ol><li><p>RC高通电路</p><p><img src="https://s1.ax1x.com/2020/10/18/0X1cUe.png" alt="0X1cUe.png" /></p></li><li><p>RC高通电路的对数幅频特性和对数相频特性</p><p><img src="https://s1.ax1x.com/2020/10/18/0X8g1A.png" alt="0X8g1A.png" /></p><p><img src="https://s1.ax1x.com/2020/10/18/0X8ThQ.png" alt="0X8ThQ.png" /></p><p><img src="https://s1.ax1x.com/2020/10/18/0X8qcn.png" alt="0X8qcn.png" /></p><p>在拐点处存在最大误差5.71°</p><p><img src="https://s1.ax1x.com/2020/10/18/0XGVHK.png" alt="0XGVHK.png" /></p></li><li><p>RC低通电路</p><p><img src="https://s1.ax1x.com/2020/10/18/0XGg5F.png" alt="0XGg5F.png" /></p><p><img src="https://s1.ax1x.com/2020/10/18/0XGxKI.png" alt="0XGxKI.png" /></p><p>在高频段，低通电路还将产生一个0~90°的滞后相移</p></li><li><p>电路的截止频率（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">f_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>H</mi></msub></mrow><annotation encoding="application/x-tex">f_H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）取决于电容所在回路的时间常数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span></p></li><li><p>截止频率的表达式总可以写成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn><mi>π</mi><mi>τ</mi></mrow><annotation encoding="application/x-tex">1/2 \pi \tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span>的形式</p></li><li><p>对于一阶RC电路来说，在截止频率处，增益将下降3dB，且产生+45°或-45°的相移</p></li><li><p>比较</p><p><img src="https://s1.ax1x.com/2020/10/18/0XY1Tf.png" alt="0XY1Tf.png" /></p></li></ol><h2 id="13-01-晶体管高频等效模型"><a class="markdownIt-Anchor" href="#13-01-晶体管高频等效模型"></a> 13-01 晶体管高频等效模型</h2><ol><li><p>等效模型建立</p><p><a href="https://imgchr.com/i/0jlGCj"><img src="https://s1.ax1x.com/2020/10/18/0jlGCj.png" alt="0jlGCj.png" /></a></p><p><a href="https://imgchr.com/i/0jl2Kx"><img src="https://s1.ax1x.com/2020/10/18/0jl2Kx.png" alt="0jl2Kx.png" /></a></p></li><li><p>完整的晶体管高频<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>等效模型</p><p><a href="https://imgchr.com/i/0j1KzR"><img src="https://s1.ax1x.com/2020/10/18/0j1KzR.png" alt="0j1KzR.png" /></a></p></li><li><p>简化的晶体管高频<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>等效模型</p><p><a href="https://imgchr.com/i/0j14O0"><img src="https://s1.ax1x.com/2020/10/18/0j14O0.png" alt="0j14O0.png" /></a></p></li><li><p>参数获取</p><p><a href="https://imgchr.com/i/0j3m0f"><img src="https://s1.ax1x.com/2020/10/18/0j3m0f.png" alt="0j3m0f.png" /></a></p></li><li><p>低频时，忽略晶体管内部电容的影响，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>模型和混合参数模型可以转换</p><p><a href="https://imgchr.com/i/0j3rcR"><img src="https://s1.ax1x.com/2020/10/18/0j3rcR.png" alt="0j3rcR.png" /></a></p></li></ol><h2 id="13-02-晶体管频率特性分析"><a class="markdownIt-Anchor" href="#13-02-晶体管频率特性分析"></a> 13-02 晶体管频率特性分析</h2><ol><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>表达式求解及分析</p><p><a href="https://imgchr.com/i/BJBVl6"><img src="https://s1.ax1x.com/2020/10/29/BJBVl6.jpg" alt="BJBVl6.jpg" /></a></p><p><a href="https://imgchr.com/i/BJBrpq"><img src="https://s1.ax1x.com/2020/10/29/BJBrpq.jpg" alt="BJBrpq.jpg" /></a></p><p><a href="https://imgchr.com/i/BJrZZD"><img src="https://s1.ax1x.com/2020/10/29/BJrZZD.jpg" alt="BJrZZD.jpg" /></a></p></li><li><p>共射截止频率</p><p><a href="https://imgchr.com/i/BJrzOf"><img src="https://s1.ax1x.com/2020/10/29/BJrzOf.jpg" alt="BJrzOf.jpg" /></a></p></li><li><p>特征频率</p><p><a href="https://imgchr.com/i/BJsu0U"><img src="https://s1.ax1x.com/2020/10/29/BJsu0U.jpg" alt="BJsu0U.jpg" /></a></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>&gt;</mo><msub><mi>f</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">f&gt;f_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>β</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|\beta|&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，晶体管失去放大作用</p></li><li><p>共基截止频率</p><p><a href="https://imgchr.com/i/BJy5VO"><img src="https://s1.ax1x.com/2020/10/29/BJy5VO.jpg" alt="BJy5VO.jpg" /></a></p></li><li><p>结论</p><p><a href="https://imgchr.com/i/BJcltg"><img src="https://s1.ax1x.com/2020/10/29/BJcltg.jpg" alt="BJcltg.jpg" /></a></p></li></ol><h2 id="13-03-晶体管高频等效模型的单向化"><a class="markdownIt-Anchor" href="#13-03-晶体管高频等效模型的单向化"></a> 13-03 晶体管高频等效模型的单向化</h2><ol><li><p>密勒定理</p><p><a href="https://imgchr.com/i/BJgn29"><img src="https://s1.ax1x.com/2020/10/29/BJgn29.jpg" alt="BJgn29.jpg" /></a></p></li><li><p>等效到输入端的密勒等效电容比原电容增大了1+IKl倍,称之为密勒效应</p></li><li><p>例题</p><p><a href="https://imgchr.com/i/BJ2YwV"><img src="https://s1.ax1x.com/2020/10/29/BJ2YwV.jpg" alt="BJ2YwV.jpg" /></a></p><p><a href="https://imgchr.com/i/BJ20SJ"><img src="https://s1.ax1x.com/2020/10/29/BJ20SJ.jpg" alt="BJ20SJ.jpg" /></a></p></li><li><p>单向化</p><p><a href="https://imgchr.com/i/BJWQrn"><img src="https://s1.ax1x.com/2020/10/29/BJWQrn.jpg" alt="BJWQrn.jpg" /></a></p></li></ol><h2 id="14-01-单管共射放大电路中低频响应分析"><a class="markdownIt-Anchor" href="#14-01-单管共射放大电路中低频响应分析"></a> 14-01 单管共射放大电路中低频响应分析</h2><p><a href="https://imgchr.com/i/BJfIX9"><img src="https://s1.ax1x.com/2020/10/29/BJfIX9.jpg" alt="BJfIX9.jpg" /></a></p><p><a href="https://imgchr.com/i/BJftTP"><img src="https://s1.ax1x.com/2020/10/29/BJftTP.jpg" alt="BJftTP.jpg" /></a></p><p><a href="https://imgchr.com/i/BJf0Sg"><img src="https://s1.ax1x.com/2020/10/29/BJf0Sg.jpg" alt="BJf0Sg.jpg" /></a></p><h2 id="14-02-单管共射放大电路高频响应分析"><a class="markdownIt-Anchor" href="#14-02-单管共射放大电路高频响应分析"></a> 14-02 单管共射放大电路高频响应分析</h2><ol><li><p>高频响应幅频特性</p><p><a href="https://imgchr.com/i/BJhkh8"><img src="https://s1.ax1x.com/2020/10/29/BJhkh8.jpg" alt="BJhkh8.jpg" /></a></p></li><li><p>完整阻容耦合共射放大电路的频率响应</p><p><a href="https://imgchr.com/i/BJhYjJ"><img src="https://s1.ax1x.com/2020/10/29/BJhYjJ.jpg" alt="BJhYjJ.jpg" /></a></p><p><a href="https://imgchr.com/i/BJ556g"><img src="https://s1.ax1x.com/2020/10/29/BJ556g.jpg" alt="BJ556g.jpg" /></a></p></li><li><p>增益带宽积：放大器中频电压增益与通频带的乘积，BJT一旦确定，带宽增益积基本为常数</p><p><a href="https://imgchr.com/i/BJIwEn"><img src="https://s1.ax1x.com/2020/10/29/BJIwEn.jpg" alt="BJIwEn.jpg" /></a></p></li><li><p>在实际电路中，当信号频率范围已知，放大电路只需具有与信号频率相对应的带宽即可，而且这样做将有利于抵抗外部的干扰信号。盲目追求宽频带不但无益，而且还将牺牲放大电路的增益</p></li></ol><h2 id="14-03-三种组态放大电路频率响应性能对比分析"><a class="markdownIt-Anchor" href="#14-03-三种组态放大电路频率响应性能对比分析"></a> 14-03 三种组态放大电路频率响应性能对比分析</h2><p><a href="https://imgchr.com/i/BJ4NRS"><img src="https://s1.ax1x.com/2020/10/29/BJ4NRS.jpg" alt="BJ4NRS.jpg" /></a></p><p><a href="https://imgchr.com/i/BJ59FP"><img src="https://s1.ax1x.com/2020/10/29/BJ59FP.jpg" alt="BJ59FP.jpg" /></a></p><h2 id="15-01-场效应管概述"><a class="markdownIt-Anchor" href="#15-01-场效应管概述"></a> 15-01 场效应管概述</h2><ol><li><p>场效应管相比晶体管优点：热稳定性好。输入电阻大，工艺简单</p></li><li><p>单极型晶体管，电压控制元件</p></li><li><p>分类：</p><p>结型场效应管：</p><ul><li>N沟道</li><li>P沟道</li></ul><p>绝缘栅型场效应管：</p><ul><li>增强型：<ul><li>N沟道</li><li>P沟道</li></ul></li><li>耗尽型：<ul><li>N沟道</li><li>P沟道</li></ul></li></ul></li></ol><h2 id="15-02-结型场效应管"><a class="markdownIt-Anchor" href="#15-02-结型场效应管"></a> 15-02  结型场效应管</h2><ol><li><p>结构和符号：</p><p><img src="https://s1.ax1x.com/2020/10/12/02XTW6.png" alt="02XTW6.png" /></p><p><img src="https://s1.ax1x.com/2020/10/12/02XLOe.png" alt="02XLOe.png" /></p></li><li><p>工作原理：</p><p><img src="https://s1.ax1x.com/2020/10/12/02j0XD.png" alt="02j0XD.png" /></p></li><li><p><img src="https://s1.ax1x.com/2020/10/12/02vOIA.png" alt="02vOIA.png" /></p><p><img src="https://s1.ax1x.com/2020/10/12/02vjPI.png" alt="02vjPI.png" /></p></li><li><p>输出特性曲线：</p><p><img src="https://s1.ax1x.com/2020/10/12/0RClCj.png" alt="0RClCj.png" /></p></li><li><p>转移特性曲线：</p><p><img src="https://s1.ax1x.com/2020/10/12/0RPhwT.png" alt="0RPhwT.png" /></p><p>对不同的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>D</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{DS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,对应的转移特性曲线不同</p><p>在可变变阻区，不同的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>D</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{DS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的转移特性曲线的差别较大</p><p><img src="https://s1.ax1x.com/2020/10/12/0RF4G4.png" alt="0RF4G4.png" /></p></li><li><p>N沟道和P沟道结型场效应管比较：</p><p><img src="https://s1.ax1x.com/2020/10/12/0RkZWQ.png" alt="0RkZWQ.png" /></p></li></ol><h2 id="15-03-绝缘栅型场效应管"><a class="markdownIt-Anchor" href="#15-03-绝缘栅型场效应管"></a> 15-03 绝缘栅型场效应管</h2><ol><li><p>结型场效应管的缺点:</p><ul><li>栅源极间的电阻虽然可达<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span>以上，但在某些场合仍嫌不够高</li><li>在高温下，PN结的反向电流增大，栅源间的电阻会显著下降</li></ul></li><li><p>金属氧化物半导体场效应管，简称MOSFET，分类</p><ul><li>增强型<ul><li>N沟道</li><li>P沟道</li></ul></li><li>耗尽型<ul><li>N沟道</li><li>P沟道</li></ul></li></ul></li><li><p>N沟道增强型MOS管</p><p>结构与符号</p><p><a href="https://imgchr.com/i/B627Hx"><img src="https://s1.ax1x.com/2020/11/04/B627Hx.jpg" alt="B627Hx.jpg" /></a></p><p>工作原理</p><p><a href="https://imgchr.com/i/B62j8e"><img src="https://s1.ax1x.com/2020/11/04/B62j8e.jpg" alt="B62j8e.jpg" /></a></p><p><a href="https://imgchr.com/i/B6RpDI"><img src="https://s1.ax1x.com/2020/11/04/B6RpDI.jpg" alt="B6RpDI.jpg" /></a></p><p>输出特性曲线</p><p><a href="https://imgchr.com/i/B6R3PU"><img src="https://s1.ax1x.com/2020/11/04/B6R3PU.jpg" alt="B6R3PU.jpg" /></a></p><p>转移特性曲线</p><p><a href="https://imgchr.com/i/B6RJxJ"><img src="https://s1.ax1x.com/2020/11/04/B6RJxJ.jpg" alt="B6RJxJ.jpg" /></a></p></li><li><p>N沟道耗尽型MOS管</p><p>结构和符号</p><p><a href="https://imgchr.com/i/B6RrGD"><img src="https://s1.ax1x.com/2020/11/04/B6RrGD.jpg" alt="B6RrGD.jpg" /></a></p><p>特性曲线</p><p><a href="https://imgchr.com/i/B6RcMd"><img src="https://s1.ax1x.com/2020/11/04/B6RcMd.jpg" alt="B6RcMd.jpg" /></a></p></li><li><p>N沟道和P沟道比较</p><p><a href="https://imgchr.com/i/B6RhIf"><img src="https://s1.ax1x.com/2020/11/04/B6RhIf.jpg" alt="B6RhIf.jpg" /></a></p><p><a href="hps://imgchr.com/i/B6R5i8"><img src="https://s1.ax1x.com/2020/11/04/B6R5i8.jpg" alt="B6R5i8.jpg" /></a></p></li></ol><h2 id="15-04-场效应管的主要参数和选用"><a class="markdownIt-Anchor" href="#15-04-场效应管的主要参数和选用"></a> 15-04 场效应管的主要参数和选用</h2><ol><li><p>直流参数</p><p>饱和漏极电流<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mrow><mi>D</mi><mi>S</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{DSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：耗尽型场效应管，当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>G</mi><mi>S</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">U_{GS}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时所对应的漏极电流</p><p>夹断电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mi>P</mi></msub></mrow><annotation encoding="application/x-tex">U_P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：耗尽型FET的参数</p><p>开启电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">U_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>︰增强型MOS管的参数，栅源电压小于开启电压的绝对值，场效应管不能导通</p><p>直流输入电阻<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>G</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">R_{GS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：场效应三极管的栅源输入电阻的典型值，对于结型场效应管，反偏时约大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">10^7 \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mord">Ω</span></span></span></span>，对于绝缘栅型场效应管，约是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>15</mn></msup><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">10^{15} \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mord">Ω</span></span></span></span></p></li><li><p>交流参数</p><p><a href="https://imgchr.com/i/B6hgsJ"><img src="https://s1.ax1x.com/2020/11/04/B6hgsJ.jpg" alt="B6hgsJ.jpg" /></a></p></li><li><p>极限参数</p><ul><li>漏极最大允许耗散功率<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>D</mi><mi>M</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{DM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> –最大漏极功耗可由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>D</mi><mi>M</mi></mrow></msub><mo>=</mo><msub><mi>U</mi><mrow><mi>D</mi><mi>S</mi></mrow></msub><mo>×</mo><msub><mi>I</mi><mi>D</mi></msub></mrow><annotation encoding="application/x-tex">P_{DM} =U_{DS} \times I_D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>决定，与双极型三极管的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>C</mi><mi>M</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{CM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>相当</li><li>漏源击穿电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mo stretchy="false">(</mo><mi>B</mi><mi>R</mi><mo stretchy="false">)</mo><mi>D</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{(BR)DS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span> -当漏极电流I,急剧上升产生雪崩击穿时的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>D</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{DS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>栅源击穿电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mo stretchy="false">(</mo><mi>B</mi><mi>R</mi><mo stretchy="false">)</mo><mi>G</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{(BR)GS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>-当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>G</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{GS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>过高时，结型场效应管PN结可能击穿;MOS场效应管可能将二氧化硅绝缘层击穿，使栅极与衬底发生短路，形成破坏性击穿</li></ul></li><li><p>双极型晶体管与场效应管的比较</p><p><a href="https://imgchr.com/i/B64Bmd"><img src="https://s1.ax1x.com/2020/11/04/B64Bmd.jpg" alt="B64Bmd.jpg" /></a></p></li><li><p>双极型晶体管与场效应管的选择</p><ul><li>只允许从信号源取较少电流的情况下(信号源内阻较高），选用场效应管</li><li>在信号电压较低，又允许从信号源取较多电流的条件下(信号内阻较低），应选用晶体管</li><li>有低功耗、弱信号和超高频等需求时，选用场效应管</li><li>环境变化较强烈的场合，适合采用场效应管</li><li>场效应管噪声系数小，要求信噪比较高的电路中要选择场效应管</li></ul></li><li><p>注意事项</p><ul><li>电源极性按规定接入，注意不能超过极限参数的规定数值</li><li>严格按照要求的偏置连接电路。对JFET要注意栅源电压极性不要接反，以免PN结正偏过流而烧坏管子</li><li>MOSFET管的衬底和源极常连在一起，若需分开，则衬源电压使衬源的PN结反偏</li><li>对于MOSFET要特别注意栅极感应电压过高所造成的击穿问题</li><li>使用MOSFET时，相关设备和人员应保证良好的接地</li></ul></li><li><p>各种场效应管使用要求</p><p><a href="https://imgchr.com/i/B65YHs"><img src="https://s1.ax1x.com/2020/11/04/B65YHs.jpg" alt="B65YHs.jpg" /></a></p></li></ol><h2 id="16-01-场效应管放大电路的偏置和静态分析"><a class="markdownIt-Anchor" href="#16-01-场效应管放大电路的偏置和静态分析"></a> 16-01 场效应管放大电路的偏置和静态分析</h2><ol><li><p>场效应管特性</p><p><a href="https://imgchr.com/i/B6L29A"><img src="https://s1.ax1x.com/2020/11/04/B6L29A.jpg" alt="B6L29A.jpg" /></a></p></li><li><p>场效应管特点和优势</p><ul><li>电压控制器件，三极管是电流控制器件</li><li>输入电阻极高</li><li>单极型(多数载流子)器件，受温度影响少</li><li>使用灵活，制造工艺简单</li></ul></li><li><p>场效应管放大电路的组成原则</p><ul><li>静态：适当的静态工作点，使场效应管工作在恒流区，场效应管的偏置电路设计相对简单</li><li>动态：能将交流信号从信号源传输到负载</li></ul></li><li><p>三种组态放大电路</p><p><a href="https://imgchr.com/i/B6OB2n"><img src="https://s1.ax1x.com/2020/11/04/B6OB2n.jpg" alt="B6OB2n.jpg" /></a></p></li><li><p>场效应管偏置电路的要求</p><ul><li>栅极只需要偏压，不需要偏流</li><li>注意各类FET的偏置极性区别</li><li>采用偏置稳定电路</li></ul></li><li><p>FET的偏置电路分为固定偏置电路、自给偏压电路和分压式自偏压电路三种</p></li><li><p>场效应管放大电路的静态分析可以采用图解法和估算法</p></li><li><p>固定偏置电路</p><p><a href="https://imgchr.com/i/B6XMZT"><img src="https://s1.ax1x.com/2020/11/04/B6XMZT.jpg" alt="B6XMZT.jpg" /></a></p><p><a href="https://imgchr.com/i/B6XtQ1"><img src="https://s1.ax1x.com/2020/11/04/B6XtQ1.jpg" alt="B6XtQ1.jpg" /></a></p><p>由于栅极的直流偏置电压是一个固定值（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>G</mi><mi>S</mi></mrow></msub><mo>=</mo><mo>−</mo><msub><mi>V</mi><mrow><mi>G</mi><mi>G</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{GS}=-V_{GG}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">G</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）,)，所以称为固定偏压式电路</p></li><li><p>自给偏压电路</p><p><a href="https://imgchr.com/i/B6Xgyt"><img src="https://s1.ax1x.com/2020/11/04/B6Xgyt.jpg" alt="B6Xgyt.jpg" /></a></p></li><li><p>分压式自偏压电路</p><p><a href="https://imgchr.com/i/B6X7Ss"><img src="https://s1.ax1x.com/2020/11/04/B6X7Ss.jpg" alt="B6X7Ss.jpg" /></a></p><p><a href="https://imgchr.com/i/B6XxkF"><img src="https://s1.ax1x.com/2020/11/04/B6XxkF.jpg" alt="B6XxkF.jpg" /></a></p></li></ol><h2 id="16-02-场效应管微变等效模型"><a class="markdownIt-Anchor" href="#16-02-场效应管微变等效模型"></a> 16-02  场效应管微变等效模型</h2><ol><li><p>将场效应管也看成一个双端口网络，栅极与源极之间视为输入端口，漏极与源极之间视为输出端口，微变等效分析：</p><p><a href="https://imgchr.com/i/B6jfj1"><img src="https://s1.ax1x.com/2020/11/04/B6jfj1.jpg" alt="B6jfj1.jpg" /></a></p><p><a href="https://imgchr.com/i/B6jL3d"><img src="https://s1.ax1x.com/2020/11/04/B6jL3d.jpg" alt="B6jL3d.jpg" /></a></p><p><a href="https://imgchr.com/i/B6jzHf"><img src="https://s1.ax1x.com/2020/11/04/B6jzHf.jpg" alt="B6jzHf.jpg" /></a></p></li><li><p>微变等效电路与晶体管比较</p><p><a href="https://imgchr.com/i/B6vVuq"><img src="https://s1.ax1x.com/2020/11/04/B6vVuq.jpg" alt="B6vVuq.jpg" /></a></p></li><li><p>高频等效模型</p><p><a href="https://imgchr.com/i/B6vl8J"><img src="https://s1.ax1x.com/2020/11/04/B6vl8J.jpg" alt="B6vl8J.jpg" /></a></p><p><a href="https://imgchr.com/i/B6vJDx"><img src="https://s1.ax1x.com/2020/11/04/B6vJDx.jpg" alt="B6vJDx.jpg" /></a></p></li></ol><h2 id="16-03-场效应管放大电路的动态分析"><a class="markdownIt-Anchor" href="#16-03-场效应管放大电路的动态分析"></a> 16-03  场效应管放大电路的动态分析</h2><ol><li><p>共源放大电路</p><p><a href="https://imgchr.com/i/Bcp3FK"><img src="https://s1.ax1x.com/2020/11/04/Bcp3FK.jpg" alt="Bcp3FK.jpg" /></a></p><p><a href="https://imgchr.com/i/BcpclQ"><img src="https://s1.ax1x.com/2020/11/04/BcpclQ.jpg" alt="BcpclQ.jpg" /></a></p><p><a href="https://imgchr.com/i/Bcp7pF"><img src="https://s1.ax1x.com/2020/11/04/Bcp7pF.jpg" alt="Bcp7pF.jpg" /></a></p><p><a href="https://imgchr.com/i/BcpztK"><img src="https://s1.ax1x.com/2020/11/04/BcpztK.jpg" alt="BcpztK.jpg" /></a></p></li><li><p>共漏放大电路</p><p><a href="https://imgchr.com/i/Bc9E7t"><img src="https://s1.ax1x.com/2020/11/04/Bc9E7t.jpg" alt="Bc9E7t.jpg" /></a></p><p><a href="https://imgchr.com/i/Bc9K1g"><img src="https://s1.ax1x.com/2020/11/04/Bc9K1g.jpg" alt="Bc9K1g.jpg" /></a></p><p><a href="https://imgchr.com/i/Bc987q"><img src="https://s1.ax1x.com/2020/11/04/Bc987q.jpg" alt="Bc987q.jpg" /></a></p><p><a href="https://imgchr.com/i/Bc9dc4"><img src="https://s1.ax1x.com/2020/11/04/Bc9dc4.jpg" alt="Bc9dc4.jpg" /></a></p></li></ol><h2 id="16-04-场效应管与晶体管放大电路的比较"><a class="markdownIt-Anchor" href="#16-04-场效应管与晶体管放大电路的比较"></a> 16-04 场效应管与晶体管放大电路的比较</h2><ol><li><p>比较与对应关系</p><p><a href="https://imgchr.com/i/BcP5kt"><img src="https://s1.ax1x.com/2020/11/04/BcP5kt.jpg" alt="BcP5kt.jpg" /></a></p><p><a href="https://imgchr.com/i/BcPItP"><img src="https://s1.ax1x.com/2020/11/04/BcPItP.jpg" alt="BcPItP.jpg" /></a></p></li><li><p>使用比较</p><ul><li>共源、共漏和共栅电路的输入电阻高于相应的共射、共集和共基电路的输入电阻</li><li>场效应管噪声低、温度稳定性好、抗辐射能力强</li><li>集成度高，适用于大规模集成电路</li><li>场效应管低频跨导较小，放大能力通常比三极管差</li><li>MOS管栅源等效电容小，易击穿，使用操作要求高</li></ul></li><li><p>场效应管适用于环境变化很大，要求信噪比较高，集成度要求高的场合</p></li></ol><h2 id="17-01-多级放大电路的耦合方式"><a class="markdownIt-Anchor" href="#17-01-多级放大电路的耦合方式"></a> 17-01 多级放大电路的耦合方式</h2><ol><li><p>在实际应用中，往往需要放大非常微弱的信号。为了获得更高的电压放大倍数，进一步优化放大器性能，可以把多个基本放大电路连接起来，组成多级放大电路，各级放大电路输入和输出之间的连接方式叫做耦合方式</p></li><li><p>对耦合电路的要求</p><ul><li>静态：保证各级有合适的Q点</li><li>动态：传送信号<ul><li>波形不失真</li><li>减少压降损失</li></ul></li></ul></li><li><p>常用的耦合方式：变压器耦合、光电耦合、阻容耦合和直接耦合</p></li><li><p>变压器耦合</p><p><a href="https://imgchr.com/i/BcFGMF"><img src="https://s1.ax1x.com/2020/11/04/BcFGMF.jpg" alt="BcFGMF.jpg" /></a></p></li><li><p>变压器耦合的主要特点</p><ul><li>对直流信号起到隔离作用，可消除温度引起的静态工作点的漂移</li><li>各级电路的静态工作点相互独立，便于设计和调试</li><li>在传输交流信号的同时，具有阻抗变换作用，可以实现阻抗匹配</li><li>选择恰当的变比，可在负载上得到尽可能大的输出功率</li><li>低频和高频特性性能都比较差</li><li>体积大、重量重、费用高、不宜集成化</li></ul></li><li><p>光电耦合</p><p><a href="https://imgchr.com/i/BcFDxO"><img src="https://s1.ax1x.com/2020/11/04/BcFDxO.jpg" alt="BcFDxO.jpg" /></a></p></li><li><p>光电耦合的主要特点</p><ul><li>前后级的电气部分完全隔离，所以能有效地抑制电干扰</li><li>各级电路的静态工作点相互独立，便于设计和调试</li><li>放大能力较差，可用集成光电耦合放大器解决</li></ul><p>因其抗干扰能力强而得到越来越广泛的应用</p></li><li><p>阻容耦合</p><p><a href="https://imgchr.com/i/BcF6qH"><img src="https://s1.ax1x.com/2020/11/04/BcF6qH.jpg" alt="BcF6qH.jpg" /></a></p></li><li><p>阻容耦合的主要特点</p><ul><li>各级电路的静态工作点相互独立，便于分析设计和调试;</li><li>对直流信号起到隔离作用，可以消除温度引起的静态工作点的漂移</li><li>对直流信号没有放大能力，对低频信号衰减较大</li><li>在集成电路里制造大电容很困难，不宜集成化</li></ul><p>分立电路中用于交流信号的放大</p></li><li><p>直接耦合</p><p><a href="https://imgchr.com/i/Bckwwj"><img src="https://s1.ax1x.com/2020/11/04/Bckwwj.jpg" alt="Bckwwj.jpg" /></a></p></li><li><p>直接耦合的主要特点</p><ul><li>低频特性好，可以放大缓慢变化的信号（如随温度、光线变化的电信号等)</li><li>适合于集成化的要求，在集成运放的内部，级间都是直接耦合</li></ul></li><li><p>直接耦合的缺点</p><ul><li><p>各级静态工作点不独立，不便于分析、设计和调试</p></li><li><p>信号的动态范围受静态工作点的限制，T1管很容易进入饱和区，解决方法</p><ul><li><p>垫高后级射极电位</p><p><a href="https://imgchr.com/i/BcAwjO"><img src="https://s1.ax1x.com/2020/11/04/BcAwjO.jpg" alt="BcAwjO.jpg" /></a></p></li><li><p>稳压管垫高电位</p><p><a href="https://imgchr.com/i/BcA4KS"><img src="https://s1.ax1x.com/2020/11/04/BcA4KS.jpg" alt="BcA4KS.jpg" /></a></p></li><li><p>稳压管电平移动</p><p><a href="https://imgchr.com/i/BcZxr8"><img src="https://s1.ax1x.com/2020/11/04/BcZxr8.jpg" alt="BcZxr8.jpg" /></a></p></li><li><p>NPN、PNP管级联</p><p><a href="https://imgchr.com/i/Bcek2q"><img src="https://s1.ax1x.com/2020/11/04/Bcek2q.jpg" alt="Bcek2q.jpg" /></a></p></li></ul></li><li><p>存在零点漂移问题</p></li></ul></li><li><p>零点漂移：当输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">u_i=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，输出电压<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">u_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>并不恒定，而是出现缓慢的、无规则的漂动。这种现象称为零点漂移，简称零漂。零漂实质上就是放大电路静态工作点的变化</p></li><li><p>零点漂移的危害</p><ul><li>直接影响对输入信号测量的准确程度和分辨能力</li><li>严重时，可能淹没有效信号电压，无法分辨是有效信号电压还是漂移电压</li></ul></li><li><p>抑制零点漂移是制作高质量直接耦合放大电路的一个重要的问题。第一级的漂移影响最大，对放大电路的总漂移起着决定性作用</p></li><li><p>第一级的漂移影响最大，对放大电路的总漂移起着决定性作用</p></li><li><p>抑制零点漂移一般措施</p><ul><li>采用恒温措施，使晶体管工作温度稳定。需要恒温室或槽，设备复杂，成本高</li><li>用非线性元件进行温度补偿;引入直流负反馈</li><li>采用调制解调方式;采用差分放大电路</li><li>采用差分放大电路</li></ul></li></ol><h2 id="17-02-多级放大电路分析"><a class="markdownIt-Anchor" href="#17-02-多级放大电路分析"></a> 17-02 多级放大电路分析</h2><ol><li>定性分析<ul><li>几级电路</li><li>耦合方式</li><li>各级分别是什么组态</li><li>这个电路定性的性能特点</li></ul></li><li>静态分析<ul><li>前后两级静态工作点是否相互影响<ul><li>阻容耦合——独立计算即可</li><li>直接耦合——联立方程</li></ul></li><li>KCL、KVL</li></ul></li><li>动态分析<ul><li>注意问题：后级作为前级的负载，前级作为后级的信号源</li><li>第i+1级放大电路的输入电阻应视为第i级放大电路的负载电阻</li><li>第i-1级放大电路的输出电阻应视为第i级放大电路的信号源内阻</li></ul></li><li>电压放大倍数：总电压放大倍数等于各级电压放大倍数的乘积</li><li>输入和输出电阻：通常，多级放大电路的输入电阻就是输入级的输入电阻;输出电阻就是输出级的输出电阻，具体计算时，有时它们不仅仅决定于本级参数，也与后级或前级的参数有关</li></ol><h2 id="17-03-多级放大电路频率响应"><a class="markdownIt-Anchor" href="#17-03-多级放大电路频率响应"></a> 17-03 多级放大电路频率响应</h2><ol><li><p>在多级放大电路中含有多个放大管，因而在高频等效电路中就含有多个低通电路，在阻容耦合多级放大电路中，如有多个耦合电容或旁路电容，则在低频等效电路中就含有多个高通电路</p></li><li><p>多级放大电路的总电压放大倍数、总对数增益、总相位移</p><p><a href="https://imgchr.com/i/BcMeUS"><img src="https://s1.ax1x.com/2020/11/04/BcMeUS.jpg" alt="BcMeUS.jpg" /></a></p></li><li><p>绘制多级放大电路总的幅频特性和相频特性时，只要将各级放大电路的对数增益和相移在同一横坐标下分别叠加即可</p></li><li><p>幅频特性</p><p><a href="https://imgchr.com/i/BcQkRJ"><img src="https://s1.ax1x.com/2020/11/04/BcQkRJ.jpg" alt="BcQkRJ.jpg" /></a></p></li><li><p>相频特性</p><p><a href="https://imgchr.com/i/BcQfFU"><img src="https://s1.ax1x.com/2020/11/04/BcQfFU.jpg" alt="BcQfFU.jpg" /></a></p></li><li><p>多级放大电路的上限频率和下限频率</p><p><a href="https://imgchr.com/i/Bcli0P"><img src="https://s1.ax1x.com/2020/11/04/Bcli0P.jpg" alt="Bcli0P.jpg" /></a></p><p><a href="https://imgchr.com/i/BclMmq"><img src="https://s1.ax1x.com/2020/11/04/BclMmq.jpg" alt="BclMmq.jpg" /></a></p><p><a href="https://imgchr.com/i/BclzNT"><img src="https://s1.ax1x.com/2020/11/04/BclzNT.jpg" alt="BclzNT.jpg" /></a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电子技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态库、动态库、共享库</title>
      <link href="2017/10/15/%E9%9D%99%E6%80%81%E5%BA%93%E3%80%81%E5%8A%A8%E6%80%81%E5%BA%93%E3%80%81%E5%85%B1%E4%BA%AB%E5%BA%93/"/>
      <url>2017/10/15/%E9%9D%99%E6%80%81%E5%BA%93%E3%80%81%E5%8A%A8%E6%80%81%E5%BA%93%E3%80%81%E5%85%B1%E4%BA%AB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>在使用C/C++编程的时候，我们通常使用.h和.cpp的方式来书写我们的代码，可这存在一个问题：当我们需要将写好的功能分享给别人时候的时候，如果同时把.h和.cpp交给别人势必会造成我们的代码泄漏，静态库和动态库很好地解决了这个问题，即：可以将写好的功能分享给他人，又可以将关键部分代码隐藏。</p><h2 id="静态库"><a class="markdownIt-Anchor" href="#静态库"></a> 静态库</h2><h3 id="win"><a class="markdownIt-Anchor" href="#win"></a> Win</h3><h4 id="生成静态库"><a class="markdownIt-Anchor" href="#生成静态库"></a> 生成静态库</h4><ol><li>在VS中创建Win32项目；</li><li>选择“静态库”项目，取消勾选“预编译头”；</li><li>修改项目属性，在C/C+±&gt;代码生成-&gt;运行库设置成MTd；</li><li>写完代码编译；</li><li>在项目文件夹中找到.h和.lib文件，使用时用这两个文件就行；</li></ol><h4 id="使用静态库"><a class="markdownIt-Anchor" href="#使用静态库"></a> 使用静态库</h4><ol><li><p>将.h和.lib文件复制到使用的项目文件夹中；</p></li><li><p>项目中将.h文件添加进来；</p></li><li><p>头文件包含.h文件并在代码中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;xxx.lib&quot;</span>)<span class="comment">//文件名.lib</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h3><h4 id="生成静态库-2"><a class="markdownIt-Anchor" href="#生成静态库-2"></a> 生成静态库</h4><ol><li><p>编译生成.o文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o xxx.o xxx.c</span><br></pre></td></tr></table></figure></li><li><p>将.o文件打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar rcs libxxx.a 文件1.o 文件2.o ...</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用静态库-2"><a class="markdownIt-Anchor" href="#使用静态库-2"></a> 使用静态库</h4><ol><li><p>查看静态库的相关信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm libxxx.a</span><br></pre></td></tr></table></figure></li><li><p>使用时在编译命令中加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-I 头文件名.h -L 库名</span><br></pre></td></tr></table></figure></li></ol><h2 id="动态库"><a class="markdownIt-Anchor" href="#动态库"></a> 动态库</h2><h3 id="win-2"><a class="markdownIt-Anchor" href="#win-2"></a> Win</h3><h4 id="生成动态库"><a class="markdownIt-Anchor" href="#生成动态库"></a> 生成动态库</h4><ol><li><p>在VS中创建Win32项目；</p></li><li><p>选择DLL项目；</p></li><li><p>修改项目属性，在C/C+±&gt;代码生成-&gt;运行库设置成MTd，预编译头选择不使用预编译头</p></li><li><p>写代码，在每个函数前面加上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__declspec(dllexport)</span><br></pre></td></tr></table></figure></li><li><p>编译完成后在项目文件夹中找到.h，.lib，.dll文件，使用时用这三个文件；</p></li></ol><h4 id="使用动态库"><a class="markdownIt-Anchor" href="#使用动态库"></a> 使用动态库</h4><ol><li><p>将.h，.lib，.dll文件复制到使用的项目文件夹中；</p></li><li><p>头文件包含.h文件并在代码中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;xxx.lib&quot;</span>)<span class="comment">//文件名.lib</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="linux-2"><a class="markdownIt-Anchor" href="#linux-2"></a> Linux</h3><h4 id="生成动态库共享库"><a class="markdownIt-Anchor" href="#生成动态库共享库"></a> 生成动态库（共享库）</h4><ol><li><p>编译.o文件,要求与位置无关,使用参数 -fPIC;</p></li><li><p>打包成so文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o libxxx.so xxx.o xxx.o ...</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用动态库共享库"><a class="markdownIt-Anchor" href="#使用动态库共享库"></a> 使用动态库（共享库）</h4><ol><li>编译 -L 指定路径,-l指定库名,用法同静态库；</li><li>执行的时候不能找到动态库,解决办法：<ul><li>拷贝到系统的库路径下,不推荐</li><li>修改LD_LIBRARY_PATH环境变量,将库所在的路径,添加到环境变量中,用冒号分割</li><li>修改sudo vi  /etc/ld.so.conf ,添加库路径在该文件中,sudo ldconfig -v</li></ul></li></ol><h2 id="静态库和动态库的比较"><a class="markdownIt-Anchor" href="#静态库和动态库的比较"></a> 静态库和动态库的比较</h2><h3 id="静态库-2"><a class="markdownIt-Anchor" href="#静态库-2"></a> 静态库</h3><ol><li>优点：执行快，发布应用时不需要发布库；</li><li>缺点：执行程序体积比较大，库变更时需要重新编译应用；</li></ol><h3 id="动态库-2"><a class="markdownIt-Anchor" href="#动态库-2"></a> 动态库</h3><ol><li>优点：执行程序体积小，库变更时,一般不需要重新编译应用 ；</li><li>缺点：执行时需要加载动态库,相对而言,比静态库慢，发布应用时需要同时发布动态库；</li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态库 </tag>
            
            <tag> 动态库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10家庭版启用组策略gpedit</title>
      <link href="2017/10/12/Win10%E5%AE%B6%E5%BA%AD%E7%89%88%E5%90%AF%E7%94%A8%E7%BB%84%E7%AD%96%E7%95%A5gpedit/"/>
      <url>2017/10/12/Win10%E5%AE%B6%E5%BA%AD%E7%89%88%E5%90%AF%E7%94%A8%E7%BB%84%E7%AD%96%E7%95%A5gpedit/</url>
      
        <content type="html"><![CDATA[<ol><li>新建文本文件；</li><li>编辑文本内容:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">　　<span class="built_in">pushd</span> <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line">　　dir /b %systemroot%\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;gp.txt</span><br><span class="line">　　dir /b  %systemroot%\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;gp.txt</span><br><span class="line">　　<span class="keyword">for</span> /f %%i <span class="keyword">in</span> (<span class="string">&#x27;findstr /i . gp.txt 2^&gt;nul&#x27;</span>) <span class="keyword">do</span> dism /online /norestart /add-package:<span class="string">&quot;%systemroot%\servicing\Packages\%%i&quot;</span></span><br><span class="line">　　pause</span><br></pre></td></tr></table></figure><p>3.另存为gpedit.bat ；<br />4.以管理员身份运行，等待完成。</p>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言复习</title>
      <link href="2017/10/10/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/"/>
      <url>2017/10/10/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>B/S模型：浏览器/服务器模型；</p></li><li><p>C/S模型：客户端/服务器模型；</p></li><li><p>冒泡排序第一种写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全部在主函数里的形式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len<span class="number">-1</span>-i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">tmp = a[j];</span><br><span class="line">a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全部写成函数形式 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line">tmp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;a[j], &amp;a[j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">bubble_sort(a, len);</span><br><span class="line">print(a, len);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>冒泡排序第二种写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全部在主函数里的形式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">tmp = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全部写成函数形式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line">tmp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;a[i], &amp;a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">select_sort(a, len);</span><br><span class="line">print(a, len);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简单选择排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectsort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">max = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len ;j++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[max])</span><br><span class="line">&#123;</span><br><span class="line">max = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tmp = a[i];</span><br><span class="line">a[i] = a[max];</span><br><span class="line">a[max] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">10</span> &#125;;</span><br><span class="line">selectsort(a, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>快速排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">tmp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = left;</span><br><span class="line"><span class="keyword">int</span> j = right;</span><br><span class="line"><span class="keyword">int</span> pivot = a[left];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span> i++; <span class="keyword">while</span> (a[i] &lt; pivot);</span><br><span class="line"><span class="keyword">while</span> (a[j] &gt; pivot) j--;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;(a[i]), &amp;(a[j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; j);</span><br><span class="line">swap(&amp;(a[left]), &amp;(a[j]));</span><br><span class="line">quicksort(a, left, j - <span class="number">1</span>);</span><br><span class="line">quicksort(a, j + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">quicksort(a, <span class="number">0</span>, len<span class="number">-1</span>);</span><br><span class="line">print(a, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组作函数参数会退化为指针；</p></li><li><p>定义一个数组b[5]，b和&amp;b代表的分别是数组首元素的地址和整个数组的地址，区别是指针步长不一样；</p></li><li><p>数据类型用于固定分配内存大小；</p></li><li><p>内存四区理想化模型：栈区，堆区，全局区（静态区），代码区；</p><p><a href="https://imgchr.com/i/B59I2R"><img src="https://s1.ax1x.com/2020/11/07/B59I2R.jpg" alt="B59I2R.jpg" /></a></p></li><li><p>栈是向下增长的，即从高地址往低地址增长，堆是向上增长的，即从低地址往高地址增长；栈的生长方向和数组增长方向是不同的。</p></li><li><p>证明栈的增长方向：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%d\n&quot;</span>, &amp;a);</span><br><span class="line">f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b:%d\n&quot;</span>,&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f1();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针是一种数据类型；</p></li><li><p>p1和p2的值有的编译器是相同的，有的是不同的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getstr1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p1 = <span class="string">&quot;ttaa1&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getstr2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p2 = <span class="string">&quot;ttaa1&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p1 = getstr1();</span><br><span class="line"><span class="keyword">char</span> *p2 = getstr2();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p1:%s,p2:%s\n&quot;</span>, p1, p2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p1:%d,p2:%d\n&quot;</span>, &amp;p1, &amp;p2);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数的调用模型；</p></li><li><p>野指针产生原因：指针变量和它所指向的变量是两个不同的概念，释放了指针所指向的内存，没有将指针置为NULL。使用if(p!=NULL)语句无法判断，再次释放内存会出错，所以定义指针时初始化为NULL，释放后重新置为NULL；</p></li><li><p>改变指针变量的值相当于改变指针的指向；</p></li><li><p>字面量常量对应一种数据类型，其形式决定了它的数据类型，也可通过添加前缀和后缀改变字面量的类型；</p></li><li><p>从0级指针到一级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">直接修改：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    a=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> *p=&amp;a;</span><br><span class="line">    *p=<span class="number">30</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">间接修改：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *p=<span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    a=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> *p=&amp;a;</span><br><span class="line">    change(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从1级指针到2级指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">直接修改：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="literal">NULL</span>;</span><br><span class="line">    p1=<span class="number">500</span>;</span><br><span class="line">    p2=&amp;p1;</span><br><span class="line">    *p2=<span class="number">600</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1=%d\n&quot;</span>,p1);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">间接修改：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changep1</span><span class="params">(<span class="keyword">int</span> **p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *p2=<span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="literal">NULL</span>;</span><br><span class="line">    p1=<span class="number">500</span>;</span><br><span class="line">    p2=&amp;p1;</span><br><span class="line">    changep1(p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1=%d\n&quot;</span>,p1);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针作函数参数间接赋值可以实现主函数与业务实现分层，间接赋值是指针存在的一个重要意义；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getmem</span><span class="params">(<span class="keyword">char</span> **myp1, <span class="keyword">int</span> *mylen1, <span class="keyword">char</span> **myp2, <span class="keyword">int</span> *mylen2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*myp1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(*myp1, <span class="string">&quot;hello,&quot;</span>);</span><br><span class="line">*mylen1 = <span class="built_in">strlen</span>(*myp1);</span><br><span class="line">*myp2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(*myp2, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">*mylen2 = <span class="built_in">strlen</span>(*myp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p1;</span><br><span class="line"><span class="keyword">int</span> len1;</span><br><span class="line"><span class="keyword">char</span> *p2;</span><br><span class="line"><span class="keyword">int</span> len2;</span><br><span class="line">getmem(&amp;p1, &amp;len1, &amp;p2, &amp;len2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;len1=%d,p1=%s\n&quot;</span>, len1, p1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;len2=%d,p2=%s\n&quot;</span>, len2, p2);</span><br><span class="line"><span class="keyword">if</span> (p1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line">p1 = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line">p2 = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>间接赋值成立的三个条件：</p><ul><li>定义两个变量，一个实参，一个形参</li><li>建立关联</li><li>形参间接修改实参的值</li></ul></li><li><p>间接赋值的三个条件应用场景：</p><ul><li>1 2 3写在一个函数，主函数</li><li>1 2写在一块，3单独写在函数里，函数调用</li><li>1写在一块，2 3在一块，C++引用</li></ul></li><li><p>用n级指针间接修改n-1级指针的值；</p></li><li><p>主调函数可以把栈区，堆区，全局区内存地址传给被调函数，被调函数只能返回堆区，全局区数据；</p></li><li><p>指针作函数参数是有输入和输出特性的；</p></li><li><p>指针作输入：在主调函数分配内存传给被调函数，指针作输出：在被调函数分配内存传给主调函数；</p></li><li><p>1级指针作输入常用的是数组，字符串；</p></li><li><p>C语言中没有字符串数据类型，通过字符数组模拟字符串；</p></li><li><p>字符串的内存分配，堆上，栈上，全局区；</p></li><li><p>char buf[20]={‘a’,‘b’,‘c’,‘d’},定义字符串“abcd”,char buf[]={‘a’,‘b’,‘c’,‘d’}是定义了一个数组，不是定义字符串；</p></li><li><p>用字符串初始化字符数组char buf[]=“abcd”；</p></li><li><p>通过数组下标和指针操作字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>]=<span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(buf);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>,buf[i]);</span><br><span class="line">    <span class="keyword">char</span> *p=buf;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(buf);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组名代表数组首地址，是一个只读的指针，不能作buf=buf+1的操作；</p></li><li><p>字符串1级指针内存模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">20</span>]=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> buf2[]=<span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *p1=<span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *p2=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(p2,<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串拷贝：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[]=<span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> buf2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;buf[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf2[i]=buf[i];</span><br><span class="line">    &#125;</span><br><span class="line">    buf2[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf2);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">字符串作函数参数：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrycopy</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; *from != <span class="string">&#x27;\0&#x27;</span>; from++, to++)</span><br><span class="line">&#123;</span><br><span class="line">*to = *from;</span><br><span class="line">&#125;</span><br><span class="line">*to = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">可以写为：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrycopy</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; *from != <span class="string">&#x27;\0&#x27;</span>; )</span><br><span class="line">&#123;</span><br><span class="line">*to++ = *from++;</span><br><span class="line">&#125;</span><br><span class="line">*to = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrycopy</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*to=*from)</span><br><span class="line">    &#123;</span><br><span class="line">        to++;</span><br><span class="line">        from++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrycopy</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*to++=*from++)</span><br><span class="line">&#125;</span><br><span class="line">-&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrcopy</span><span class="params">(<span class="keyword">char</span> *from,<span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*to++=*from++)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *from = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> buf2[<span class="number">20</span>];</span><br><span class="line">arrycopy(from, buf2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf2);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不要往指向NULL的指针拷贝数据；</p></li><li><p>不要轻易改变形参的值，可以用一个辅助的指针变量将形参接过来，再对辅助指针变量操作不影响形参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrycopy</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *myfrom = from;</span><br><span class="line"><span class="keyword">char</span> *myto = to;</span><br><span class="line"><span class="keyword">while</span> (*myto++ = *myfrom++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *from = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> buf2[<span class="number">20</span>];</span><br><span class="line">arrycopy(from, buf2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf2);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do-while模型（求一个长字符串中含有一个短字符串的个数）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="string">&quot;abcdaaaabcdbbbbabcdccc&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">p = <span class="built_in">strstr</span>(p, <span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p + <span class="built_in">strlen</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (*p!= <span class="string">&quot;\0&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="string">&quot;abcdaaaabcdbbbbabcdccc&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p= <span class="built_in">strstr</span>(p, <span class="string">&quot;abcd&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p + <span class="built_in">strlen</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (*p == <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数接口模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">do-while模型：</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int arrycount(char *myp, char *mys, int *mycount)</span><br><span class="line">&#123;</span><br><span class="line">if (myp &#x3D;&#x3D; NULL || mys &#x3D;&#x3D; NULL || mycount &#x3D;&#x3D; NULL)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">char *p &#x3D; myp;</span><br><span class="line">char *s &#x3D; mys;</span><br><span class="line">int tmpcount &#x3D; 0;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">p &#x3D; strstr(p, s);</span><br><span class="line">if (p !&#x3D; NULL)</span><br><span class="line">&#123;</span><br><span class="line">(tmpcount)++;</span><br><span class="line">p &#x3D; p + strlen(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125; while (p!&#x3D;NULL);</span><br><span class="line">*mycount &#x3D; tmpcount;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char *p &#x3D; &quot;abcdaaaabcdbbbbabcdccc&quot;;</span><br><span class="line">char *s &#x3D; &quot;abcd&quot;;</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line">int ret &#x3D; arrycount(p, s, &amp;count);</span><br><span class="line">if (ret !&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;func getCount() err:%d \n&quot;, ret);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;, count);</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while模型：</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int arrycount(char *myp, char *mys, int *mycount)</span><br><span class="line">&#123;</span><br><span class="line">if (myp &#x3D;&#x3D; NULL || mys &#x3D;&#x3D; NULL || mycount &#x3D;&#x3D; NULL)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">char *p &#x3D; myp;</span><br><span class="line">char *s &#x3D; mys;</span><br><span class="line">int tmpcount &#x3D; 0;</span><br><span class="line">while (p &#x3D; strstr(p, s))</span><br><span class="line">&#123;</span><br><span class="line">(tmpcount)++;</span><br><span class="line">p &#x3D; p + strlen(s);</span><br><span class="line">&#125;</span><br><span class="line">*mycount &#x3D; tmpcount;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char *p &#x3D; &quot;abcdaaaabcdbbbbabcdccc&quot;;</span><br><span class="line">char *s &#x3D; &quot;abcd&quot;;</span><br><span class="line">int count&#x3D;0;</span><br><span class="line">int ret &#x3D; arrycount(p, s, &amp;count);</span><br><span class="line">if (ret !&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;func getCount() err:%d \n&quot;, ret);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;, count);</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两头堵模型（求除去空格字符串的有效长度）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;   abcdefg  &quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="built_in">strlen</span>(s) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(s[i])&amp;&amp;s[i]!=<span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(s[j]) &amp;&amp; s[j] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">count = j - i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">函数模式：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">arrycount</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> *count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span> || count == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="built_in">strlen</span>(s) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(s[i])&amp;&amp;s[i]!=<span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(s[j])&amp;&amp; s[j] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">*count = j - i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;   abcdefg  &quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = arrycount(s, &amp;count);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得去空格的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">拷贝至新字符串</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trimspace</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *newarry)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span> || newarry == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="built_in">strlen</span>(s) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(s[i]) &amp;&amp; s[i] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(s[j]) &amp;&amp; s[j] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">count = j - i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">strncpy</span>(newarry, s+i, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;   abcdefg  &quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> newarry[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">ret = trimspace(s, newarry);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, newarry);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">拷贝至原字符串：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trimspace</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="built_in">strlen</span>(s) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(s[i]) &amp;&amp; s[i] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(s[j]) &amp;&amp; s[j] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">count = j - i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">strncpy</span>(tmp, s + i, count);</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">strlen</span>(s));</span><br><span class="line"><span class="built_in">strncpy</span>(s, tmp, count);</span><br><span class="line"><span class="built_in">strcat</span>(s, <span class="string">&quot;\0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;   abcdefg  &quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = trimspace(s);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串反转模型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inverse</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p1 = s;</span><br><span class="line"><span class="keyword">char</span> *p2 = s + <span class="built_in">strlen</span>(s) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="keyword">while</span> (p1 &lt; p2)</span><br><span class="line">&#123;</span><br><span class="line">tmp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = tmp;</span><br><span class="line">p1++;</span><br><span class="line">p2--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = inverse(s);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line">递归：</span><br><span class="line">打印：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inverse</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="number">0</span>)<span class="comment">//不能写&quot;\0&quot;，不知道是不是编译器的原因</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inverse(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">inverse(s);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">全局变量法：</span><br><span class="line">初版：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inverse</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inverse(s + <span class="number">1</span>);</span><br><span class="line">tmp[i] = *s;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">inverse(s);</span><br><span class="line">    <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">strncpy</span>(s, tmp, <span class="built_in">strlen</span>(s));</span><br><span class="line"><span class="built_in">strcat</span>(s, <span class="string">&quot;\0&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">修正版：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inverse</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inverse(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcat</span>(tmp, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">inverse(s);</span><br><span class="line">    <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">strncpy</span>(s, tmp, <span class="built_in">strlen</span>(s));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">局部变量法：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inverse</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *mybuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inverse(s + <span class="number">1</span>, mybuf);</span><br><span class="line"><span class="built_in">strncat</span>(mybuf, s, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> mybuf[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;必须初始化，不然<span class="built_in">strcat</span>函数识别不了是字符串，可以初始化为零，也可以为任意字符串，初始化可以使用<span class="built_in">memset</span>函数</span><br><span class="line">inverse(s,mybuf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, mybuf);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据keybuf获得等号后面非空字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getarryvalue</span><span class="params">(<span class="keyword">char</span> *buf,<span class="keyword">char</span> *keybuf,<span class="keyword">char</span> *valuebuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (buf == <span class="literal">NULL</span> || keybuf == <span class="literal">NULL</span> || valuebuf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = buf;</span><br><span class="line">p = <span class="built_in">strstr</span>(p, keybuf);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found key\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = <span class="built_in">strstr</span>(p, <span class="string">&quot;=&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found =\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p + <span class="built_in">strlen</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="built_in">strlen</span>(p) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(p[i]) &amp;&amp; p[i] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isspace</span>(p[j]) &amp;&amp; p[j] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">count = j - i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">strncpy</span>(valuebuf, p + i, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s1 = <span class="string">&quot;  key1=   hdghdhks&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s2 = <span class="string">&quot;key2&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s3 = <span class="string">&quot; key3 =ggtgt   &quot;</span>;</span><br><span class="line"><span class="keyword">char</span> valuebuf[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = getarryvalue(s3, <span class="string">&quot;key3&quot;</span>, valuebuf);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;err\n&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, valuebuf);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>C语言中主函数调用其他函数中时，其中的参数与被调函数实际的参数个数不同，编译会检查不出来，这是C语言的一个灰色地带；</p></li><li><p>*count++,因为<ins>优先级高，所以先取指针变量所指向的值，指针变量再加1而非指针指向的值加1，原本意思是要指针变量指向的值</ins>，这样只有指针变量++，指向的值没变，所以要指向的值加1必须加括号；</p></li><li><p>const修饰*号，表示指针指向的值不能变，const修饰指针变量，指针的指向不能变；</p></li><li><p>C语言中的const修饰的东西并不是真正的不能修改，都可以通过指针进行修改；</p></li><li><p>指针作输出模型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmem</span><span class="params">(<span class="keyword">char</span> **myp, <span class="keyword">int</span> *len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*myp = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(*myp, <span class="string">&quot;aabbccdd&quot;</span>);</span><br><span class="line">*len = <span class="built_in">strlen</span>(*myp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">freemem</span><span class="params">(<span class="keyword">char</span> *myp)</span><span class="comment">//如果要将指针置成NULL,需要传二级指针，如下面程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (myp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(myp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">ret = getmem(&amp;p1, &amp;len);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p1 err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d&quot;</span>, p1,len);</span><br><span class="line">freemem(p1);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmem</span><span class="params">(<span class="keyword">char</span> **myp, <span class="keyword">int</span> *len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*myp = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(*myp, <span class="string">&quot;aabbccdd&quot;</span>);</span><br><span class="line">*len = <span class="built_in">strlen</span>(*myp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">freemem</span><span class="params">(<span class="keyword">char</span> **myp)</span><span class="comment">//如果要将指针置成NULL,需要传二级指针，如下面程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (myp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*myp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*myp);</span><br><span class="line">&#125;</span><br><span class="line">*myp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">ret = getmem(&amp;p1, &amp;len);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p1 err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d&quot;</span>, p1,len);</span><br><span class="line">freemem(&amp;p1);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针作输入模型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">1</span>种：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> **s, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sortarry</span><span class="params">(<span class="keyword">char</span> **s, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(s[i], s[j])&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s[] = &#123; <span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bbbbbbb&quot;</span>,<span class="string">&quot;cccc&quot;</span>,<span class="string">&quot;dddddddd &quot;</span>&#125;;<span class="comment">//s指针在栈区，s[1],s[2].....指向全局区的数据，指针步长是4</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">sizeof</span>(s) / <span class="keyword">sizeof</span>(s[<span class="number">1</span>]);</span><br><span class="line">sortarry(s, num);</span><br><span class="line">print(s, num);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第<span class="number">2</span>种：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> (*s)[<span class="number">10</span>], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sortarry</span><span class="params">(<span class="keyword">char</span>(*s)[<span class="number">10</span>], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(s[i], s[j])&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(tmp, s[i]);<span class="comment">//交换的不再是指针，交换指针所指的数据</span></span><br><span class="line"><span class="built_in">strcpy</span>(s[i], s[j]);</span><br><span class="line"><span class="built_in">strcpy</span>(s[j], tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[][<span class="number">10</span>] = &#123; <span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bbbbbbb&quot;</span>,<span class="string">&quot;cccc&quot;</span>,<span class="string">&quot;dddddddd &quot;</span>&#125;;<span class="comment">//指针和数据都在栈区，指针步长是s[1]的长度</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">sizeof</span>(s) / <span class="keyword">sizeof</span>(s[<span class="number">1</span>]);</span><br><span class="line">sortarry(s, num);</span><br><span class="line">print(s, num);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第<span class="number">3</span>种：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">char</span> **<span class="title">getmem</span><span class="params">(<span class="keyword">int</span> size1, <span class="keyword">int</span> size2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> **p = (<span class="keyword">char</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span> *) * size1);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size1; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * size2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size1; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(p[i], <span class="string">&quot;%d%d%d&quot;</span>, i, i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">freemem</span><span class="params">(<span class="keyword">char</span> ***p, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(*p + i) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(**p + i);</span><br><span class="line">*(*p + i) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*p);</span><br><span class="line">*p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> **s, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sortarry</span><span class="params">(<span class="keyword">char</span> **s, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(s[i], s[j])&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> **s = getmem(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">//二级指针在栈区，一级指针在堆区，数据在堆区，指针步长是4</span></span><br><span class="line">sortarry(s, <span class="number">10</span>);</span><br><span class="line">print(s, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//freemem(&amp;s,10);</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针作函数参数用n级指针改变n-1级指针的值；</p></li><li><p>两个辅助指针变量挖字符串(以&quot;,&quot;分隔将分隔后的字符串拷贝到一个二维数组或者一个二级指针指向的内存空间，并求出分隔后有多少个字符串)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span>(*a)[<span class="number">30</span>], <span class="keyword">char</span> *c, <span class="keyword">int</span> *rowcount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span> || rowcount == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = s;</span><br><span class="line"><span class="keyword">char</span> *ptmp = s;</span><br><span class="line"><span class="keyword">int</span> tmpcount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="built_in">strstr</span>(p, c);</span><br><span class="line"><span class="keyword">if</span> (p - ptmp &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strncpy</span>(a[tmpcount], ptmp, p - ptmp);</span><br><span class="line">a[tmpcount][p - ptmp] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">tmpcount++;</span><br><span class="line">ptmp = p = p + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*ptmp != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strncpy</span>(a[tmpcount], ptmp, <span class="built_in">strlen</span>(ptmp) + <span class="number">1</span>);</span><br><span class="line">tmpcount++;</span><br><span class="line">&#125;</span><br><span class="line">*rowcount = tmpcount;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;afdgg,ddddf,dsaff,ddfff&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *c = <span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> rowcount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = getvalue(s, a, c, &amp;rowcount);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowcount; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rowcount);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">用第<span class="number">3</span>种内存模型接：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmem</span><span class="params">(<span class="keyword">char</span> ***p,<span class="keyword">int</span> size1, <span class="keyword">int</span> size2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">*p = (<span class="keyword">char</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span> *) * size1);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size1; i++)</span><br><span class="line">&#123;</span><br><span class="line">(*p)[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * size2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">freemem</span><span class="params">(<span class="keyword">char</span> ***p, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>((*p)[i]);</span><br><span class="line">(*p)[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*p);</span><br><span class="line">*p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> **a,<span class="keyword">char</span> *c, <span class="keyword">int</span> *rowcount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span> || rowcount == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = s;</span><br><span class="line"><span class="keyword">char</span> *ptmp = s;</span><br><span class="line"><span class="keyword">int</span> tmpcount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p = <span class="built_in">strstr</span>(p, c))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p - ptmp &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strncpy</span>(a[tmpcount], ptmp, p - ptmp);</span><br><span class="line">a[tmpcount][p-ptmp] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">tmpcount++;</span><br><span class="line">ptmp = p = p + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*ptmp != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strncpy</span>(a[tmpcount], ptmp, <span class="built_in">strlen</span>(ptmp) + <span class="number">1</span>);</span><br><span class="line">tmpcount++;</span><br><span class="line">&#125;</span><br><span class="line">*rowcount = tmpcount;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;afdgg,ddddf,dsaff,ddfff&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *c = <span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> **a = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = getmem(&amp;a, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rowcount = <span class="number">0</span>;</span><br><span class="line">ret = getvalue(s, a, c, &amp;rowcount);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowcount; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rowcount);</span><br><span class="line">freemem(&amp;a, <span class="number">20</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个入口多个出口的函数，需要考虑前面return执行，直接跳过了释放内存的语句，可以使用goto语句，在函数后面添加释放内存的语句，goto跳到此处；</p></li><li><p>int c[10];数组名c和&amp;c是不同的，c是首元素的地址，&amp;c是整个数组的地址，指针步长不一样，c指针步长4个字节，&amp;c指针步长40个字节；</p></li><li><p>怎么表达数组类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">typedef int (arry)[5];//int后面有无空格都行</span><br><span class="line">arry myarry;<span class="comment">//相当于int myarry[5]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">typedef int(arry)[5];</span><br><span class="line">arry myarry;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myarry[i] = i + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, myarry[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组指针类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line">typedef int(*arry)[5];</span><br><span class="line">arry myarry;</span><br><span class="line">myarry=a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line">typedef int(*arry)[5];</span><br><span class="line">arry myarry;</span><br><span class="line">myarry = &amp;a;<span class="comment">//为了兼容，编译器允许a和&amp;a都行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">(*myarry)[i] = i + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, (*myarry)[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第一种方法</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *a[<span class="number">5</span>] = &#123; <span class="string">&quot;asadd&quot;</span>,<span class="string">&quot;dffa&quot;</span>,<span class="string">&quot;sfff&quot;</span>,<span class="string">&quot;hghth&quot;</span>,<span class="string">&quot;gdhdhdh&quot;</span> &#125;;</span><br><span class="line">typedef int(arry)[5];</span><br><span class="line">arry *myarry;</span><br><span class="line">myarry = &amp;a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, (*myarry)[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第二种方法</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *a[<span class="number">5</span>] = &#123; <span class="string">&quot;asadd&quot;</span>,<span class="string">&quot;dffa&quot;</span>,<span class="string">&quot;sfff&quot;</span>,<span class="string">&quot;hghth&quot;</span>,<span class="string">&quot;gdhdhdh&quot;</span> &#125;;</span><br><span class="line">typedef int(*arry)[5];</span><br><span class="line">arry myarry;</span><br><span class="line">myarry = &amp;a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, (*myarry)[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第三种方法</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *a[<span class="number">5</span>] = &#123; <span class="string">&quot;asadd&quot;</span>,<span class="string">&quot;dffa&quot;</span>,<span class="string">&quot;sfff&quot;</span>,<span class="string">&quot;hghth&quot;</span>,<span class="string">&quot;gdhdhdh&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>(*myarry)[<span class="number">5</span>];</span><br><span class="line">myarry = &amp;a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, (*myarry)[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多维数组名的本质是数组指针；</p></li><li><p>数组种[]和*操作符的转换；</p></li><li><p>多维数组做函数参数，退化为数组指针；</p></li><li><p>多维数组是在内存上是线性存储的；</p></li><li><p>多维数组作函数参数，一般只能表达到二维，如果是三级及以上的指针，则不代表几维的内存；</p></li><li><p>分清指针数组*p[]和数组指针(*p)[]的区别；</p></li><li><p>指针数组的应用场景：菜单，命令行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">菜单：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIM(a) (sizeof(a)/sizeof(*a))</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searcheKeyTable</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* table[], <span class="keyword">const</span> <span class="keyword">int</span> size, <span class="keyword">const</span> <span class="keyword">char</span>* key, <span class="keyword">int</span> *pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> inum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (table == <span class="literal">NULL</span> || key == <span class="literal">NULL</span> || pos == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rv = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func searcheKeyTable:%d&quot;</span>, rv);</span><br><span class="line"><span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(key, table[i]) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pos = i;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有找到返回-1</span></span><br><span class="line"><span class="keyword">if</span> (i == size)</span><br><span class="line">&#123;</span><br><span class="line">*pos = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> inum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//指针数组</span></span><br><span class="line"><span class="keyword">char</span>*   c_keyword[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;while&quot;</span>,</span><br><span class="line"><span class="string">&quot;case&quot;</span>,</span><br><span class="line"><span class="string">&quot;static&quot;</span>,</span><br><span class="line"><span class="string">&quot;do&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">searcheKeyTable(c_keyword, DIM(c_keyword), <span class="string">&quot;do&quot;</span>, &amp;pos);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pos:%d\n&quot;</span>, pos);</span><br><span class="line">searcheKeyTable(c_keyword, DIM(c_keyword), <span class="string">&quot;static&quot;</span>, &amp;pos);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pos:%d\n&quot;</span>, pos);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">命令行：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">argc 命令行参数</span></span><br><span class="line"><span class="comment">argv 命令行参数数组</span></span><br><span class="line"><span class="comment">env  函数变量数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main();</span></span><br><span class="line"><span class="comment">int main(int argc);</span></span><br><span class="line"><span class="comment">int main(int argc, char *argv[])</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>**env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;******************* Begin argv *******************\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;argc; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;******************* End argv *******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;******************* Begin env *******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; env[i] != <span class="literal">NULL</span>; i++)  </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, env[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;******************* End env*******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针数组结束的3种表示方法，’\0\、0和NULL；</p></li><li><p>结构体的定义方法和初始化的方法，typedef；</p></li><li><p>结构体中.和-&gt;操作是在CPU中计算结构体成员对于结构体的偏移量；</p></li><li><p>结构体变量的拷贝</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;Teacher;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copystruct</span><span class="params">(Teacher *to, Teacher *from)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*to = *from;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher t1 = &#123; <span class="number">30</span>,<span class="string">&quot;aa&quot;</span> &#125;;</span><br><span class="line">Teacher t2;</span><br><span class="line">copystruct(&amp;t2, &amp;t1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%s&quot;</span>, t2.age, t2.name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针数组求指针的个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *p1[] = &#123; <span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;ddddd&quot;</span>,<span class="string">&quot;cccc&quot;</span>,<span class="string">&quot;eeeee&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(p) / <span class="keyword">sizeof</span>(*p);</span><br></pre></td></tr></table></figure></li><li><p>二维数组求行数和列数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> p[][<span class="number">10</span>] = &#123; <span class="string">&quot;qfef&quot;</span>,<span class="string">&quot;ggrgrg&quot;</span>,<span class="string">&quot;rgrggrg&quot;</span>,<span class="string">&quot;hhhhdd&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len1 = <span class="keyword">sizeof</span>(p2) / <span class="keyword">sizeof</span>(p2[<span class="number">0</span>]);<span class="comment">//求行数</span></span><br><span class="line"><span class="keyword">int</span> len2 = <span class="keyword">sizeof</span>(p2[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(p[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//求列数</span></span><br></pre></td></tr></table></figure></li><li><p>将第1种和第2种内存模型拷贝到第三种模型并排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmem</span><span class="params">(<span class="keyword">char</span> ***p, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> **tmp;</span><br><span class="line">tmp = (<span class="keyword">char</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span> **)*len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">*p = tmp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sortarry</span><span class="params">(<span class="keyword">char</span> **p1, <span class="keyword">int</span> len1, <span class="keyword">char</span>(*p2)[<span class="number">10</span>], <span class="keyword">int</span> len2, <span class="keyword">char</span> **p3, <span class="keyword">int</span> len3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(p3[i], p1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>,j=len1; j &lt; len3; i++,j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(p3[j], p2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len3; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len3 - i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(p3[j], p3[j + <span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = p3[j];</span><br><span class="line">p3[j] = p3[j + <span class="number">1</span>];</span><br><span class="line">p3[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> **p, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memfree</span><span class="params">(<span class="keyword">char</span> ***p, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> **tmp = *p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tmp[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(tmp[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">*tmp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p1[] = &#123; <span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;ddddd&quot;</span>,<span class="string">&quot;cccc&quot;</span>,<span class="string">&quot;eeeee&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len1 = <span class="keyword">sizeof</span>(p1)/<span class="keyword">sizeof</span>(*p1);</span><br><span class="line"><span class="keyword">char</span> p2[][<span class="number">10</span>] = &#123; <span class="string">&quot;qfef&quot;</span>,<span class="string">&quot;ggrgrg&quot;</span>,<span class="string">&quot;rgrggrg&quot;</span>,<span class="string">&quot;hhhhdd&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len2 = <span class="keyword">sizeof</span>(p2) / <span class="keyword">sizeof</span>(p2[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">char</span> **p3;</span><br><span class="line"><span class="keyword">int</span> len3 = len1 + len2;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line">ret = getmem(&amp;p3, len3);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ret = sortarry(p1, len1, p2, len2, p3, len3);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(p3, len3);</span><br><span class="line">memfree(&amp;p3, len3);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结构体拷贝会存在浅拷贝的问题，即使用系统给的浅拷贝操作，如果结构体中存在指针指向堆空间数据，拷贝只是将指针地址拷贝，指针指向的内存空间并不会拷贝，再释放内存时，会存在两次释放，第一次释放后再释放没存数据的内存会报错宕掉，解决办法是将指向内存的数据也拷贝一份</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">错误案例：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> *nname;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher t1,t2;</span><br><span class="line">t1.nname = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">t2.nname = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(t1.name, <span class="string">&quot;aaaaa&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(t1.nname, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">t1.age = <span class="number">33</span>;</span><br><span class="line">t2 = t1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%s,%d&quot;</span>, t2.name, t2.nname,t2.age);</span><br><span class="line"><span class="keyword">if</span> (t1.nname != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(t1.nname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t2.nname != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(t2.nname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">正确案例：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> *nname;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher t1,t2;</span><br><span class="line">t1.nname = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(t1.name, <span class="string">&quot;aaaaa&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(t1.nname, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">t1.age = <span class="number">33</span>;</span><br><span class="line">t2 = t1;</span><br><span class="line">t2.nname = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(t2.nname, t1.nname);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%s,%d&quot;</span>, t2.name, t2.nname,t2.age);</span><br><span class="line"><span class="keyword">if</span> (t1.nname != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(t1.nname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t2.nname != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(t2.nname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结构体中套一级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> *nnmae;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nnmsefree</span><span class="params">(Teacher *arry,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i].nnmae != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arry[i].nnmae);</span><br><span class="line">arry[i].nnmae = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initarry</span><span class="params">(Teacher *arry, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].age = i + <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(arry[<span class="number">0</span>].name, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(arry[<span class="number">1</span>].name, <span class="string">&quot;abbba&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(arry[<span class="number">2</span>].name, <span class="string">&quot;accca&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].nnmae= (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(arry[<span class="number">0</span>].nnmae, <span class="string">&quot;1111aaaa&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(arry[<span class="number">1</span>].nnmae, <span class="string">&quot;2222abbba&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(arry[<span class="number">2</span>].nnmae, <span class="string">&quot;333accca&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(Teacher p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s %d\n&quot;</span>, p.name, p.nnmae, p.age);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher arry[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arry) / <span class="keyword">sizeof</span>(arry[<span class="number">1</span>]);</span><br><span class="line">initarry(arry, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">print(arry[i]);</span><br><span class="line">&#125;</span><br><span class="line">nnmsefree(arry,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结构体中套二级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line">指针数组：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> *nnmae;</span><br><span class="line"><span class="keyword">char</span> *student[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nnmsefree</span><span class="params">(Teacher *arry, <span class="keyword">int</span> len, <span class="keyword">int</span> slen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i].nnmae != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arry[i].nnmae);</span><br><span class="line">arry[i].nnmae = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; slen; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i].student[j] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arry[i].student[j]);</span><br><span class="line">&#125;</span><br><span class="line">arry[i].student[j] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initarry</span><span class="params">(Teacher *arry, <span class="keyword">int</span> len, <span class="keyword">int</span> slen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].nnmae = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; slen; j++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].student[j] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].name, <span class="string">&quot;%d%d%daaa&quot;</span>, i, i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].nnmae, <span class="string">&quot;%d%dname&quot;</span>, i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; slen; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].student[j], <span class="string">&quot;%d%d%daaaa&quot;</span>, i, j, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].age = i + <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(Teacher p, <span class="keyword">int</span> slen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s %d &quot;</span>, p.name, p.nnmae, p.age);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slen; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, p.student[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher arry[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arry) / <span class="keyword">sizeof</span>(arry[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> slen = <span class="keyword">sizeof</span>(arry[<span class="number">0</span>].student) / <span class="keyword">sizeof</span>(arry[<span class="number">0</span>].student[<span class="number">0</span>]);</span><br><span class="line">initarry(arry, len, slen);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">print(arry[i], slen);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">nnmsefree(arry, len, slen);</span><br><span class="line">&#125;</span><br><span class="line">二维数组：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> *nnmae;</span><br><span class="line"><span class="keyword">char</span> student[<span class="number">3</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nnmsefree</span><span class="params">(Teacher *arry, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i].nnmae != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arry[i].nnmae);</span><br><span class="line">arry[i].nnmae = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initarry</span><span class="params">(Teacher *arry, <span class="keyword">int</span> len, <span class="keyword">int</span> slen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].age = i + <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].nnmae = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].nnmae, <span class="string">&quot;%d%dname&quot;</span>, i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].name, <span class="string">&quot;%d%d%daaa&quot;</span>, i, i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; slen; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].student[j], <span class="string">&quot;%d%d%daaaa&quot;</span>, i, j, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(Teacher p, <span class="keyword">int</span> slen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s %d &quot;</span>, p.name, p.nnmae, p.age);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slen; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, p.student[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher arry[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arry) / <span class="keyword">sizeof</span>(arry[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> slen = <span class="keyword">sizeof</span>(arry[<span class="number">0</span>].student) / <span class="keyword">sizeof</span>(arry[<span class="number">0</span>].student[<span class="number">0</span>]);</span><br><span class="line">initarry(arry, len, slen);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">print(arry[i], slen);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">nnmsefree(arry, len);</span><br><span class="line">&#125;</span><br><span class="line">二级指针</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> *nnmae;</span><br><span class="line"><span class="keyword">char</span> **student;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nnmsefree</span><span class="params">(Teacher *arry, <span class="keyword">int</span> len, <span class="keyword">int</span> slen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i].nnmae != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arry[i].nnmae);</span><br><span class="line">arry[i].nnmae = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; slen; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i].student[j] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arry[i].student[j]);</span><br><span class="line">&#125;</span><br><span class="line">arry[i].student[j] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i].student != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arry[i].student);</span><br><span class="line">arry[i].student = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initarry</span><span class="params">(Teacher *arry, <span class="keyword">int</span> len, <span class="keyword">int</span> slen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].nnmae = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].student = (<span class="keyword">char</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span> *)*slen);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; slen; j++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].student[j] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].name, <span class="string">&quot;%d%d%daaa&quot;</span>, i, i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].nnmae, <span class="string">&quot;%d%dname&quot;</span>, i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; slen; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].student[j], <span class="string">&quot;%d%d%daaaa&quot;</span>, i, j, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">arry[i].age = i + <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print</span><span class="params">(Teacher p, <span class="keyword">int</span> slen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s %d &quot;</span>, p.name, p.nnmae, p.age);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slen; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, p.student[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher arry[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arry) / <span class="keyword">sizeof</span>(arry[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> slen = <span class="number">3</span>;</span><br><span class="line">initarry(arry, len, slen);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">print(arry[i], slen);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">nnmsefree(arry, len, slen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>求结构体中变量的偏移量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">len = (<span class="keyword">int</span>)&amp;(p-&gt;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以通过偏移量找到结构体中变量的位置，一旦结构体定义，其内存分布确定，不要轻易改变结构体中变量的位置 ；</p></li><li><p>结构体中变量内存分布会存在内存对齐的问题，所以一般将占用内存大的变量写在前面；</p></li><li><p>文件读写api</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fputc fgetc  <span class="comment">//按照字符读写文件</span></span><br><span class="line"><span class="built_in">fputs</span> fgets  <span class="comment">//按照字符串读写文件</span></span><br><span class="line">fread fwrite <span class="comment">//按照块读写文件</span></span><br><span class="line"><span class="built_in">fprintf</span>     <span class="comment">//按照格式化进行读写文件</span></span><br></pre></td></tr></table></figure></li><li><p>打开文件方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;r&quot;</span>            <span class="comment">// 打开，只读</span></span><br><span class="line"><span class="string">&quot;w&quot;</span>            <span class="comment">// 打开，文件指针指到头，只写</span></span><br><span class="line"><span class="string">&quot;a&quot;</span>            <span class="comment">// 打开，指向文件尾，在已存在文件中追加</span></span><br><span class="line"><span class="string">&quot;rb&quot;</span>           <span class="comment">// 打开一个二进制文件，只读</span></span><br><span class="line"><span class="string">&quot;wb&quot;</span>           <span class="comment">// 打开一个二进制文件，只写</span></span><br><span class="line"><span class="string">&quot;ab&quot;</span>           <span class="comment">// 打开一个二进制文件，进行追加</span></span><br><span class="line"><span class="string">&quot;r+&quot;</span>           <span class="comment">// 以读/写方式打开一个已存在的文件</span></span><br><span class="line"><span class="string">&quot;w+&quot;</span>           <span class="comment">// 以读/写方式建立一个新的文本文件</span></span><br><span class="line"><span class="string">&quot;a+&quot;</span>           <span class="comment">// 以读/写方式打开一个文件文件进行追加</span></span><br><span class="line"><span class="string">&quot;rb+&quot;</span>          <span class="comment">// 以读/写方式打开一个二进制文件</span></span><br><span class="line"><span class="string">&quot;wb+&quot;</span>          <span class="comment">// 以读/写方式建立一个新的二进制文件</span></span><br><span class="line"><span class="string">&quot;ab+&quot;</span>           <span class="comment">//以读/写方式打开一个二进制文件进行追加</span></span><br></pre></td></tr></table></figure></li><li><p>fputc和fgetc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *filename = <span class="string">&quot;d:/test.txt&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">fp = fopen(filename, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件成功\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">fputc(s[i], fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> tmpc;</span><br><span class="line">fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!feof(fp))</span><br><span class="line">&#123;</span><br><span class="line">tmpc = fgetc(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, tmpc);</span><br><span class="line">&#125;</span><br><span class="line">END:<span class="keyword">if</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fputs和fgets</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *filename = <span class="string">&quot;d:/test.txt&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s[] = &#123; <span class="string">&quot;hello,world&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;helloworld&quot;</span> &#125;;</span><br><span class="line">fp = fopen(filename, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件成功\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(s) / <span class="keyword">sizeof</span>(s[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fputs</span>(s[i], fp);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!feof(fp))</span><br><span class="line">&#123;</span><br><span class="line">fgets(buf, <span class="number">1024</span>, fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">END:<span class="keyword">if</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果要清空文件内容，直接以w+方式打开，会以空文件覆盖原有文件，即会清空文件内容，不需要清空文件内容，则可以用r+方式打开；</p></li><li><p>写入换行等可以使用fprintf函数；</p></li><li><p>fwrite和fread</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mainwrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher arry[<span class="number">3</span>];</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;d:/teacher.txt&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> myn;</span><br><span class="line">fp = fopen(s, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新建文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(arry[i].name, <span class="string">&quot;%d%d%d&quot;</span>, i, <span class="number">2</span> * i, <span class="number">3</span> * i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myn = fwrite(&amp;arry[i].name, <span class="keyword">sizeof</span>(Teacher), <span class="number">1</span>, fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mainread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Teacher tarry[<span class="number">3</span>];</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;d:/teacher.txt&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> myn;</span><br><span class="line">fp = fopen(s, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myn = fread(&amp;tarry[i].name, <span class="keyword">sizeof</span>(Teacher), <span class="number">1</span>, fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, tarry[i].name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mainwrite();</span><br><span class="line">mainread();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件读写案例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line">思想：</span><br><span class="line">    实现一个配置文件的读写</span><br><span class="line">    读：输入key值，以字符串形式打印在屏幕上；</span><br><span class="line">    写：输入key值和value值，将key值和value值以“key=value”形式写入config配置文件中，如果key值已存在，直接修改key=后面的value值，等同修改功能</span><br><span class="line">    修改：输入key值和value值，如果在文件中找到已有key，直接修改key对应的value，如果没有，则在文件末尾添加“key=value”（实现思想是先新建一个文件，一  行一行读取文件中的内容，写入新文件中，找到key后，将该行替换再写入，然后将剩余部分写入新文件，最后将新文件改名替换）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//config.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tgetconfig</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Twriterconfig</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tmodify</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readconfig</span><span class="params">(<span class="keyword">char</span> *key, <span class="keyword">char</span> *value, <span class="keyword">int</span> *vlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*************************** *****\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [1]写配置文件    [2]读配置文件*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [3]修改配置文件  [0]退出系统  *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;********************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选项\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;select);</span><br><span class="line"><span class="keyword">if</span> (!(select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= <span class="number">3</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入\n&quot;</span>);</span><br><span class="line">rewind(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">Twriterconfig();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">Tgetconfig();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">Tmodify();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//config.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tgetconfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> key[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">char</span> value[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> vlen = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入key值\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, key);</span><br><span class="line">ret = readconfig(key, value, &amp;vlen);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取错误\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, value);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Twriterconfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> key[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">char</span> value[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> vlen = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要写入的key值\n&quot;</span>);</span><br><span class="line">rewind(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要写入的value值\n&quot;</span>);</span><br><span class="line">rewind(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;value);</span><br><span class="line">ret = writeconfig(key, value, &amp;vlen);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写入失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tmodify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> key[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">char</span> value[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> vlen = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要要修改key的值\n&quot;</span>);</span><br><span class="line">rewind(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要修改的value值\n&quot;</span>);</span><br><span class="line">rewind(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;value);</span><br><span class="line">ret = writeconfig(key, value, &amp;vlen);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写入失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readconfig</span><span class="params">(<span class="keyword">char</span> *key, <span class="keyword">char</span> *value, <span class="keyword">int</span> *vlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (key == <span class="literal">NULL</span> || value == <span class="literal">NULL</span> || vlen == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取错误\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> tmpbuf[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">char</span> *tmp1;</span><br><span class="line"><span class="keyword">char</span> *tmp2;</span><br><span class="line"><span class="keyword">int</span> tmplen;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;d:/config.txt&quot;</span>;</span><br><span class="line">fp = fopen(s, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到配置文件打开失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!feof(fp))</span><br><span class="line">&#123;</span><br><span class="line">fgets(tmpbuf, <span class="number">1024</span>, fp);</span><br><span class="line">tmp1 = <span class="built_in">strstr</span>(tmpbuf, key);</span><br><span class="line"><span class="keyword">if</span> (tmp1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp1 = <span class="built_in">strstr</span>(tmpbuf, <span class="string">&quot;=&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp1++;</span><br><span class="line"><span class="keyword">while</span> (*tmp1==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp1++;</span><br><span class="line">&#125;</span><br><span class="line">tmp2 = tmpbuf;</span><br><span class="line"><span class="keyword">while</span> (*tmp2 != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp2++;</span><br><span class="line">&#125;</span><br><span class="line">tmp2--;</span><br><span class="line">tmplen = tmp2 - tmp1 + <span class="number">1</span>;</span><br><span class="line">*vlen = tmplen;</span><br><span class="line"><span class="built_in">strncpy</span>(value, tmp1, tmplen);</span><br><span class="line">value[tmplen] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到key的value\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">writeconfig</span><span class="params">(<span class="keyword">char</span> *key, <span class="keyword">char</span> *value, <span class="keyword">int</span> *vlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (key == <span class="literal">NULL</span> || value == <span class="literal">NULL</span> || vlen == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取错误\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *s1 = <span class="string">&quot;d:/config.txt&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s2 = <span class="string">&quot;d:/config.txt&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> tmpbuf[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">char</span> *tmp;</span><br><span class="line"><span class="keyword">char</span> sel;</span><br><span class="line">FILE *fp1;</span><br><span class="line">FILE *fp2;</span><br><span class="line">fp1 = fopen(s1, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!(fp2 = fopen(s2, <span class="string">&quot;a&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">fp2 = fopen(s2, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">fclose(fp2);</span><br><span class="line">&#125;</span><br><span class="line">fp2 = fopen(s2, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到配置文件,是否创建配置文件，y/n\n&quot;</span>);</span><br><span class="line">rewind(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;sel);</span><br><span class="line"><span class="keyword">if</span> (sel == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">fp1 = fopen(s1, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sel == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;取消创建配置文件\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!feof)</span><br><span class="line">&#123;</span><br><span class="line">fgets(tmpbuf, <span class="number">1024</span>, fp1);</span><br><span class="line">tmp = <span class="built_in">strstr</span>(tmpbuf, key);</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fputs</span>(tmpbuf, fp2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp = <span class="built_in">strstr</span>(tmpbuf, <span class="string">&quot;=&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fputs</span>(tmpbuf, fp2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(fp2, <span class="string">&quot;%s=%s\n&quot;</span>, key, value);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(fp2, <span class="string">&quot;%s=%s\n&quot;</span>, key, value);</span><br><span class="line">fclose(fp2);</span><br><span class="line">rename(s2,s1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>文件加密解密案例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;des.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileEnc</span><span class="params">(<span class="keyword">char</span> *s1,<span class="keyword">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>ret = <span class="number">0</span>;</span><br><span class="line">FILE *fp1 = <span class="literal">NULL</span>, *fp2 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> plain[<span class="number">4096</span>];</span><br><span class="line"><span class="keyword">int</span> plainlen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> cryptbuf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> cryptlen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmplen;</span><br><span class="line">fp1 = fopen(s1, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fp2 = fopen(s2, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp2 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!feof(fp1))</span><br><span class="line">&#123;</span><br><span class="line">plainlen = fread(plain, <span class="number">1</span>, <span class="keyword">sizeof</span>(plain), fp1);</span><br><span class="line"><span class="keyword">if</span> (feof(fp1))  <span class="comment">//读完数据以后，判断是否文件结束</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加密==4k的数据,和加密小于4k的函数不是同一个函数</span></span><br><span class="line">ret = DesEnc_raw(plain, plainlen, cryptbuf, &amp;cryptlen);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func DesEnc() err:%d \n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmplen = fwrite(cryptbuf, <span class="number">1</span>, cryptlen, fp2);</span><br><span class="line"><span class="keyword">if</span> (tmplen != cryptlen)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写密文文件失败，请检查是否磁盘已满\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if (plainlen == 4096)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加密小于4k的数据</span></span><br><span class="line">ret = DesEnc(plain, plainlen, cryptbuf, &amp;cryptlen);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func DesEnc() err:%d \n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmplen = fwrite(cryptbuf, <span class="number">1</span>, cryptlen, fp2);</span><br><span class="line"><span class="keyword">if</span> (cryptlen != tmplen)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写小于4k文件密文失败，请检查是否磁盘已满\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">END:</span><br><span class="line"><span class="keyword">if</span> (fp1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fp2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileDec</span><span class="params">(<span class="keyword">char</span> *s1, <span class="keyword">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>ret = <span class="number">0</span>;</span><br><span class="line">FILE *fp1 = <span class="literal">NULL</span>, *fp2 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> plain[<span class="number">4096</span>];</span><br><span class="line"><span class="keyword">int</span> plainlen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> cryptbuf[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> cryptlen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmplen;</span><br><span class="line">fp1 = fopen(s1, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fp2 = fopen(s2, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp2 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!feof(fp1))</span><br><span class="line">&#123;</span><br><span class="line">cryptlen = fread(cryptbuf, <span class="number">1</span>, <span class="keyword">sizeof</span>(cryptbuf), fp1);</span><br><span class="line"><span class="keyword">if</span> (feof(fp1))  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ret = DesDec_raw(cryptbuf, cryptlen, plain, &amp;plainlen);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func DesDec() err:%d \n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmplen = fwrite(plain, <span class="number">1</span>, plainlen, fp2);</span><br><span class="line"><span class="keyword">if</span> (tmplen != plainlen)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;解密写文文件失败，请检查是否磁盘已满\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = DesDec(cryptbuf, cryptlen, plain, &amp;plainlen);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func DesDec() err:%d \n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmplen = fwrite(plain, <span class="number">1</span>, plainlen, fp2);</span><br><span class="line"><span class="keyword">if</span> (plainlen != tmplen)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写小于4k文件密文失败，请检查是否磁盘已满\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">END:</span><br><span class="line"><span class="keyword">if</span> (fp1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fp2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(fp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *s1 = <span class="string">&quot;d:/ddd.txt&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s2 = <span class="string">&quot;d:/ttt&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *s3 = <span class="string">&quot;d:/xxx.txt&quot;</span>;</span><br><span class="line">fileEnc(s1, s2);  <span class="comment">//加密</span></span><br><span class="line">fileDec(s2, s3);  <span class="comment">//解密</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针的用法，二次调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">getContentLen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">char</span> *buf, <span class="keyword">int</span> *len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *tmp = <span class="literal">NULL</span>;</span><br><span class="line">tmp = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"> *len = <span class="number">10</span>; <span class="comment">//第一次调用求长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strncpy</span>(tmp, <span class="string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>, <span class="number">10</span>);</span><br><span class="line">*len = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//char buf[1024*20];</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *filename = <span class="string">&quot;c:/1.txt&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">getContentLen01(filename, &amp;p, &amp;len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(p); </span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次调用求长度</span></span><br><span class="line"> getContentLen(filename, <span class="literal">NULL</span>, &amp;len);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len);<span class="comment">//可以在主函数分配内存</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次调用求内容</span></span><br><span class="line">getContentLen(filename, p, &amp;len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(p); </span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello...\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两套socket api</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int socketclient_init(void **handle)；</span><br><span class="line">int socketclient_send(void *handle,unsigned char *buf,int buflen)；</span><br><span class="line">int socketclient_recv(void *handle,unsigned char *buf,int *buflen)；</span><br><span class="line">int socketclient_destory(void *handle)；</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int socketclient_init(void **handle)；</span><br><span class="line">int socketclient_send(void *handle,unsigned char *buf,int buflen)；</span><br><span class="line">int socketclient_recv(void *handle,unsigned char **buf,int *buflen)；</span><br><span class="line">int socketclient_destory(void **handle)；</span><br></pre></td></tr></table></figure></li><li><p>socket第一套api</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;socketclientdll.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> *handle = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">int</span> buflen = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> outbuflen;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> outbuf[<span class="number">128</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(buf, <span class="string">&quot;dfsgdsgdggdg&quot;</span>);</span><br><span class="line">ret = cltSocketInit(&amp;handle <span class="comment">/*out*/</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line">ret = cltSocketSend(handle <span class="comment">/*in*/</span>, buf <span class="comment">/*in*/</span>, buflen <span class="comment">/*in*/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端收报文</span></span><br><span class="line">ret = cltSocketRev(handle <span class="comment">/*in*/</span>, outbuf <span class="comment">/*in*/</span>, &amp;outbuflen <span class="comment">/*in out*/</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketDestory</span><span class="params">(<span class="keyword">void</span> *handle<span class="comment">/*in*/</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//socket.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _INC_Demo01_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _INC_Demo01_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------第一套api接口---Begin--------------------------------//</span></span><br><span class="line"><span class="comment">//客户端初始化 获取handle上下</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketInit</span><span class="params">(<span class="keyword">void</span> **handle <span class="comment">/*out*/</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketSend</span><span class="params">(<span class="keyword">void</span> *handle <span class="comment">/*in*/</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf <span class="comment">/*in*/</span>,  <span class="keyword">int</span> buflen <span class="comment">/*in*/</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端收报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev</span><span class="params">(<span class="keyword">void</span> *handle <span class="comment">/*in*/</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf <span class="comment">/*in*/</span>, <span class="keyword">int</span> *buflen <span class="comment">/*in out*/</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketDestory</span><span class="params">(<span class="keyword">void</span> *handle<span class="comment">/*in*/</span>)</span></span>;</span><br><span class="line"><span class="comment">//------------------第一套api接口---End-----------------------------------//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------第二套api接口---Begin--------------------------------//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketInit2</span><span class="params">(<span class="keyword">void</span> **handle)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketSend2</span><span class="params">(<span class="keyword">void</span> *handle, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf,  <span class="keyword">int</span> buflen)</span></span>;</span><br><span class="line"><span class="comment">//客户端收报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev2</span><span class="params">(<span class="keyword">void</span> *handle, <span class="keyword">unsigned</span> <span class="keyword">char</span> **buf, <span class="keyword">int</span> *buflen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev2_Free</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> **buf)</span></span>;</span><br><span class="line"><span class="comment">//客户端释放资源</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketDestory2</span><span class="params">(<span class="keyword">void</span> **handle)</span></span>;</span><br><span class="line"><span class="comment">//------------------第二套api接口---End--------------------------------//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* _INC_Demo01_H */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//socket.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;socketclientdll.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SCK_HANDLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span>version[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span>ip[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">int</span>port;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>*p;</span><br><span class="line"><span class="keyword">int</span>plen;</span><br><span class="line">&#125;SCK_HANDLE;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketInit</span><span class="params">(<span class="keyword">void</span> **handle <span class="comment">/*out*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">SCK_HANDLE *hdl = (SCK_HANDLE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SCK_HANDLE));</span><br><span class="line"><span class="keyword">if</span> (hdl == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(hdl, <span class="number">0</span>, <span class="keyword">sizeof</span>(SCK_HANDLE));</span><br><span class="line"><span class="built_in">strcpy</span>(hdl-&gt;ip, <span class="string">&quot;192.168.6.254&quot;</span>);</span><br><span class="line">hdl-&gt;port = <span class="number">8081</span>;</span><br><span class="line">*handle = hdl;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketSend</span><span class="params">(<span class="keyword">void</span> *handle <span class="comment">/*in*/</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf <span class="comment">/*in*/</span>, <span class="keyword">int</span> buflen <span class="comment">/*in*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">SCK_HANDLE *hdl = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (handle == <span class="literal">NULL</span> || buf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func cltSocketSend() err:%d\n  (unsigned char *)malloc(buflen *sizeof(unsigned char)&quot;</span>,ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">hdl = (SCK_HANDLE *)handle;</span><br><span class="line">hdl-&gt;p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(buflen * <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">if</span> (hdl-&gt;p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func cltSocketSend() err:%d\n  (unsigned char *)malloc(buflen *sizeof(unsigned char)&quot;</span>,ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(hdl-&gt;p, buf, buflen);</span><br><span class="line">hdl-&gt;plen = buflen;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端收报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev</span><span class="params">(<span class="keyword">void</span> *handle <span class="comment">/*in*/</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf <span class="comment">/*in*/</span>, <span class="keyword">int</span> *buflen <span class="comment">/*in out*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">SCK_HANDLE *hdl = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (handle == <span class="literal">NULL</span> || buf == <span class="literal">NULL</span> || buflen == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func cltSocketRev() err:%d\n  (handle==NULL || buf==NULL)&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">hdl = (SCK_HANDLE *)handle;</span><br><span class="line"><span class="built_in">memcpy</span>(buf, hdl-&gt;p, hdl-&gt;plen);</span><br><span class="line">*buflen = hdl-&gt;plen;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketDestory</span><span class="params">(<span class="keyword">void</span> *handle<span class="comment">/*in*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">SCK_HANDLE *hdl = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (handle == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func cltSocketDestory() err:%d\n  (handle==NULL || buf==NULL )&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">hdl = (SCK_HANDLE *)handle;</span><br><span class="line"><span class="keyword">if</span> (hdl-&gt;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(hdl-&gt;p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(hdl);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>socket第二套api</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;socketclientdll.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> *handle = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">int</span> buflen = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> poutlen;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *pout = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(buf, <span class="string">&quot;dfsgdsgdggdg&quot;</span>);</span><br><span class="line">ret = cltSocketInit2(&amp;handle);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line">ret = cltSocketSend2(handle <span class="comment">/*in*/</span>, buf <span class="comment">/*in*/</span>, buflen <span class="comment">/*in*/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端收报文</span></span><br><span class="line">ret = cltSocketRev2(handle <span class="comment">/*in*/</span>, &amp;pout <span class="comment">/*in*/</span>, &amp;poutlen <span class="comment">/*in out*/</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;err\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端释放资源</span></span><br><span class="line">cltSocketDestory2(&amp;handle<span class="comment">/*in*/</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//socket.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//written by  wangbaoming1999@163.com</span></span><br><span class="line"><span class="comment">//20140323 23:10</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面定义了一套socket客户端发送报文接受报文的api接口</span></span><br><span class="line"><span class="comment">请写出这套接口api的调用方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _INC_Demo01_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _INC_Demo01_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------第一套api接口---Begin--------------------------------//</span></span><br><span class="line"><span class="comment">//客户端初始化 获取handle上下</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketInit</span><span class="params">(<span class="keyword">void</span> **handle <span class="comment">/*out*/</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketSend</span><span class="params">(<span class="keyword">void</span> *handle <span class="comment">/*in*/</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf <span class="comment">/*in*/</span>,  <span class="keyword">int</span> buflen <span class="comment">/*in*/</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端收报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev</span><span class="params">(<span class="keyword">void</span> *handle <span class="comment">/*in*/</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf <span class="comment">/*in*/</span>, <span class="keyword">int</span> *buflen <span class="comment">/*in out*/</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketDestory</span><span class="params">(<span class="keyword">void</span> *handle<span class="comment">/*in*/</span>)</span></span>;</span><br><span class="line"><span class="comment">//------------------第一套api接口---End-----------------------------------//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------第二套api接口---Begin--------------------------------//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketInit2</span><span class="params">(<span class="keyword">void</span> **handle)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketSend2</span><span class="params">(<span class="keyword">void</span> *handle, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf,  <span class="keyword">int</span> buflen)</span></span>;</span><br><span class="line"><span class="comment">//客户端收报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev2</span><span class="params">(<span class="keyword">void</span> *handle, <span class="keyword">unsigned</span> <span class="keyword">char</span> **buf, <span class="keyword">int</span> *buflen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev2_Free</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> **buf)</span></span>;</span><br><span class="line"><span class="comment">//客户端释放资源</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketDestory2</span><span class="params">(<span class="keyword">void</span> **handle)</span></span>;</span><br><span class="line"><span class="comment">//------------------第二套api接口---End--------------------------------//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* _INC_Demo01_H */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//socket.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;socketclientdll.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SCK_HANDLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span>version[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span>ip[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">int</span>port;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>*p;</span><br><span class="line"><span class="keyword">int</span>plen;</span><br><span class="line">&#125;SCK_HANDLE;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketInit</span><span class="params">(<span class="keyword">void</span> **handle <span class="comment">/*out*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">SCK_HANDLE *hdl = (SCK_HANDLE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SCK_HANDLE));</span><br><span class="line"><span class="keyword">if</span> (hdl == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(hdl, <span class="number">0</span>, <span class="keyword">sizeof</span>(SCK_HANDLE));</span><br><span class="line"><span class="built_in">strcpy</span>(hdl-&gt;ip, <span class="string">&quot;192.168.6.254&quot;</span>);</span><br><span class="line">hdl-&gt;port = <span class="number">8081</span>;</span><br><span class="line">*handle = hdl;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketSend</span><span class="params">(<span class="keyword">void</span> *handle <span class="comment">/*in*/</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf <span class="comment">/*in*/</span>, <span class="keyword">int</span> buflen <span class="comment">/*in*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">SCK_HANDLE *hdl = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (handle == <span class="literal">NULL</span> || buf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func cltSocketSend() err:%d\n  (unsigned char *)malloc(buflen *sizeof(unsigned char)&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">hdl = (SCK_HANDLE *)handle;</span><br><span class="line">hdl-&gt;p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(buflen * <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">if</span> (hdl-&gt;p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func cltSocketSend() err:%d\n  (unsigned char *)malloc(buflen *sizeof(unsigned char)&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(hdl-&gt;p, buf, buflen);</span><br><span class="line">hdl-&gt;plen = buflen;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketInit2</span><span class="params">(<span class="keyword">void</span> **handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cltSocketInit(handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发报文</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketSend2</span><span class="params">(<span class="keyword">void</span> *handle, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> buflen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cltSocketSend(handle, buf, buflen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端收报文</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev2</span><span class="params">(<span class="keyword">void</span> *handle, <span class="keyword">unsigned</span> <span class="keyword">char</span> **buf, <span class="keyword">int</span> *buflen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>ret = <span class="number">0</span>;</span><br><span class="line">SCK_HANDLE *hdl = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>*tmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handle == <span class="literal">NULL</span> || buf == <span class="literal">NULL</span> || buflen == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func cltSocketRev2() err:%d\n  (handle==NULL || buf==NULL&quot;</span>, ret); </span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">hdl = (SCK_HANDLE *)handle;</span><br><span class="line"></span><br><span class="line">tmp = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(hdl-&gt;plen);</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func cltSocketRev2() err:%d\n  (handle==NULL || buf==NULL&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(tmp, hdl-&gt;p, hdl-&gt;plen);</span><br><span class="line">*buflen = hdl-&gt;plen;</span><br><span class="line"></span><br><span class="line">*buf = tmp; <span class="comment">//间接赋值</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketRev2_Free</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> **buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*buf != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*buf);</span><br><span class="line">&#125;</span><br><span class="line">*buf = <span class="literal">NULL</span>; <span class="comment">//*实参的地址  去间接的修改实参的值  重新初始化NULL</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端释放资源</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cltSocketDestory2</span><span class="params">(<span class="keyword">void</span> **handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCK_HANDLE *tmp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (handle == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp = *handle;</span><br><span class="line"><span class="keyword">if</span> (tmp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(tmp-&gt;p);</span><br><span class="line">tmp-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line">*handle = <span class="literal">NULL</span>; <span class="comment">//*实参的地址  去间接的修改实参的值  重新初始化NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>VS中生成动态库，新建dll工程，编写函数，在每个函数前加__declspec(dllexport)，编译生成dll文件和lib文件，将dll文件和lib文件放入需要使用的工程文件中，包含头文件，在属性设置链接器的宏包含.lib文件就可以使用动态库了；</p></li><li><p>动态库日志功能的集成，在动态库工程中加入日志头文件和实现代码，调用日志函数；</p></li><li><p>检测内存泄漏的工具</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## memwatch：</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 应用环境：</span></span><br><span class="line">Win/Linux</span><br><span class="line"></span><br><span class="line"><span class="section">### 编程语言：</span></span><br><span class="line">C/C++</span><br><span class="line">不建议使用在C++上</span><br><span class="line"></span><br><span class="line"><span class="section">### 使用方法： </span></span><br><span class="line">Win VS:将memwatch.h，memwatch.c加入到项目，代码包含memwatch.h头文件，项目-&gt;属性-&gt;C/C++-&gt;预处理器-&gt;预处理器定义设置添加宏DMEMWATCH和DMW<span class="emphasis">_STDIO</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">Linux:加入memwatch.h，编译时加上-DMEMWATCH -DMW_</span>STDIO及memwatch.c</span><br><span class="line"></span><br><span class="line"><span class="section">### 结果输出：</span></span><br><span class="line">输出文件名称为memwatch.log，在程序执行期间，错误提示都会显示在stdout上</span><br><span class="line"></span><br><span class="line"><span class="section">### 设计思路：</span></span><br><span class="line">将malloc/realloc/calloc/strdup/free等重定义为mwMalloc(sz, <span class="strong">**FILE**</span>, <span class="strong">**LINE**</span>)等，内部维护一个操作链表</span><br><span class="line"></span><br><span class="line"><span class="section">### 优缺点：</span></span><br><span class="line">能检测双重释放（double-free）、错误释放（erroneous free）、内存泄漏（unfreed memory）、溢出(Overflow)、下溢(Underflow)等</span><br><span class="line"></span><br><span class="line"><span class="section">### 如何获取：</span></span><br><span class="line">http://memwatch.sourceforge.net/</span><br><span class="line"></span><br><span class="line"><span class="section">## debug<span class="emphasis">_new</span></span></span><br><span class="line"><span class="section"><span class="emphasis">### 应用环境：</span></span></span><br><span class="line"><span class="section"><span class="emphasis">Linux/Windows</span></span></span><br><span class="line"><span class="section"><span class="emphasis"></span></span></span><br><span class="line"><span class="section"><span class="emphasis">### 编程语言：</span></span></span><br><span class="line"><span class="section"><span class="emphasis">C++</span></span></span><br><span class="line"><span class="section"><span class="emphasis"></span></span></span><br><span class="line"><span class="section"><span class="emphasis">### 使用方法： </span></span></span><br><span class="line"><span class="section"><span class="emphasis">包含头文件debug_</span>new.h，链接debug<span class="emphasis">_new.cpp</span></span></span><br><span class="line"><span class="section"><span class="emphasis"></span></span></span><br><span class="line"><span class="section"><span class="emphasis">### 结果输出：</span></span></span><br><span class="line"><span class="section"><span class="emphasis">控制台console</span></span></span><br><span class="line"><span class="section"><span class="emphasis"></span></span></span><br><span class="line"><span class="section"><span class="emphasis">### 设计思路： </span></span></span><br><span class="line"><span class="section"><span class="emphasis">通过重载new和delete操作符来捕获内存申请/释放请求，并在程序内部维护一个全局静态变量的哈希链表。在new操作符中，不仅仅分配用户所要求的内存，而是在为每次分配的内存都添加一个头部，存储着此次分配的位置信息和链表指针，new返回的是分配的这块内存加上头部偏移后的值，而在之前已经将此返回值作了HASH计算并添加到HASH链表中了。delete的时候先根据要释放的指针地址做HASH计算，然后再遍历数组HASH值处的链表进行查找，如果找到则将该节点移除，未找到就abort。这样在程序结束之后，通过检查此数组中是否还有未释放的内存块来确定是否有内存泄露。</span></span></span><br><span class="line"><span class="section"><span class="emphasis"></span></span></span><br><span class="line"><span class="section"><span class="emphasis">### 优缺点：</span></span></span><br><span class="line"><span class="section"><span class="emphasis">跨平台，仅用于C++程序</span></span></span><br><span class="line"><span class="section"><span class="emphasis"></span></span></span><br><span class="line"><span class="section"><span class="emphasis">### 如何获取：</span></span></span><br><span class="line"><span class="section"><span class="emphasis">http://www.ibm.com/developerworks/cn/linux/l-mleak2/index.html</span></span></span><br></pre></td></tr></table></figure></li><li><p>对于动态库编写和调用，在哪里分配内存就在哪里释放，不然会出现各种各样的问题；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TTL与CMOS电平</title>
      <link href="2017/10/06/TTL%E4%B8%8ECMOS%E7%94%B5%E5%B9%B3/"/>
      <url>2017/10/06/TTL%E4%B8%8ECMOS%E7%94%B5%E5%B9%B3/</url>
      
        <content type="html"><![CDATA[<p>TTL与CMOS电平是集成电路常用的电平，应用时需要根据电平规范进行匹配与转换。</p><h2 id="电平规范"><a class="markdownIt-Anchor" href="#电平规范"></a> 电平规范</h2><p>1、名称解释</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>o</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{oh}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> -&gt; 输出高电平，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>o</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{ol}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> -&gt; 输出低电平；</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>i</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{ih}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> -&gt; 输入高电平，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>i</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{il}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> -&gt; 输入低电平。</p><h2 id="ttl电平"><a class="markdownIt-Anchor" href="#ttl电平"></a> TTL电平</h2><p>TTL集成电路主要由BJT晶体管构成，如STC单片机，电平规范如下：</p><p>输出模式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>o</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{oh}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ≥ 2.4V，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>o</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{ol}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ≤0.4V；</p><p>输入模式:  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>i</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{ih}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ≥ 2.0V，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>i</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{il}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤0.8V；</p><h2 id="cmos电平"><a class="markdownIt-Anchor" href="#cmos电平"></a> CMOS电平</h2><p>CMOS集成电路主要由MOS管构成，如STM32单片机，电平规范如下：</p><p>输出模式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>o</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{oh}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ≈ VCC，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>o</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{ol}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≈GND；</p><p>输入模式: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>i</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{ih}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ≥ 0.7 * VCC，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mrow><mi>i</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{il}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤0.2 * VCC；</p><h2 id="应用说明"><a class="markdownIt-Anchor" href="#应用说明"></a> 应用说明</h2><p>1、3.3V/5V TTL 驱动 3.3V CMOS</p><p>可以直接驱动。</p><p>2、3.3V/5V TTL 驱动 5V CMOS<br />高电平输出大于2.4V，如果落在2.4V至3.5V之间，CMOS电路不能检测到高电平，需要进行电平转换。</p><p>3、3.3V/5V CMOS 驱动 3.3V/5V TTL，可以直接驱动。</p><p>4、3.3V CMOS 驱动 5V CMOS<br />高电平输出3.3V， CMOS电路不能检测到高电平，需要进行电平转换。<br />如果是其它电平，请参考TTL与CMOS电平规范判断是否需要进行电平转换。</p><h2 id="电平转换"><a class="markdownIt-Anchor" href="#电平转换"></a> 电平转换</h2><p>利用TTL晶体管的OC门与上拉电阻实现电平转换。</p><p>OC门：BJT晶体管的集电极开漏输出。</p><ol><li><p>3.3V to 5V</p><p><a href="https://imgtu.com/i/63ypyq"><img src="https://s3.ax1x.com/2021/03/09/63ypyq.jpg" alt="63ypyq.jpg" /></a></p><p>说明：R1与Q1组成OC门，配合R2上拉至5V，实现电平转换。Tx输出0V，Q1导通，Rx端为0.3V左右；Tx输出3.3V，Q1截止，RX端为5V，完成电平转换功能。</p></li><li><p>5V to 3.3V</p><p><a href="https://imgtu.com/i/63yEY4"><img src="https://s3.ax1x.com/2021/03/09/63yEY4.jpg" alt="63yEY4.jpg" /></a></p><p>说明：R3与Q2组成OC门，配合R5上拉至3.3V，实现电平转换。Tx输出0V，Q2导通，Rx端为0.3V左右；Tx输出5V，Q2截止，RX端为3.3V，完成电平转换功能。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电子技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子 </tag>
            
            <tag> TTL </tag>
            
            <tag> CMOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二极管分类及应用</title>
      <link href="2017/10/06/%E4%BA%8C%E6%9E%81%E7%AE%A1%E5%88%86%E7%B1%BB%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>2017/10/06/%E4%BA%8C%E6%9E%81%E7%AE%A1%E5%88%86%E7%B1%BB%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="常用二极管种类"><a class="markdownIt-Anchor" href="#常用二极管种类"></a> 常用二极管种类</h2><p>常规设计中，用的比较多的二极管有普通二极管、肖特基二极管、稳压管与TVS管；此外，还有快恢复二极管、超快恢复二极管、发光二极管、红外二极管等。</p><h2 id="普通二极管"><a class="markdownIt-Anchor" href="#普通二极管"></a> 普通二极管</h2><p>特点:单向导通；</p><p>优点:反向漏电流超低，反向击穿电压较高，价格便宜；</p><p>缺点:正向压降较大；</p><p>应用:以BAS316为例，正向压降为0.855V/10mA;反向漏电流为30nA/25V，反向击穿电压为85V。如下图:应用于DCDC降压芯片MP2451的外部自举二极管，在占空比超过80%时，提高转换器的效率。</p><h2 id="肖特基二极管"><a class="markdownIt-Anchor" href="#肖特基二极管"></a> 肖特基二极管</h2><p>特点:单向导通；</p><p>优点:正向压降较低，反向恢复时间较快；</p><p>缺点:反向漏电流较大，反向击穿电压较低</p><p>应用:以DSK14为例，正向压降0.1V至0.55V(电流越大，正向压降越大)，反向击穿电压40V，0.5mA/25℃(温度越高，漏电流越大)。如下图:应用于DCDC降压芯片MP2451的功率环路的续流二极管(要求压降小、开关速度快、反向击穿电压大于电源输入电压)。</p><h2 id="稳压管"><a class="markdownIt-Anchor" href="#稳压管"></a> 稳压管</h2><p>特点:反向击穿稳压；</p><p>优点:体积小，价格便宜；</p><p>缺点:带载能力弱，通常需要电阻限流；</p><p>应用:以LM3Z7V5T1G为例，稳压值为5.1V，最大功率200mW，说明负载动态电流不能超过40mA，不适合用于输入电压变化大或负载电流变化大的场合。</p><h2 id="tvs管"><a class="markdownIt-Anchor" href="#tvs管"></a> TVS管</h2><p>特点:TVS是瞬态二极管，一种高效能保护器件，在输入电压超过TVS管的击穿电压时，提供低阻抗回路，主要应用于浪涌保护、静电防护等；</p><p>分类:功率型，主要应用于电源输入端，功率较大，允许通过较大的瞬间电流；信号型，主要应用于接口部分，电压高但功率低，比如静电。此外，还分单向TVS与双向TVS，应用于需要合理选择。</p><p>注意事项:对于功率型TVS管，如果瞬时输入电压过高，导通时间过长，将导致TVS管烧毁。 针对瞬时输入电压过高问题，比如雷击，前面需要再增加些防护，比如防雷器件、气体放电管等；针对导通时间过长问题，加大TVS管的封装，延长TVS管的允许导通时间；应用于电源输入，抗浪涌。</p>]]></content>
      
      
      <categories>
          
          <category> 电子技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子 </tag>
            
            <tag> 二极管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电阻电容电感选型</title>
      <link href="2017/10/04/%E7%94%B5%E9%98%BB%E7%94%B5%E5%AE%B9%E7%94%B5%E6%84%9F%E9%80%89%E5%9E%8B/"/>
      <url>2017/10/04/%E7%94%B5%E9%98%BB%E7%94%B5%E5%AE%B9%E7%94%B5%E6%84%9F%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="电阻"><a class="markdownIt-Anchor" href="#电阻"></a> 电阻</h2><h3 id="选型依据"><a class="markdownIt-Anchor" href="#选型依据"></a> 选型依据</h3><ol><li>阻值:电阻值;</li><li>封装:常用封装0201,0402,0603,0805,1206,1812等；</li><li>功耗:1/16W,1/10W,1/8W,1/4W,1/2W,1W,2W,3W等；</li><li>精度:1%，5%等。</li></ol><h3 id="选型方法"><a class="markdownIt-Anchor" href="#选型方法"></a> 选型方法</h3><ol><li>优先考虑阻值，对于不常见的阻值，可以通过电阻的串联与并联代替；</li><li>计算功耗: P = I²R 或 U²/R， 根据功耗，合理选择封装，一般0402的最大功耗为1/16W,0603的最大功耗为1/10W,0805的最大功耗为1/8W,具体看电阻的选型手册。</li><li>考虑精度：作为反馈环路、分压的电阻，一般选择精度为1%的，其它的，选择精度为5%的即可；</li><li>考虑成本:精度1%的比精度5%的贵，封装不同，价格也有些差异，常用的封装，价格稍微便宜些；</li><li>考虑PCB尺寸：板子越小，封装尽量用小点的，比如手机一般用0201，迷你型产品，0402用的多， 一般的产品，0603居多；</li><li>考虑加工:尺寸越大，对加工工艺要求越低。0603与0402一般加工厂可以生产，这个主要跟加工厂的机器相关；</li><li>考虑维修：尺寸越小，焊接难度越大。</li></ol><h2 id="电容"><a class="markdownIt-Anchor" href="#电容"></a> 电容</h2><h3 id="选型依据-2"><a class="markdownIt-Anchor" href="#选型依据-2"></a> 选型依据</h3><ol><li>容值:电容值;</li><li>电容类型:陶瓷电容，铝电解电容，钽电解电容等；</li><li>寄生参数:ESR，影响滤波效果；</li><li>封装:插件封装，贴片封装；</li><li>价格:影响产品成本；</li><li>尺寸:影响结构；</li><li>精度:陶瓷电容受温度影响较大，电解电容变化小些。</li></ol><h3 id="选型方法-2"><a class="markdownIt-Anchor" href="#选型方法-2"></a> 选型方法</h3><ol><li>优先考虑容值。电容是储能器件，容值越大，瞬间可以提供更多的能量。负载瞬间电流越大，容值选择越大，如果容值偏小，瞬间无法提供足够大的电流，电压将被下拉，产生纹波，影响其它电路。另外，由于寄生参数的存在，存在频率响应，电容不是越大越好，合适最佳。 比如集成电路内部主要是开关电路，频率较高，一般选用0.1uF的；</li><li>容值确定后，选择电容的类型。 一般小于10uF的，优先选择陶瓷电容，超过10uF，小于几百uF的，可以选择铝电解与钽电解电容， 超过几百uF的，一般选择铝电解电容；</li><li>再选择封装，封装选择需要考虑耐压、寿命、结构、加工、成本等，比如铝电解电容，插件的比较便宜，贴片的好加工；</li><li>耐压方面，陶瓷电容耐压较好，钽电解电容耐压较差，钽电解电容的耐压值最好大于电路电压的2倍左右；</li><li>寿命方面，铝电解电容较差，内部电解质受温度影响较大，设计时，不要靠近热源；</li><li>其它方面，钽电解电容价格较高，但封装小，滤波效果好；铝电解电容价格便宜，滤波效果稍差，一般与陶瓷电容并联，减小ESR，提升滤波效果。</li></ol><h2 id="电感"><a class="markdownIt-Anchor" href="#电感"></a> 电感</h2><h3 id="选型依据-3"><a class="markdownIt-Anchor" href="#选型依据-3"></a> 选型依据</h3><ol><li><p>感值:电感值;</p></li><li><p>电感类型:功率电感，普通电感，共模电感等；</p></li><li><p>电感参数；DCR，饱和电流，温升电流；</p></li><li><p>封装:插件封装，贴片封装(常用)；</p></li><li><p>尺寸:影响结构。</p></li></ol><h3 id="选型方法-3"><a class="markdownIt-Anchor" href="#选型方法-3"></a> 选型方法</h3><ol><li>优先选择电感类型:信号滤波，一般选用0603,0402等常用的贴片封装；功率电路，一般选择功率电感，功率电感屏蔽型的EMC效果更好，但价格稍贵；</li><li>选择感值。滤波使用的，根据信号频率计算；功率电感，一般根据电源IC手册推荐的即可，影响纹波，负载动态响应等；</li><li>根据DCR，饱和电流，温升电流选择合适的尺寸，一般来说，尺寸越大，参数越好，但是价格越贵，同时，结构也会受到限制；</li><li>DCR越小越好，根据功率的I²R，DCR越大，发热越大，电源功率转换效率越低；</li><li>饱和电流必须大于电感流过的最大电流，如果电感饱和了，感值将急剧减小，失去储能的作用，相当于一根导线，损坏电路；</li><li>温升电流越大越好，发热越小。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 电子技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32基础（基于正点原子探索者开发板库函数）</title>
      <link href="2017/09/20/stm32%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9F%BA%E4%BA%8E%E6%AD%A3%E7%82%B9%E5%8E%9F%E5%AD%90%E6%8E%A2%E7%B4%A2%E8%80%85%E5%BC%80%E5%8F%91%E6%9D%BF%E5%BA%93%E5%87%BD%E6%95%B0%EF%BC%89/"/>
      <url>2017/09/20/stm32%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9F%BA%E4%BA%8E%E6%AD%A3%E7%82%B9%E5%8E%9F%E5%AD%90%E6%8E%A2%E7%B4%A2%E8%80%85%E5%BC%80%E5%8F%91%E6%9D%BF%E5%BA%93%E5%87%BD%E6%95%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>STM32基础，基于正点原子探索者开发板，必须掌握的部分写在前面，入门之后再扩充其他内容，所以顺序并不完全按照正点原子教程的顺序，去除一些个人认为暂时不需要重点掌握的内容，加上一些比较重要的东西。学习方法：重点章节教程视频过一遍，可以有很多疑问先直接跳过，然后看下面总结好的东西，实验自己写一边，再把视频1.5倍速过一遍，查漏补缺，之后再深入，以项目主导学习，缺什么补什么，切忌陷入太多细节问题，切忌太过追求全面。</p><h2 id="开发板资源"><a class="markdownIt-Anchor" href="#开发板资源"></a> 开发板资源</h2><p>先了解开发板有哪些资源，可直接跳过，以后学习用到了哪些资源再回头来看；</p><p><strong>开发板资源图</strong></p><p><a href="https://imgchr.com/i/r1JFl4"><img src="https://s3.ax1x.com/2020/12/16/r1JFl4.jpg" alt="r1JFl4.jpg" /></a></p><p><strong>开发板资源列表</strong></p><ul><li>CPU STM32F407ZGT6 LQFP144 FLASH 1024K SRAM 192K</li><li>外扩 SRAM XM8A51216 1M字节</li><li>外扩 SPI FLASH W25Q128 16M字节</li><li>1个电源指示灯（蓝色）</li><li>2个状态指示灯（ DS0：红色 DS1：绿色</li><li>1个红外接收头，并配备一款小巧的红外遥控器</li><li>1个 EEPROM芯片， ，24C02，容量 256字节</li><li>1个六轴（陀螺仪 +加速度）传感器芯片， MPU6050</li><li>1个高性能音频编解码芯片， WM8978</li><li>1个 2.4G无线模块接口，支持 NRF24L01无线模块</li><li>1路 CAN接口，采用 TJA1050芯片</li><li>1路 485接口，采用 SP3485芯片</li><li>2路 RS232串口（一公一母）接口，采用 SP3232芯片</li><li>1路单总线接口，支持 DS18B20/DHT11等单总线传感器</li><li>1个 ATK模块接口，支持 ALIENTEK蓝牙 /GPS模块</li><li>1个光敏传感器</li><li>1个标准的 2.4/2.8/3.5/4.3/7寸 LCD接口，支持电阻 /电容触摸屏</li><li>1个摄像头模块接口</li><li>1个 OLED模块接口</li><li>1个 USB串口，可用于程序下载和代码调试（ USMART调试）</li><li>1个 USB SLAVE接口，用于 USB从机通信</li><li>1个 USB HOST(OTG)接口，用于 USB主机通信</li><li>1个有源蜂鸣器</li><li>1个 RS232/RS485选择接口</li><li>1个 RS232/模块选择接口</li><li>1个 CAN/USB选择接口</li><li>1个串口选择接口</li><li>1个 SD卡接口（在板子背面）</li><li>1个百兆以太网接口（ RJ45</li><li>1个标准的 JTAG/SWD调试下载口</li><li>1个录音头（ MIC/咪头）</li><li>1路立体声音频输出接口</li><li>1路立体声录音输入接口</li><li>1路扬声器输出接口，可接 1W左右小喇叭</li><li>1组多功能端口（ DAC/ADC/PWM DAC/AUDIO IN/TPAD</li><li>1组 5V电源供应 /接入口</li><li>1组 3.3V电源供应 /接入口</li><li>1个参考电压设置接口</li><li>1个直流电源输入接口（输入电压范围： DC6~16V</li><li>1个启动模式选择配置接口</li><li>1个 RTC后备电池座，并带电池</li><li>1个复位按钮，可用于复位 MCU和 LCD</li><li>4个功能按钮，其中 KEY_UP(即 WK_UP)兼具唤醒功能</li><li>1个电容触摸按键</li><li>1个电源开关，控制整个板的电源</li><li>一键下载功能</li><li>除晶振占用的 IO口外，其余所有 IO口全部引出</li></ul><h2 id="一些常识"><a class="markdownIt-Anchor" href="#一些常识"></a> 一些常识</h2><p><strong>stm32的命名规则：</strong></p><p><a href="https://imgchr.com/i/r3iN6g"><img src="https://s3.ax1x.com/2020/12/17/r3iN6g.png" alt="r3iN6g.png" /></a></p><p><strong>RAM：</strong> 随机存储器，可读可写，特点是掉电会丢失数据。RAM又分为SRAM(Static RAM)和DRAM(Dynamic RAM)，SRAM是读写速度非常快的存储设备，但价格昂贵。DRAM比ROM速度快，但是比SRAM速度慢，价格低于SRAM，计算机内存使用的就是DRAM；</p><p><strong>FLASH：</strong> 闪存，这种存储器结合了ROM和RAM的优点，既可以保证掉电不丢失又可以有很高的读写速度。可以用来存储一些用户不希望掉电丢失的一些数据；</p><p>在以往，单片机内部包含ROM和RAM，ROM的硬件实现主要EEPROM，但近年来Flash逐渐取代了他的位置，成为ROM实现的主要硬件。例如，51单片机有4KB的ROM和256B的RAM，这里的ROM实现为EEPROM，而STM31F103有64KB的Flash和20K的SRAM，这里Flash的一部分作为ROM来使用；</p><p><strong>stm32常用的开发工具：</strong> MDK(keil)，IAR，STM32CubeMX；</p><h2 id="程序下载"><a class="markdownIt-Anchor" href="#程序下载"></a> 程序下载</h2><p><strong>ISP串口下载：</strong> 速度太慢，一般使用J-LINK下载；</p><p>STM32的ISP下载，只能使用串口1，也就是对应串口发送接收引脚PA9,PA10。不能使用其他串口（例如串口2：PA2,PA3)用来ISP下载；</p><p><strong>J-LINK下载：</strong> 一般使用SWD模式，只需要两根线就可以下载和调试，编译好程序后点击LOAD下载程序到开发板但需要提前配置好下载环境，MDK配置，在Debug选项卡选择J-LINK/J-TAG Cortex，再点setting，选择SW，还要在下载选项卡设置添加对应的设备，两项设置好了才能下载，不然会报错无法下载；</p><p>一般来说下好程序后，重启芯片时，<strong>SYSCLK的第4个上升沿，BOOT引脚的值将被锁存</strong>，用户可以通过设置BOOT1和BOOT0引脚的状态，来选择在复位后的启动模式。</p><p>STM32上电或者复位后，代码区始终从0x00000000开始，三种启动模式其实就是将各自存储空间的地址映射到0x00000000中：</p><ol><li>从Flash启动，将主Flash地址0x08000000映射到0x00000000，这样代码启动之后就相当于从0x08000000开始；</li><li>从RAM启动，将RAM地址0x20000000映射到0x00000000,这样代码启动之后就相当于从0x20000000开始；</li><li>从系统存储器启动。首先控制BOOT0 BOOT1管脚，复位后，STM32与上述两种方式类似，从系统存储器地址0x1FFF F000开始执行代码，系统存储器存储的其实就是STM32自带的bootloader代码，在bootloader中提供了UART1的接口，通过此接口可以将用户所需的程序代码下载到主Flash中，下载完毕后，此时程序代码已经存储在主Flash当中，这时切换启动模式（从主Flash启动），复位后所执行的就是刚刚下载到Flash中的代码了；</li></ol><p>STM32三种启动模式对应的存储介质均是芯片内置的，如下图：</p><p><a href="https://imgchr.com/i/r36m8J"><img src="https://s3.ax1x.com/2020/12/17/r36m8J.png" alt="r36m8J.png" /></a></p><ol><li>用户闪存 ： 芯片内置的Flash，正常的工作模式。</li><li>SRAM： 芯片内置的RAM区，就是内存，可以用于调试。</li><li>系统存储器： 芯片内部一块特定的区域，芯片出厂时在这个区域预置了一段Bootloader，就是通常说的ISP程序，这个区域的内容在芯片出厂后没有人能够修改或擦除，即它是一个ROM区。启动的程序功能由厂家设置。</li></ol><p><strong>Main Flash memory:</strong> 是STM32内置的Flash，一般我们使用JTAG或者SWD模式下载程序时，就是下载到这个里面，重启后也直接从这启动程序。</p><p><strong>System memory:</strong> 从系统存储器启动，这种模式启动的程序功能是由厂家设置的。一般来说，这种启动方式用的比较少。<br />系统存储器是芯片内部一块特定的区域，STM32在出厂时，由ST在这个区域内部预置了一段BootLoader，也就是我们常说的ISP程序，这是一块ROM，出厂后无法修改。</p><p>一般来说，我们选用这种启动模式时，是为了从串口下载程序，因为在厂家提供的BootLoader中，提供了串口下载程序的固件，可以通过这个BootLoader将程序下载到系统的Flash中。但是这个下载方式需要以下步骤：</p><p>Step1:将BOOT0设置为1，BOOT1设置为0，然后按下复位键，这样才能从系统存储器启动BootLoader；</p><p>Step2:最后在BootLoader的帮助下，通过串口下载程序到Flash中；</p><p>Step3:程序下载完成后，又有需要将BOOT0设置为GND，手动复位，这样，STM32才可以从Flash中启动，可以看到，利用串口下载程序还是比较的麻烦，需要跳帽跳来跳去的，非常的不注重用户体验，所以主流的开发板都设计了一键下载电路，方便用户下载程序；</p><p><strong>Embedded Memory:</strong></p><p>内置SRAM，既然是SRAM，自然也就没有程序存储的能力了，这个模式一般用于程序调试，</p><p>假如我只修改了代码中一个小小的地方，然后就需要重新擦除整个Flash，比较的费时，可以考虑从这个模式启动代码（也就是STM32的内存中），用于快速的程序调试，等程序调试完成后，在将程序下载到Flash中；</p><p><strong>开发BOOT模式选择：</strong></p><ol><li>通常使用程序代码存储在主闪存存储器，配置方式：BOOT0=0，BOOT1=X;两个启动引脚通过10K电阻接地；</li></ol><p><a href="https://imgchr.com/i/r3gu0x"><img src="https://s3.ax1x.com/2020/12/17/r3gu0x.png" alt="r3gu0x.png" /></a></p><ol start="2"><li>Flash锁死解决办法：开发调试过程中，由于某种原因导致内部Flash锁死，无法连接SWD以及Jtag调试，无法读到设备，可以通过修改BOOT模式重新刷写代码，修改为BOOT0=1，BOOT1=0即可从系统存储器启动，ST出厂时自带Bootloader程序，SWD以及JTAG调试接口都是专用的。重新烧写程序后，可将BOOT模式重新更换到BOOT0=0，BOOT1=X即可正常使用；</li></ol><p>嵌入式系统的启动还需要一段启动代码（bootloader)，类似于启动PC时的BIOS，一般用于完成微控制器的初始化工作和自检，STM32的启动代码在startup_stm32f40x_xx.s（xx根据微控制器所带的大、中、小容量存储器分别为hd、md、ld）中，其中的程序功能主要包括<strong>初始化堆栈、定义程序启动地址、中断向量表和中断服务程序入口地址，以及系统复位启动时，从启动代码跳转到用户main函数的入口地址</strong> ，在后面的启动文件介绍中会有更详细描述；</p><p>USB接口，相应电平逻辑遵照USB原则，而单片机上的串行通信通过单片机的RXD、TXD、VCC、GND四个引脚，相应电平逻辑遵照TTL原则，如果要通过USB和单片机串口进行通信，需要转成一样的原则，一种方法是USB转TTL，一种是，TTL转USB，开发板使用的是通过CH340G将USB转TTL，与单片机进行通信；</p><p><strong>一键下载电路：</strong></p><p><a href="https://imgchr.com/i/rh2UNF"><img src="https://s3.ax1x.com/2020/12/26/rh2UNF.png" alt="rh2UNF.png" /></a></p><p>通过上位机控制BOOT电平，从而实现一键下载，下载时设置DTR的低电平复位，RTS高电平进BootLoader，但是这个上位机是按232标准编写的，与USB标准是相反的，所以实际是DTR的高电平复位，RTS低电平进BootLoader，要分析这个电路，需要对照复位电路和单片机上的RESET连接</p><p><a href="https://imgchr.com/i/so3xBV"><img src="https://s3.ax1x.com/2021/01/22/so3xBV.jpg" alt="so3xBV.jpg" /></a></p><p>当下载程序时，DTR输出高电平，RTS输出低电平，Q2，Q3，D7导通，RESET和RST是连接上的，即为低电平复位，BOOT0被上拉至高电平，下载完程序后，DTR输出低电平，RTS输出高电平，Q2，Q3，D7截止，RESET被上拉至高电平，Q3截止所以BOOT0为低电平，恢复正常运行模式</p><h2 id="工程模板"><a class="markdownIt-Anchor" href="#工程模板"></a> 工程模板</h2><p>实验0即是模板，复制过来用就行，怎么用：改主函数和HARDWARE文件夹里的内容，自己写的头文件添加到宏，不需要的宏删除，后面看实验教程看都看会了，不需要特意学视频教程中的工程模板创建；</p><h2 id="gpio原理"><a class="markdownIt-Anchor" href="#gpio原理"></a> GPIO原理</h2><p><strong>GPIO基本结构：</strong></p><p><a href="https://imgchr.com/i/r1d1c8"><img src="https://s3.ax1x.com/2020/12/16/r1d1c8.png" alt="r1d1c8.png" /></a></p><p><strong>四种输入模式：</strong></p><ul><li><p>输入浮空</p><p><a href="https://imgchr.com/i/r1y2LV"><img src="https://s3.ax1x.com/2020/12/16/r1y2LV.jpg" alt="r1y2LV.jpg" /></a></p><p>I/O端口的电平信号直接进入输入数据寄存器。MCU直接读取I/O口电平，I/O的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的， (接用电压表测量其引脚电压为1点几伏，这是个不确定值) 以用来做KEY识别</p></li><li><p>输入上拉</p><p><a href="https://imgchr.com/i/r1y0Ig"><img src="https://s3.ax1x.com/2020/12/16/r1y0Ig.jpg" alt="r1y0Ig.jpg" /></a></p><p>IO内部接上拉电阻，此时如果IO口外部没有信号输入或者引脚悬空，IO口默认为高电平  如果I/O口输入低电平，那么引脚就为低电平，MCU读取到的就是低电平</p></li><li><p>输入下拉</p><p><a href="https://imgchr.com/i/r1yHQ1"><img src="https://s3.ax1x.com/2020/12/16/r1yHQ1.jpg" alt="r1yHQ1.jpg" /></a></p><p>IO内部接下拉电阻，此时如果IO口外部没有信号输入或者引脚悬空，IO口默认为低电平  如果I/O口输入高电平，那么引脚就为高电平，MCU读取到的就是高电平</p></li><li><p>模拟输入</p><p><a href="https://imgchr.com/i/r1yzJH"><img src="https://s3.ax1x.com/2020/12/16/r1yzJH.jpg" alt="r1yzJH.jpg" /></a></p><p>当GPIO引脚用于ADC采集电压的输入通道时，用作&quot;模拟输入&quot;功能，此时信号不经过施密特触发器，直接直接进入ADC模块，并且输入数据寄存器为空 ，CPU不能在输入数据寄存器上读到引脚状态</p><p>当GPIO用于模拟功能时，引脚的上、下拉电阻是不起作用的，这个时候即使配置了上拉或下拉模式，也不会影响到模拟信号的输入输出</p></li></ul><p>除了 ADC 和 DAC 要将 IO 配置为模拟通道之外其他外设功能一律 要配置为复用功能模式</p><p><strong>四种输出模式：</strong></p><ul><li><p>开漏输出(带上拉或者下拉)</p><p><a href="https://imgchr.com/i/r14zY6"><img src="https://s3.ax1x.com/2020/12/16/r14zY6.jpg" alt="r14zY6.jpg" /></a></p><p>在开漏输出模式时，只有N-MOS管工作，如果我们控制输出为0，低电平，则P-MOS管关闭，N-MOS管导通，使输出低电平，I/O端口的电平就是低电平，若控制输出为1时，高电平，则P-MOS管和N-MOS管都关闭，输出指令就不会起到作用，此时I/O端口的电平就不会由输出的高电平决定，而是由I/O端口外部的上拉或者下拉决定   如果没有上拉或者下拉 IO口就处于悬空状态</p><p>并且此时施密特触发器是打开的，即输入可用，通过输入数据寄存器GPIOx_IDR可读取I/O的实际状态。，I/O口的电平不一定是输出的电平</p></li><li><p>开漏复用功能(带上拉或者下拉)</p><p><a href="https://imgchr.com/i/r15up8"><img src="https://s3.ax1x.com/2020/12/16/r15up8.jpg" alt="r15up8.jpg" /></a></p><p>GPIO复用为其他外设，输出数据寄存器GPIOx_ODR无效； 输出的高低电平的来源于其它外设，施密特触发器打开，输入可用，通过输入数据寄存器可获取I/O实际状态  除了输出信号的来源改变 其他与开漏输出功能相同</p></li><li><p>推挽式输出(带上拉或者下拉)</p><p><a href="https://imgchr.com/i/r15iOH"><img src="https://s3.ax1x.com/2020/12/16/r15iOH.jpg" alt="r15iOH.jpg" /></a></p><p>在推挽输出模式时，N-MOS管和P-MOS管都工作，如果我们控制输出为0，低电平，则P-MOS管关闭，N-MOS管导通，使输出低电平，I/O端口的电平就是低电平，若控制输出为1 高电平，则P-MOS管导通N-MOS管关闭，使输出高电平，I/O端口的电平就是高电平， 外部上拉和下拉的作用是控制在没有输出时IO口电平</p><p>此时施密特触发器是打开的，即输入可用，通过输入数据寄存器GPIOx_IDR可读取I/O的实际状态。I/O口的电平一定是输出的电平</p></li><li><p>推挽式复用功能(带上拉或者下拉)</p><p><a href="https://imgchr.com/i/r15Jkq"><img src="https://s3.ax1x.com/2020/12/16/r15Jkq.jpg" alt="r15Jkq.jpg" /></a></p><p>GPIO复用为其他外设(如 I2C)，输出数据寄存器GPIOx_ODR无效； 输出的高低电平的来源于其它外设，施密特触发器打开，输入可用，通过输入数据寄存器可获取I/O实际状态  除了输出信号的来源改变 其他与开漏输出功能相同</p></li></ul><p><strong>开漏输出和推挽输出的区别：</strong></p><ul><li><p>推挽输出：可以输出强高低电平，连接数字器件</p><p>推挽结构一般是指两个MOS管分别受两互补信号的控制,总是在一个管导通的时候另一个截止.</p></li><li><p>开漏输出：可以输出强低电平，高电平得靠外部电阻拉高。</p><p>输出端相当于MOS管漏极. 需要外接上拉电阻，才能实现输出高电平  合于做电流型的驱动，其吸收电流的能力相对强(一般20ma以内)，在使用开漏模式时，都需要接上拉电阻，否则只能输出低电平；</p></li></ul><p>STM32F4的大部分端口都具有复用功能，所谓复用，就是一些端口不仅仅可以做为通用IO口，还可以复用为一些外设引脚，比如PA9,PA10可以复用为STM32F4的串口1引脚，作用：最大限度的利用端口资源</p><p>所有IO口都可以作为中断输入；</p><h2 id="跑马灯实验"><a class="markdownIt-Anchor" href="#跑马灯实验"></a> 跑马灯实验</h2><p><strong>硬件连接：</strong></p><p><a href="https://imgchr.com/i/r1v9pj"><img src="https://s3.ax1x.com/2020/12/16/r1v9pj.png" alt="r1v9pj.png" /></a></p><p><strong>共阳极连接</strong>，所以输出为低电平时，LED灯亮，输出高电平时，LED灯灭</p><p><strong>一些常用的GPIO库函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1个初始化函数：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Init</span><span class="params">(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2个读取输入电平函数：</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">GPIO_ReadInputDataBit</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin)</span></span>;<span class="comment">//用于读取一个或几个IO口的输入状态</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">GPIO_ReadInputData</span><span class="params">(GPIO_TypeDef* GPIOx)</span></span>;<span class="comment">//用于读取一组IO口的输入状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2个读取输出电平函数：</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">GPIO_ReadOutputDataBit</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin)</span></span>;<span class="comment">//用于读取一个或几个IO口的输出状态</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">GPIO_ReadOutputData</span><span class="params">(GPIO_TypeDef* GPIOx)</span></span>;<span class="comment">//用于读取一组IO口的输出状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4个设置输出电平函数：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_SetBits</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin)</span></span>;<span class="comment">//用于设置一个或者多个IO口为高电平</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_ResetBits</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin)</span></span>;<span class="comment">//用于设置一个或者多个IO口为低电平</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_WriteBit</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin, BitAction BitVal)</span></span>;<span class="comment">//用于设置一个或者多个IO口为高电平或者低电平</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Write</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> PortVal)</span></span>;<span class="comment">//用于设置一组IO口为高电平或低电平</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>跑马灯实验代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//led.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LED_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _LED_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f4xx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_init(<span class="number">168</span>);</span><br><span class="line">LED_Init();</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_SetBits(GPIOF,GPIO_Pin_9);<span class="comment">//set置1，reset置0</span></span><br><span class="line">GPIO_ResetBits(GPIOF,GPIO_Pin_10);</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">GPIO_ResetBits(GPIOF,GPIO_Pin_9);</span><br><span class="line">GPIO_SetBits(GPIOF,GPIO_Pin_10);</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//位带操作</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        PFout(9)=0;</span></span><br><span class="line"><span class="comment">PFout(10)=1;</span></span><br><span class="line"><span class="comment">delay_ms(500);</span></span><br><span class="line"><span class="comment">PFout(9)=1;</span></span><br><span class="line"><span class="comment">PFout(10)=0;</span></span><br><span class="line"><span class="comment">delay_ms(500);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LED.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f4xx.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*GPIO_InitTypeDef GPIO_Init_Structure;</span></span><br><span class="line"><span class="comment">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF,ENABLE);</span></span><br><span class="line"><span class="comment">//F9</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_Mode=GPIO_Mode_OUT;</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_OType=GPIO_OType_PP;</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_Pin=GPIO_Pin_9;</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_PuPd=GPIO_PuPd_DOWN;</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_Speed=GPIO_Fast_Speed;</span></span><br><span class="line"><span class="comment">GPIO_Init(GPIOF,&amp;GPIO_Init_Structure);</span></span><br><span class="line"><span class="comment">GPIO_SetBits(GPIOF,GPIO_Pin_9);</span></span><br><span class="line"><span class="comment">//F10</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_Mode=GPIO_Mode_OUT;</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_OType=GPIO_OType_PP;</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_Pin=GPIO_Pin_10;</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_PuPd=GPIO_PuPd_DOWN;</span></span><br><span class="line"><span class="comment">GPIO_Init_Structure.GPIO_Speed=GPIO_Fast_Speed;</span></span><br><span class="line"><span class="comment">GPIO_Init(GPIOF,&amp;GPIO_Init_Structure);</span></span><br><span class="line"><span class="comment">GPIO_setBits(GPIOF,GPIO_Pin_10);*/</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_Init_Structure;<span class="comment">//定义一个GPIO_InitTypeDef类型的结构体变量</span></span><br><span class="line">    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF,ENABLE);<span class="comment">//使能GPIOF时钟</span></span><br><span class="line">GPIO_Init_Structure.GPIO_Mode=GPIO_Mode_OUT;<span class="comment">//设置输出模式</span></span><br><span class="line">GPIO_Init_Structure.GPIO_OType=GPIO_OType_PP;<span class="comment">//设置推挽模式</span></span><br><span class="line">GPIO_Init_Structure.GPIO_Pin=GPIO_Pin_9|GPIO_Pin_10;<span class="comment">//设置9和10引脚</span></span><br><span class="line">GPIO_Init_Structure.GPIO_PuPd=GPIO_PuPd_UP;<span class="comment">//设置上拉模式</span></span><br><span class="line">GPIO_Init_Structure.GPIO_Speed=GPIO_Fast_Speed;<span class="comment">//设置传输速度</span></span><br><span class="line">GPIO_Init(GPIOF,&amp;GPIO_Init_Structure);<span class="comment">//按照设置初始化</span></span><br><span class="line">GPIO_SetBits(GPIOF,GPIO_Pin_9|GPIO_Pin_10);<span class="comment">//设置9和10引脚输出高电平</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="蜂鸣器实验"><a class="markdownIt-Anchor" href="#蜂鸣器实验"></a> 蜂鸣器实验</h2><p><strong>硬件连接：</strong></p><p><a href="https://imgchr.com/i/r3i6pT"><img src="https://s3.ax1x.com/2020/12/17/r3i6pT.png" alt="r3i6pT.png" /></a></p><p>输出为高电平时，蜂鸣器响</p><p><strong>蜂鸣器实验代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//beep.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _BEEP_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _BEEP_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BEEP_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f4xx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BEEP.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BEEP_Init();</span><br><span class="line">delay_init(<span class="number">168</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PFout(<span class="number">8</span>)=<span class="number">0</span>;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">PFout(<span class="number">8</span>)=<span class="number">1</span>;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//beep.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BEEP.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BEEP_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_Init_Structure;<span class="comment">//定义一个GPIO_InitTypeDef类型的结构体变量</span></span><br><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF,ENABLE);<span class="comment">//使能GPIOF时钟</span></span><br><span class="line">GPIO_Init_Structure.GPIO_Mode=GPIO_Mode_OUT;<span class="comment">//设置输出模式</span></span><br><span class="line">GPIO_Init_Structure.GPIO_OType=GPIO_OType_PP;<span class="comment">//设置推挽模式</span></span><br><span class="line">GPIO_Init_Structure.GPIO_Pin=GPIO_Pin_8;<span class="comment">//设置8引脚</span></span><br><span class="line">GPIO_Init_Structure.GPIO_PuPd=GPIO_PuPd_DOWN;<span class="comment">//设置下拉</span></span><br><span class="line">GPIO_Init_Structure.GPIO_Speed=GPIO_Fast_Speed;<span class="comment">//设置传输速度</span></span><br><span class="line">GPIO_Init(GPIOF,&amp;GPIO_Init_Structure);<span class="comment">//按照设置初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按键输入实验"><a class="markdownIt-Anchor" href="#按键输入实验"></a> 按键输入实验</h2><p><strong>硬件连接：</strong></p><p><a href="https://imgchr.com/i/rGejs0"><img src="https://s3.ax1x.com/2020/12/17/rGejs0.png" alt="rGejs0.png" /></a></p><p>实现<strong>支持连续按和不支持连续按两种模式切换</strong> ，当mode=0时，不支持连续按，伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(u8 mode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> u8 key_up=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(mode==<span class="number">1</span>) key_up=<span class="number">1</span>;<span class="comment">//支持连续按</span></span><br><span class="line">      <span class="keyword">if</span>（key_up &amp;&amp;  KEY按下）</span><br><span class="line">      &#123;</span><br><span class="line">        delay_ms(<span class="number">10</span>);<span class="comment">//延时，防抖</span></span><br><span class="line">        key_up=<span class="number">0</span>;<span class="comment">//标记这次key已经按下</span></span><br><span class="line">        <span class="keyword">if</span>(KEY确实按下)</span><br><span class="line">          &#123;</span><br><span class="line">           <span class="keyword">return</span> KEY_VALUE;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(KEY没有按下)  key_up=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> 没有按下</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>按键输入实验代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//led.h beep.h led.c beep.c和跑马灯和蜂鸣器实验一样</span></span><br><span class="line"><span class="comment">//key.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span>_KEY_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _KEY_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_0 GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_1 GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_2 GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WK_UP GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(u8 mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;beep.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 keyvalue;</span><br><span class="line">delay_init(<span class="number">168</span>);</span><br><span class="line">LED_Init();</span><br><span class="line">BEEP_Init();</span><br><span class="line">KEY_Init();</span><br><span class="line">PFout(<span class="number">9</span>)=<span class="number">1</span>;</span><br><span class="line">PFout(<span class="number">10</span>)=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">keyvalue=KEY_Scan(<span class="number">0</span>);<span class="comment">//不支持连续按</span></span><br><span class="line"><span class="keyword">if</span>(keyvalue)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(keyvalue)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">PFout(<span class="number">9</span>)=!PFout(<span class="number">9</span>);<span class="comment">//绿灯翻转</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">PFout(<span class="number">10</span>)=!PFout(<span class="number">10</span>);<span class="comment">//红灯翻转</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">PFout(<span class="number">9</span>)=!PFout(<span class="number">9</span>);</span><br><span class="line">PFout(<span class="number">10</span>)=!PFout(<span class="number">10</span>);<span class="comment">//两个灯都翻转</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">PFout(<span class="number">8</span>)=!PFout(<span class="number">8</span>);<span class="comment">//蜂鸣器响和不响</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> delay_ms(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//key.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_Init_Structure;</span><br><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOE,ENABLE);</span><br><span class="line">GPIO_Init_Structure.GPIO_Pin=GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;</span><br><span class="line">GPIO_Init_Structure.GPIO_Mode=GPIO_Mode_IN;</span><br><span class="line">GPIO_Init_Structure.GPIO_PuPd=GPIO_PuPd_UP;</span><br><span class="line">GPIO_Init_Structure.GPIO_Speed=GPIO_Fast_Speed;</span><br><span class="line">GPIO_Init(GPIOE,&amp;GPIO_Init_Structure);</span><br><span class="line"></span><br><span class="line">GPIO_Init_Structure.GPIO_Pin=GPIO_Pin_0;</span><br><span class="line">GPIO_Init_Structure.GPIO_PuPd=GPIO_PuPd_DOWN;</span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_Init_Structure);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(u8 mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> u8 key_up=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line">key_up=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(key_up&amp;&amp;(KEY_0==<span class="number">0</span>||KEY_1==<span class="number">0</span>||KEY_2==<span class="number">0</span>||WK_UP==<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">key_up=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(KEY_0==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KEY_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KEY_2==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(WK_UP==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(KEY_0==<span class="number">1</span>&amp;&amp;KEY_1==<span class="number">1</span>&amp;&amp;KEY_2==<span class="number">1</span>&amp;&amp;WK_UP==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">key_up=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="时钟树"><a class="markdownIt-Anchor" href="#时钟树"></a> 时钟树</h2><p>时钟系统是CPU的脉搏，就像人的心跳一样， STM32F4的时钟系统比较复杂，不像简单的51单片机一个系统时钟就可以解决一切，这是因为STM32本身非常复杂，外设非常的多，但是并不是所有外设都需要系统时钟这么高的频率，比如看门狗以及RTC只需要几十k的时钟即可，同一个电路，时钟越快功耗越大，同时抗电磁干扰能力也会越弱，所以对于较为复杂的MCU一般都是采取多时钟源的方法来解决这些问题；</p><p><strong>STM32F4的时钟系统图：</strong></p><p><a href="https://imgchr.com/i/rJzx9f"><img src="https://s3.ax1x.com/2020/12/18/rJzx9f.jpg" alt="rJzx9f.jpg" /></a></p><p>在STM32F4中，有5个最重要的时钟源，为LSI、LSE、HSI、HSE、PLL，其中PLL实际是分为两个时钟源，分别为主PLL和专用PLL。从时钟频率来分可以分为高速时钟源和低速时钟源，在这5个中HSI，HSE以及PLL是高速时钟，LSI和LSE是低速时钟。从来源可分为外部时钟源和内部时钟源，外部时钟源就是从外部通过接晶振的方式获取时钟源，其中HSE和LSE是外部时钟源，其他的是内部时钟源；</p><p><strong>位置：</strong> 顺序从上到下LSI、LSE、HSI、HSE、PLL，带E的时钟和PLL靠近外侧，带I的时钟靠近内侧；</p><p><strong>STM32F4的5个时钟源：</strong></p><ul><li><p>LSI是低速内部时钟，RC振荡器，频率为32kHz左右，供独立看门狗和自动唤醒单元使用</p></li><li><p>LSE是低速外部时钟，接频率为32.768kHz的石英晶体，这个主要是RTC的时钟源</p></li><li><p>HSI是高速内部时钟，RC振荡器，频率为16MHz，可以直接作为系统时钟或者用作PLL输入</p></li><li><p>HSE是高速外部时钟，可接石英/陶瓷谐振器，或者接外部时钟源，频率范围为4MHz~26MHz，HSE也可以直接做为系统时钟或者PLL输入</p></li><li><p>PLL为锁相环倍频输出，STM32F4有两个PLL，均由HSE 或者HSI 提供时钟输入信号:</p><ul><li><p>主PLL两个不同的输出时钟。</p><ul><li><p>第一个输出PLLP用于生成高速的系统时钟（最高168MHz）</p></li><li><p>第二个输出PLLQ用于USB OTG FS 的时钟（48M）、RNG（随机数发生器） 和SDIO 时钟</p></li></ul></li><li><p>专用PLL(PLLI2S)用于生成精确时钟，从而在I2S接口实现高品质音频性能</p></li></ul></li></ul><p><strong>主PLL时钟第一个高速时钟输出PLLP的计算方法：</strong></p><p>主PLL时钟的时钟源要先经过一个分频系数为M（2 ~ 63）的分频器，得到VCO输入信号（范围1 ~2M）然后经过倍频系数为N的倍频器出来之后，得到VCO输出信号（范围193 ~ 432M）还需要经过一个分频系数为P（第一个输出PLLP）或者Q（第二个输出PLLQ）的分频器分频之后，最后才生成最终的主PLL时钟</p><p>假设外部晶振选择8MHz，同时设置相应的分频器M=8，倍频器倍频系数N=336，</p><p>分频器分频系数P=2，那么主PLL生成的第一个输出高速时钟PLLP为：</p><p>PLL=8MHz *  N/ (M*P)=8MHz * 336 /(8 * 2) = 168MHz</p><p>如果我们选择HSE为PLL时钟源，同时SYSCLK时钟源为PLL，那么SYSCLK时钟为168MHz，后面的实验都是采用这样的配置</p><p><strong>IWDGCLK：</strong> 看门狗时钟的输入，看门狗时钟源只能是低速的LSI时钟；</p><p><strong>RTCCLK：</strong> RTC时钟源，RTC的时钟源可以选择LSI，LSE，以及HSE分频后的时钟，HSE分频系数为2~31，通常的做法是由LSE 给RTC 提供时钟，大小为32.768KHZ，LSE由外接的晶体谐振器产生，所配的谐振电容精度要求高，不然很容易不起震，选择方式是编程 RCC 备份域控制寄存器 (RCC_BDCR) 中的 RTCSEL[1:0] 位和 RCC 时钟配置寄存器 (RCC_CFGR) 中的 RTCPRE[4:0] 位；</p><p><strong>SYSCLK：</strong> 系统时钟，SYSCLK系统时钟来源：HSI,HSE和PLL，在实际应用中，因为对时钟速度要求都比较高我们才会选用STM32F4这种级别的处理器，所以一般情况下，都是采用PLL作为SYSCLK时钟源，当HSE 出现故障的时候（PLL时钟来源HSE时钟），系统时钟会切换为HSI=16M，直到HSE 恢复正常为止根据前面的计算公式，可以算出你的系统的SYSCLK是多少，具体的由时钟配置寄存器RCC_CFGR的SW 位配置；</p><p><strong>HCLK：</strong> AHB 总线时钟，系统时钟SYSCLK 经过AHB 预分频器分频之后得到时钟叫AHB 总线时钟，即HCLK，分频因子可以是:[1， 2，4，8，16，64，128，256，512]，具体的由时钟配置寄存器RCC_CFGR 的HPRE 位设置，片上大部分外设的时钟都是经过HCLK 分频得到，至于AHB总线上的外设的时钟设置为多少，得等到使用该外设的时候才设置，这里设置为1 分频，即HCLK=SYSCLK=168M；</p><p>**HCLK2：**APB2 总线时钟PCLK2， 由HCLK 经过高速APB2 预分频器得到，分频因子可以是:[1，2，4，8，16]，具体由时钟配置寄存器RCC_CFGR 的PPRE2 位设置。HCLK2 属于高速的总线时钟，片上高速的外设就挂载到这条总线上</p><p><strong>HCLK1：</strong> APB1 总线时钟PCLK1 由HCLK 经过低速APB 预分频器得到，分频因子可以是:[1，2，4，8，16]，具体由时钟配置寄存器RCC_CFGR 的PPRE1 位设置，HCLK1 属于低速的总线时钟，最高为42M，片上低速的外设就挂载到这条总线上</p><p><strong>I2S时钟源：</strong> I2S的时钟源来源于PLLI2S或者映射到I2S_CKIN引脚的外部时钟，I2S出于音质的考虑，对时钟精度要求很高，STM32F4开发板使用的是内部PLLI2SCLK。</p><p><strong>输出时钟MCO1和MCO2：</strong> MCO1是向芯片的PA8引脚输出时钟，它有四个时钟来源分别为：HSI,LSE,HSE和PLL时钟，MCO2是向芯片的PC9输出时钟，它同样有四个时钟来源分别为：HSE,PLL，SYSCLK以及PLLI2S时钟，MCO输出时钟频率最大不超过100MHz；</p><p>以太网PTP时钟，AHB时钟，APB2高速时钟，APB1低速时钟，这些时钟都是来源于SYSCLK系统时钟。其中以太网PTP时钟是使用系统时钟，AHB,APB2和APB1时钟是经过SYSCLK时钟分频得来，AHB最大时钟为168MHz, APB2高速时钟最大频率为84MHz,而APB1低速时钟最大频率为42MHz；</p><p><strong>STM32F4内部以太网MAC时钟的来源：</strong> 对于MII接口来说，必须向外部PHY芯片提供25Mhz的时钟，这个时钟，可以由PHY芯片外接晶振，或者使用STM32F4 的MCO输出来提供。然后，PHY 芯片再给STM32F4提供ETH_MII_TX_CLK和ETH_MII_RX_CLK时钟。对于RMII接口来说，外部必须提供50Mhz的时钟驱动PHY和STM32F4的ETH_RMII_REF_CLK，这个50Mhz时钟可以来自PHY、有源晶振或者STM32F4的MCO，<strong>开发板使用的是RMII 接口</strong>，使用PHY 芯片提供50Mhz时钟驱动STM32F4 的ETH_RMII_REF_CLK；</p><p><strong>外部PHY提供的USB OTG HS（60MHZ）时钟：</strong> F407 的USB 没有集成PHY，要想实现USB 高速传输的话，必须外置USB PHY 芯片，常用的芯片是USB3300。当外接USB PHY 芯片时，PHY 芯片需要给MCU 提供一个时钟；</p><h2 id="时钟初始化配置"><a class="markdownIt-Anchor" href="#时钟初始化配置"></a> 时钟初始化配置</h2><p>STM32F4时钟系统初始化是在system_stm32f4xx.c中的SystemInit()函数中完成的，总共6个步骤，<strong>初始化之后的状态：</strong></p><ul><li>SYSCLK（系统时钟）                            =168MHz</li><li>AHB总线时钟(HCLK=SYSCLK)              =168MHz</li><li>APB1总线时钟(PCLK1=SYSCLK/4)        =42MHz</li><li>APB2总线时钟(PCLK2=SYSCLK/2)        =84MHz</li><li>PLL主时钟                                           =168MHz</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用HSE 时，设置系统时钟的步骤</span></span><br><span class="line"><span class="comment">* 1、开启HSE ，并等待 HSE 稳定</span></span><br><span class="line"><span class="comment">* 2、设置 AHB、APB2、APB1 的预分频因子</span></span><br><span class="line"><span class="comment">* 3、设置PLL 的时钟来源</span></span><br><span class="line"><span class="comment">*    设置VCO 输入时钟 分频因子 m</span></span><br><span class="line"><span class="comment">*    设置VCO 输出时钟 倍频因子 n</span></span><br><span class="line"><span class="comment">*    设置PLLCLK 时钟分频因子 p</span></span><br><span class="line"><span class="comment">*    设置OTG FS,SDIO,RNG 时钟分频因子 q</span></span><br><span class="line"><span class="comment">* 4、开启PLL，并等待PLL 稳定</span></span><br><span class="line"><span class="comment">* 5、把PLLCK 切换为系统时钟SYSCLK</span></span><br><span class="line"><span class="comment">* 6、读取时钟切换状态位，确保PLLCLK 被选为系统时钟</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLL_M 25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLL_N 336</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLL_P 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLL_Q 7</span></span><br><span class="line"><span class="comment">// 要超频的话，修改PLL_N 这个宏即可，取值范围为：192~432。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetSysClock</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__IO <span class="keyword">uint32_t</span> StartUpCounter = <span class="number">0</span>, HSEStatus = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、使能HSE</span></span><br><span class="line">RCC-&gt;CR |= ((<span class="keyword">uint32_t</span>)RCC_CR_HSEON);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待HSE 启动稳定</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    &#123;</span><br><span class="line">HSEStatus = RCC-&gt;CR &amp; RCC_CR_HSERDY;</span><br><span class="line">StartUpCounter++;</span><br><span class="line">&#125; <span class="keyword">while</span> ((HSEStatus==<span class="number">0</span>)&amp;&amp;(StartUpCounter!=HSE_STARTUP_TIMEOUT));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((RCC-&gt;CR &amp; RCC_CR_HSERDY) != RESET)</span><br><span class="line">    &#123;</span><br><span class="line">HSEStatus = (<span class="keyword">uint32_t</span>)<span class="number">0x01</span>;</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">HSEStatus = (<span class="keyword">uint32_t</span>)<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HSE 启动成功</span></span><br><span class="line"><span class="keyword">if</span> (HSEStatus == (<span class="keyword">uint32_t</span>)<span class="number">0x01</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">// 调压器电压输出级别配置为1，以便在器件为最大频率</span></span><br><span class="line"><span class="comment">// 工作时使性能和功耗实现平衡</span></span><br><span class="line">RCC-&gt;APB1ENR |= RCC_APB1ENR_PWREN;</span><br><span class="line">PWR-&gt;CR |= PWR_CR_VOS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、设置AHB/APB2/APB1 的分频因子</span></span><br><span class="line"><span class="comment">// HCLK = SYSCLK / 1</span></span><br><span class="line">RCC-&gt;CFGR |= RCC_CFGR_HPRE_DIV1;</span><br><span class="line"><span class="comment">// PCLK2 = HCLK / 2</span></span><br><span class="line">RCC-&gt;CFGR |= RCC_CFGR_PPRE2_DIV2;</span><br><span class="line"><span class="comment">// PCLK1 = HCLK / 4</span></span><br><span class="line">RCC-&gt;CFGR |= RCC_CFGR_PPRE1_DIV4;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、配置主PLL 的时钟来源，设置M,N,P,Q</span></span><br><span class="line"><span class="comment">// Configure the main PLL</span></span><br><span class="line">RCC-&gt;PLLCFGR = PLL_M|(PLL_N&lt;&lt;<span class="number">6</span>)|(((PLL_P &gt;&gt; <span class="number">1</span>) <span class="number">-1</span>) &lt;&lt; <span class="number">16</span>) |(RCC_PLLCFGR_PLLSRC_HSE) |(PLL_Q &lt;&lt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、使能主PLL</span></span><br><span class="line">RCC-&gt;CR |= RCC_CR_PLLON;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待PLL 稳定</span></span><br><span class="line"><span class="keyword">while</span> ((RCC-&gt;CR &amp; RCC_CR_PLLRDY) == <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*----------------------------------------------------*/</span></span><br><span class="line"><span class="comment">// 配置FLASH 预取指,指令缓存,数据缓存和等待状态</span></span><br><span class="line">FLASH-&gt;ACR = FLASH_ACR_PRFTEN|FLASH_ACR_ICEN|FLASH_ACR_DCEN|FLASH_ACR_LATENCY_5WS;</span><br><span class="line"><span class="comment">/*---------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、选择主PLLCLK 作为系统时钟源</span></span><br><span class="line">RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~(RCC_CFGR_SW));</span><br><span class="line">RCC-&gt;CFGR |= RCC_CFGR_SW_PLL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、读取时钟切换状态位，确保PLLCLK 选为系统时钟</span></span><br><span class="line"><span class="keyword">while</span> ((RCC-&gt;CFGR &amp; (<span class="keyword">uint32_t</span>)RCC_CFGR_SWS )!= RCC_CFGR_SWS_PLL);</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">// HSE 启动出错处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="systeminit函数介绍"><a class="markdownIt-Anchor" href="#systeminit函数介绍"></a> SystemInit函数介绍</h2><p>在调用main函数前就会调用SystemInit函数，如果使用比较老的标准库，SystemInit要在主函数中调用，使用新的标准库都不需要再在主函数中调用，SystemInit函数完成系统的初始化，在下面代码标出主要进行哪些操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SystemInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* FPU设置（浮点运算）*/</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> (__FPU_PRESENT == 1) &amp;&amp; (__FPU_USED == 1)</span></span><br><span class="line">    SCB-&gt;CPACR |= ((<span class="number">3UL</span> &lt;&lt; <span class="number">10</span>*<span class="number">2</span>)|(<span class="number">3UL</span> &lt;&lt; <span class="number">11</span>*<span class="number">2</span>));  <span class="comment">/* set CP10 and CP11 Full Access */</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">/* 重置RCC时钟配置为默认配置*/</span></span><br><span class="line">  <span class="comment">/* 打开HSI时钟 */</span></span><br><span class="line">  RCC-&gt;CR |= (<span class="keyword">uint32_t</span>)<span class="number">0x00000001</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 重置CFGR寄存器 */</span></span><br><span class="line">  RCC-&gt;CFGR = <span class="number">0x00000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 关闭HSEON, CSSON and PLLON时钟 */</span></span><br><span class="line">  RCC-&gt;CR &amp;= (<span class="keyword">uint32_t</span>)<span class="number">0xFEF6FFFF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 重置PLLCFGR寄存器 */</span></span><br><span class="line">  RCC-&gt;PLLCFGR = <span class="number">0x24003010</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 重置HSEBYP寄存器 */</span></span><br><span class="line">  RCC-&gt;CR &amp;= (<span class="keyword">uint32_t</span>)<span class="number">0xFFFBFFFF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 关闭所有中断 */</span></span><br><span class="line">  RCC-&gt;CIR = <span class="number">0x00000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)</span></span><br><span class="line">  SystemInit_ExtMemCtl(); <span class="comment">//初始化外部存储器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */</span></span></span><br><span class="line">         </span><br><span class="line">  <span class="comment">/* Configure the System clock source, PLL Multiplier and Divider factors, </span></span><br><span class="line"><span class="comment">     AHB/APBx prescalers and Flash settings ----------------------------------*/</span></span><br><span class="line">  SetSysClock();<span class="comment">//配置时钟，详细介绍参考时钟树章节</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the Vector Table location add offset address ------------------*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VECT_TAB_SRAM</span></span><br><span class="line">  SCB-&gt;VTOR = SRAM_BASE | VECT_TAB_OFFSET; <span class="comment">/* Vector Table Relocation in Internal SRAM */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  SCB-&gt;VTOR = FLASH_BASE | VECT_TAB_OFFSET; <span class="comment">/* Vector Table Relocation in Internal FLASH */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="启动文件介绍"><a class="markdownIt-Anchor" href="#启动文件介绍"></a> 启动文件介绍</h2><p>启动文件由汇编编写，是系统上电复位后第一个执行的程序，<strong>主要做了以下工作：</strong></p><ol><li>初始化堆栈指针SP=_ initial_sp _</li><li>初始化PC 指针=Reset_Handler</li><li>初始化中断向量表</li><li>配置系统时钟</li><li>调用C 库函数_main 初始化用户堆栈，从而最终调用main 函数去到C 的世界</li></ol><h2 id="systick定时器"><a class="markdownIt-Anchor" href="#systick定时器"></a> Systick定时器</h2><p><strong>基础知识：</strong></p><p>Systick定时器，系统滴答定时器，是一个简单的定时器，对于CM3,CM4内核芯片，都有Systick定时器，Systick定时器常用来做延时，或者实时系统的心跳时钟，这样可以节省MCU资源，不用浪费一个定时器，比如UCOS中，分时复用，需要一个最小的时间戳，一般在STM32+UCOS系统中，都采用Systick做UCOS心跳时钟；</p><p>Systick定时器一个24 位的倒计数定时器，计到0 时，将从RELOAD 寄存器中自动重装载定时初值。只要不把它在SysTick 控制及状态寄存器中的使能位清除，就永不停息，即使在睡眠模式下也能工作；</p><p>SysTick定时器被捆绑在NVIC中，用于产生SYSTICK异常（异常号：15），Systick中断的优先级可以设置；</p><p>4个Systick寄存器：CTRL，LOAD，VAL，CALIB</p><p><strong>CTRL：</strong></p><table><thead><tr><th style="text-align:center">位段</th><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">复位值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">16</td><td style="text-align:center">COUNTFLAG</td><td style="text-align:center">R</td><td style="text-align:center">0</td><td style="text-align:center">如果上次读取本寄存器后，Systick已经数到0，则该位为1.如果读取该位，该位自动清零</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">CLKSOURCE</td><td style="text-align:center">R/W</td><td style="text-align:center">0</td><td style="text-align:center">为0使用外部时钟源，为1使用内核时钟源</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">TICKINT</td><td style="text-align:center">R/W</td><td style="text-align:center">0</td><td style="text-align:center">为1，倒数到0时产生Systick异常请求，为0则倒数到0时无动作</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">ENABLE</td><td style="text-align:center">R/W</td><td style="text-align:center">0</td><td style="text-align:center">使能位</td></tr></tbody></table><p><strong>对于STM32，外部时钟源是 HCLK(AHB总线时钟）的1/8，内核时钟是 HCLK时钟</strong></p><p><strong>LOAD：</strong></p><table><thead><tr><th style="text-align:center">位段</th><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">复位值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">23：0</td><td style="text-align:center">RELOAD</td><td style="text-align:center">R/W</td><td style="text-align:center">0</td><td style="text-align:center">当倒数到0时，将被重装载的值</td></tr></tbody></table><p><strong>VAL：</strong></p><table><thead><tr><th style="text-align:center">位段</th><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">复位值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">23：0</td><td style="text-align:center">CURRENT</td><td style="text-align:center">R/W</td><td style="text-align:center">0</td><td style="text-align:center">读取时返回当前倒计数的值，写它则使之清零，同时还会清除在Systick控制及状态寄存器的COUNTFLAG标志</td></tr></tbody></table><p>Systick相关库函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SysTick_CLKSourceConfig() ;   <span class="comment">//Systick时钟源选择，在misc.c文件中（在SysTick_Config函数重新设置了CTRL的值，这个函数没用，要改时钟源修改SysTick_Config函数）</span></span><br><span class="line"></span><br><span class="line">SysTick_Config(<span class="keyword">uint32_t</span> ticks) ;<span class="comment">//初始化systick,时钟为HCLK,并开启中断,在core_cm3.h/core_cm4.h文件中，修改时钟源，中断优先级在这个函数修改  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//Systick中断服务函数</span></span><br></pre></td></tr></table></figure><p>使用Systick定时器中断方式实现跑马灯的延时：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line">u16 TimeDelay;<span class="comment">//定义全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(u16 nTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//SysTick_CLKSourceConfig(ysTick_CLKSource_HCLK) ;//即使这里配置了时钟源，后面的SysTick_Config会重新配置，所以这句话在这个程序无效，要配置时钟源需要修改SysTick_Config函数</span></span><br><span class="line">    SysTick_Config(<span class="number">168000</span>);<span class="comment">//默认设置了内核时钟源HCLK为Systick时钟，传的参数值-1相当传给VAL寄存器的值</span></span><br><span class="line">TimeDelay=nTime;</span><br><span class="line"><span class="keyword">while</span>(TimeDelay);<span class="comment">//当ntime不等于0时就卡在这里，等待SysTick_Handler中断服务函数将TimeDelay减为零就退出循环了，实现延时效果</span></span><br><span class="line">    SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;<span class="comment">//使用完后关闭Systick定时器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(TimeDelay!=<span class="number">0x00</span>)</span><br><span class="line">&#123;</span><br><span class="line">TimeDelay--;<span class="comment">//每产生一次中断减1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LED_Init();</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_SetBits(GPIOF,GPIO_Pin_9);</span><br><span class="line">GPIO_ResetBits(GPIOF,GPIO_Pin_10);</span><br><span class="line">delay(<span class="number">500</span>);</span><br><span class="line">GPIO_ResetBits(GPIOF,GPIO_Pin_9);</span><br><span class="line">GPIO_SetBits(GPIOF,GPIO_Pin_10);</span><br><span class="line">delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jlink在线调试软件调试方法与技巧"><a class="markdownIt-Anchor" href="#jlink在线调试软件调试方法与技巧"></a> JLINK在线调试+软件调试方法与技巧</h2><p><strong>JTAG/SWD调试原理：</strong> STM32F4xx的内核是CortexTM-M4F，该内核包含用于高级调试功能的硬件，利用这些调试功能，可以在取指（指令断点）或取访问数据（数据断点）时停止内核，内核停止时，可以查询内核的内部状态和系统的外部状态，查询完成后，将恢复内核和系统并恢复程序执行，当调试器与STM32F4xx MCU相连并进行调试时，将使用内核的硬件调试模块；</p><p><a href="https://imgchr.com/i/rUCAfA"><img src="https://s3.ax1x.com/2020/12/19/rUCAfA.png" alt="rUCAfA.png" /></a></p><p>如何复用 JTAG引脚</p><p><a href="https://imgchr.com/i/rUCum8"><img src="https://s3.ax1x.com/2020/12/19/rUCum8.png" alt="rUCum8.png" /></a></p><p>禁止JTAG-DP和SW-DP的库函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);<span class="comment">// 改变指定管脚的映射 GPIO_Remap_SWJ_Disable SWJ 完全禁用（JTAG+SW-DP）</span></span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable , ENABLE);<span class="comment">// 改变指定管脚的映射 GPIO_Remap_SWJ_JTAGDisable ，JTAG-DP 禁用 + SW-DP 使能</span></span><br></pre></td></tr></table></figure><p><strong>注意：复用后会导致无法使用JTAG/SWD模式下载程序，一般不会这样使用</strong></p><p>MDK调试模式下工具条各个图标的功能</p><p><a href="https://imgchr.com/i/rUCo9A"><img src="https://s3.ax1x.com/2020/12/19/rUCo9A.png" alt="rUCo9A.png" /></a></p><p>调试使用的快捷键和功能整体和VS差不多</p><p>在Peripheral工具栏可以查看寄存器，时钟等的值</p><h2 id="io引脚复用和映射"><a class="markdownIt-Anchor" href="#io引脚复用和映射"></a> IO引脚复用和映射</h2><p><strong>端口复用：</strong> STM32有很多的内置外设，这些外设的外部引脚都是与GPIO复用的。也就是说，一个GPIO如果可以复用为内置外设的功能引脚，那么当这个GPIO作为内置外设使用的时候，就叫做复用，例如串口1 的发送接收引脚是PA9,PA10，当我们把PA9,PA10不用作GPIO，而用做复用功能串口1的发送接收引脚的时候，叫端口复用，哪些引脚可以复用为哪些功能可以查询引脚分配表；</p><p><strong>STM32F4的端口复用映射原理：</strong> STM32F4系列微控制器IO引脚通过一个复用器连接到内置外设或模块，该复用器一次只允许一个外设的复用功能（AF）连接到对应的IO口，这样可以确保共用同一个IO引脚的外设之间不会发生冲突，每个IO引脚都有一个复用器，该复用器采用16路复用功能输入（AF0到AF15），可通过GPIOx_AFRL(针对引脚0-7)和GPIOx_AFRH（针对引脚8-15）寄存器对这些输入进行配置，每四位控制一路复用；</p><p><a href="https://imgchr.com/i/rUiRFe"><img src="https://s3.ax1x.com/2020/12/19/rUiRFe.jpg" alt="rUiRFe.jpg" /></a></p><p><strong>复用功能映射配置：</strong></p><ol><li><p><strong>系统功能</strong></p><p>将lO连接到AFO，然后根据所用功能进行配置:</p><ul><li>JTAG/SWD：在各器件复位后，会将这些引脚指定为专用引脚，可供片上调试模块立即使用（不受GPIO控制器控制）</li><li>RTC_REFIN：此引脚应配置为输入浮空模式</li><li>MCO1和MCO2:这些引脚必须配置为复用功能模式</li></ul></li><li><p><strong>GPIO</strong></p><p>在GPIO_MODER寄存器中将所需I/O配置为输入或输出</p></li><li><p><strong>外设复用功能</strong></p><p><strong>对于ADC和 DAC，在GPIOx_MODER寄存器中将所需IO配置为模拟通道</strong></p><p><strong>对于其它外设：</strong></p><ul><li>在GPIOx_MODER寄存器中将所需I/O配置为复用功能</li><li>通过GPIOx_OTYPER、GPIOx_PUPDR和GPIOx_OSPEEDER寄存器，分别选择类型、上拉/下拉以及输出速度</li><li>在GPIOx_AFRL 或GPIOx_AFRH寄存器中，将IO连接到所需AFx</li></ul></li></ol><p>以PA9,PA10复用为串口1的配置为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); <span class="comment">//使能GPIOA时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);<span class="comment">//使能USART1时钟</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//USART1端口配置</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; <span class="comment">//GPIOA9与GPIOA10</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;<span class="comment">//复用功能 </span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//速度50MHz</span></span><br><span class="line">GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; <span class="comment">//推挽复用输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; <span class="comment">//上拉</span></span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitStructure); <span class="comment">//初始化PA9，PA10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//串口1对应引脚复用映射</span></span><br><span class="line">GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); <span class="comment">//GPIOA9复用为USART1</span></span><br><span class="line">GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); <span class="comment">//GPIOA10复用为USART1</span></span><br></pre></td></tr></table></figure><h2 id="nvic中断优先级管理"><a class="markdownIt-Anchor" href="#nvic中断优先级管理"></a> NVIC中断优先级管理</h2><p>STM32F4并没有使用CM4内核的全部东西，而是只用了它的一部分，STM32F40xx/STM32F41xx总共有92个中断，包括10个内核中断和82个可屏蔽中断，具有16级可编程的中断优先级，常见的内核中断包括复位(reset),不可屏蔽中断(NMI),硬错误(Hardfault)，而我们常用的就是这82个可屏蔽中断；</p><p><strong>中断管理方法：</strong> 对STM32中断进行分组，组0~4，同时，对每个中断设置一个抢占优先级和一个响应优先级值；</p><p>分组配置是在寄存器SCB-&gt;AIRCR中配置：</p><table><thead><tr><th style="text-align:center">组</th><th style="text-align:center">AIRCR[10:8]</th><th style="text-align:center">IP bit[7:4]分配情况</th><th style="text-align:center">分配结果</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">111</td><td style="text-align:center">0：4</td><td style="text-align:center">0位抢占优先级，4位响应优先级</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">110</td><td style="text-align:center">1：3</td><td style="text-align:center">1位抢占优先级，3位响应优先级</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">101</td><td style="text-align:center">2：2</td><td style="text-align:center">2位抢占优先级，2位响应优先级</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">100</td><td style="text-align:center">3：1</td><td style="text-align:center">3位抢占优先级，1位响应优先级</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">011</td><td style="text-align:center">4：0</td><td style="text-align:center">4位抢占优先级，0位响应优先级</td></tr></tbody></table><p><strong>抢占优先级 &amp; 响应优先级：</strong></p><ul><li><p>高优先级的抢占优先级是可以打断正在进行的低抢占优先级中断的</p></li><li><p>抢占优先级相同的中断，高响应优先级不可以打断低响应优先级的中断</p></li><li><p>抢占优先级相同的中断，当两个中断同时发生的情况下，哪个响应优先级高，哪个先执行</p></li><li><p>如果两个中断的抢占优先级和响应优先级都是一样的话，则看哪个中断先发生就先执行</p></li></ul><p>例如：设置中断优先级组为2，然后设置</p><p>中断3(RTC中断)的抢占优先级为2，响应优先级为1</p><p>中断6（外部中断0）的抢占优先级为3，响应优先级为0</p><p>中断7（外部中断1）的抢占优先级为2，响应优先级为0</p><p>那么这3个中断的优先级顺序为：中断7&gt;中断3&gt;中断6；</p><p><strong>一般情况下，系统代码执行过程中，只设置一次中断优先级分组，设置好分组之后一般不会再改变分组，随意改变分组会导致中断管理混乱，程序出现意想不到的执行结果；</strong></p><p><strong>优先级分组函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span>;<span class="comment">//设置分组2</span></span><br></pre></td></tr></table></figure><p><strong>中断初始化函数:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_Init</span><span class="params">(NVIC_InitTypeDef* NVIC_InitStruct)</span></span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannel; <span class="comment">//设置中断源</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannelPreemptionPriority;<span class="comment">//设置响应优先级</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannelSubPriority; <span class="comment">//设置抢占优先级</span></span><br><span class="line">  FunctionalState NVIC_IRQChannelCmd; <span class="comment">//使能/使能</span></span><br><span class="line">&#125; NVIC_InitTypeDef;</span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//串口1中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">1</span> ;<span class="comment">// 抢占优先级为1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;<span class="comment">// 子优先级位2</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//IRQ通道使能</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//根据上面指定的参数初始化NVIC寄存器</span></span><br></pre></td></tr></table></figure><p><strong>中断优先级设置步骤:</strong></p><ol><li><p>系统运行后先设置中断优先级分组。调用函数：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>​<strong>整个系统执行过程中，只设置一次中断分组</strong></p><ol start="2"><li><p>针对每个中断，设置对应的抢占优先级和响应优先级：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_Init</span><span class="params">(NVIC_InitTypeDef* NVIC_InitStruct)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>如果需要挂起/解挂，查看中断当前激活状态，分别调用相关函数；</p></li></ol><h2 id="串口通信基本原理"><a class="markdownIt-Anchor" href="#串口通信基本原理"></a> 串口通信基本原理</h2><p><strong>处理器与外部设备通信的两种方式：</strong></p><p>并行通信：传输原理：数据各个位同时传输，优点：速度快，缺点：占用引脚资源多；</p><p>串行通信：传输原理：数据按位顺序传输，优点：占用引脚资源少，缺点：速度相对较慢；</p><p><strong>串行通信按照数据传送方向，分为：</strong></p><ul><li>单工： 数据传输只支持数据在一个方向上传输</li><li>半双工：允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信</li><li>全双工：允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立<br />的接收和发送能力</li></ul><p><strong>串行通信的通信方式：</strong></p><p>同步通信：带时钟同步信号传输，SPI，IIC通信接口</p><p>异步通信：不带时钟同步信号，UART(通用异步收发器),单总线</p><p><strong>常见的串行通信接口：</strong></p><table><thead><tr><th style="text-align:center">通信标准</th><th style="text-align:center">引脚说明</th><th style="text-align:center">通信方式</th><th style="text-align:center">通信方向</th></tr></thead><tbody><tr><td style="text-align:center">UART<br />（通用异步收发器）</td><td style="text-align:center">TXD：发送端<br />RXD：接收端<br />GND：公共端</td><td style="text-align:center">异步通信</td><td style="text-align:center">全双工</td></tr><tr><td style="text-align:center">单总线<br />（1-wire）</td><td style="text-align:center">DQ：发送/接收端</td><td style="text-align:center">异步通信</td><td style="text-align:center">半双工</td></tr><tr><td style="text-align:center">SPI</td><td style="text-align:center">SCK：同步时钟<br />MISO：主机输入，从机输出<br />MOSI：主机暑促，从机输入</td><td style="text-align:center">同步通信</td><td style="text-align:center">全双工</td></tr><tr><td style="text-align:center">I2C</td><td style="text-align:center">SCL：同步时钟<br />SDA：数据输入/输出端</td><td style="text-align:center">同步通信</td><td style="text-align:center">半双工</td></tr></tbody></table><p><strong>串口通信接口：</strong> USRT：通用异步收发器，USART：通用同步异步收发器；</p><p>USRT异步通信方式引脚连接方法：</p><p><a href="https://imgchr.com/i/rDZnS0"><img src="https://s3.ax1x.com/2020/12/22/rDZnS0.jpg" alt="rDZnS0.jpg" /></a></p><p>哪些引脚可以复用为USRT/USART可通过原理图、数据手册或引脚分配表查询；</p><p><strong>串口通信过程：</strong></p><p><a href="https://imgchr.com/i/rDZx74"><img src="https://s3.ax1x.com/2020/12/22/rDZx74.jpg" alt="rDZx74.jpg" /></a></p><p><strong>串口通信框图：</strong></p><p><a href="https://imgchr.com/i/rDMdXt"><img src="https://s3.ax1x.com/2020/12/22/rDMdXt.jpg" alt="rDMdXt.jpg" /></a></p><p><strong>串口异步通信需要定义的参数：</strong></p><ul><li>起始位</li><li>数据位（8或带奇偶校验位9位）</li><li>奇偶校验位（第9位，可以没有，奇偶是指前面数据位中1的个数是奇数还是偶数，奇偶校验位通过加0或加1的方式保证数据位的1的个数是奇数或者偶数）</li><li>停止位（1，2，,5，15位）</li><li>波特率设置</li></ul><h2 id="串口寄存器和库函数配置"><a class="markdownIt-Anchor" href="#串口寄存器和库函数配置"></a> 串口寄存器和库函数配置</h2><p><strong>常用的串口相关寄存器：</strong></p><ul><li>USART_SR  状态寄存器</li><li>USART_DR  数据寄存器</li><li>USART_BSR 波特率寄存器</li></ul><p><strong>串口操作相关库函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略了参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_Init</span><span class="params">()</span></span>; <span class="comment">//串口初始化：波特率，数据字长，奇偶校验，硬件流控以及收发使能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_Cmd</span><span class="params">()</span></span>;<span class="comment">//使能串口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ITConfig</span><span class="params">()</span></span>;<span class="comment">//使能相关中断</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendData</span><span class="params">()</span></span>;<span class="comment">//发送数据到串口，DR</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">USART_ReceiveData</span><span class="params">()</span></span>;<span class="comment">//接受数据，从DR读取接受到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function">FlagStatus <span class="title">USART_GetFlagStatus</span><span class="params">()</span></span>;<span class="comment">//获取状态标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearFlag</span><span class="params">()</span></span>;<span class="comment">//清除状态标志位</span></span><br><span class="line"><span class="function">ITStatus <span class="title">USART_GetITStatus</span><span class="params">()</span></span>;<span class="comment">//获取中断状态标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearITPendingBit</span><span class="params">()</span></span>;<span class="comment">//清除中断状态标志位</span></span><br></pre></td></tr></table></figure><p>波特率的计算：</p><p>假设串口要设置115200的波特率，PLCK的时钟（即APB2总线时钟频率）为84M，则</p><p>USARTDIV=84000000/(115200*16)=45.572</p><p>那么</p><p>DIV_Fraction=16*0.572=8=0x09;</p><p>DIV_Mantissa=45=0x2d;</p><p>硬件连接：PA9，PA10（串口1）连接到了USB串口电路；</p><p><strong>串口配置的一般步骤：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RCC_APBxPeriphClockCmd();<span class="comment">//1.串口时钟使能,GPIO时钟使能</span></span><br><span class="line">RCC_AHB1PeriphClockCmd();</span><br><span class="line">GPIO_PinAFConfig();<span class="comment">//2.引脚复用映射</span></span><br><span class="line">GPIO_Init();<span class="comment">//3.GPIO端口模式设置,模式设置为GPIO_Mode_AF</span></span><br><span class="line">USART_Init();<span class="comment">//4.串口参数初始化</span></span><br><span class="line">NVIC_Init();<span class="comment">//5.开启中断并且初始化NVIC（如果需要开启中断才需要这个步骤）</span></span><br><span class="line">USART_ITConfig();</span><br><span class="line">USART_Cmd();<span class="comment">//6.使能串口</span></span><br><span class="line">USARTx_IRQHandler();<span class="comment">//7.编写中断处理函数</span></span><br><span class="line"><span class="comment">//8.串口数据收发</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendData</span><span class="params">()</span></span>;<span class="comment">//发送数据到串口，DR</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">USART_ReceiveData</span><span class="params">()</span></span>;<span class="comment">//接受数据，从DR读取接受到的数据</span></span><br><span class="line"><span class="comment">//9.串口传输状态获取：</span></span><br><span class="line"><span class="function">FlagStatus <span class="title">USART_GetFlagStatus</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearITPendingBit</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>简单串口实验：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//usrt.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _USRT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _USRT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyUSRT_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f4xx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usrt.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//设置中断优先级分组</span></span><br><span class="line">MyUSRT_Init();<span class="comment">//串口初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);<span class="comment">//死循环，等待发生串口中断，执行中断服务函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//usrt.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usrt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f4xx.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyUSRT_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">USART_InitTypeDef USART_Init_Structure;<span class="comment">//定义一个串口初始化结构体</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitTypeDef_Structure;<span class="comment">//定义一个GPIO初始化结构体</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitTypeDef_Structure;<span class="comment">//定义一个中断初始化结构体</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);<span class="comment">//使能串口时钟</span></span><br><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA ,ENABLE);<span class="comment">//使能GPIO时钟</span></span><br><span class="line"></span><br><span class="line">GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);<span class="comment">//设置9，10引脚复用为串口</span></span><br><span class="line">GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef_Structure.GPIO_Mode=GPIO_Mode_AF;<span class="comment">//设置为复用模式</span></span><br><span class="line">GPIO_InitTypeDef_Structure.GPIO_Pin=GPIO_Pin_9|GPIO_Pin_10;<span class="comment">//9和10引脚</span></span><br><span class="line">GPIO_InitTypeDef_Structure.GPIO_PuPd=GPIO_PuPd_UP;<span class="comment">//设置上拉模式</span></span><br><span class="line">GPIO_InitTypeDef_Structure.GPIO_Speed=GPIO_High_Speed;<span class="comment">//设置传输速度</span></span><br><span class="line">GPIO_Init(GPIOA,&amp;GPIO_InitTypeDef_Structure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line">USART_Init_Structure.USART_BaudRate=<span class="number">115200</span>;<span class="comment">//设置波特率</span></span><br><span class="line">USART_Init_Structure.USART_HardwareFlowControl=USART_HardwareFlowControl_None;<span class="comment">//关闭硬件流控制</span></span><br><span class="line">USART_Init_Structure.USART_Mode=USART_Mode_Rx|USART_Mode_Tx;<span class="comment">//设置发送和接受模式</span></span><br><span class="line">USART_Init_Structure.USART_Parity=USART_Parity_No;<span class="comment">//设置没有奇偶校验</span></span><br><span class="line">USART_Init_Structure.USART_StopBits=USART_StopBits_1;<span class="comment">//设置停止位为1位</span></span><br><span class="line">USART_Init_Structure.USART_WordLength=USART_WordLength_8b;<span class="comment">//设置数据位为8位</span></span><br><span class="line">USART_Init(USART1,&amp;USART_Init_Structure);</span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannel=USART1_IRQn;<span class="comment">//设置中断通道，产生什么中断</span></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelCmd=ENABLE;<span class="comment">//使能中断</span></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelPreemptionPriority=<span class="number">1</span>;<span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;<span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitTypeDef_Structure);<span class="comment">//初始化中断</span></span><br><span class="line"></span><br><span class="line">USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//设置中断触发方式</span></span><br><span class="line">USART_Cmd(USART1,ENABLE);<span class="comment">//使能串口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 res;</span><br><span class="line"><span class="keyword">if</span>(USART_GetFlagStatus(USART1,USART_FLAG_RXNE))</span><br><span class="line">&#123;</span><br><span class="line">res=USART_ReceiveData(USART1);</span><br><span class="line">USART_SendData(USART1,res);<span class="comment">//接受到什么数据，就将什么数据再发送出去</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串口通信实验"><a class="markdownIt-Anchor" href="#串口通信实验"></a> 串口通信实验</h2><p><strong>usart.c实现的相关协议：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USART_REC_LEN   200  <span class="comment">//定义最大接收字节数 </span></span></span><br><span class="line">u8  USART_RX_BUF[USART_REC_LEN];<span class="comment">//接收缓冲,最大USART_REC_LEN个字节.末字节为换行符</span></span><br><span class="line">u16 USART_RX_STA;         <span class="comment">//接收状态标记</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">USART_RX_STA</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">bit15</td><td style="text-align:center">bit14</td><td style="text-align:center">bit13~0</td></tr><tr><td style="text-align:center">接收完成标志</td><td style="text-align:center">接收到0X0D标志</td><td style="text-align:center">接收到的有效数据个数</td></tr></tbody></table><p>接收到0x0d和0x0a表示所有数据接受完成</p><p>实现代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 Res;</span><br><span class="line"><span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)<span class="comment">//接收完成一个字节数据产生中断</span></span><br><span class="line">&#123;</span><br><span class="line">Res =USART_ReceiveData(USART1);<span class="comment">//接收数据传给RES</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((USART_RX_STA&amp;<span class="number">0x8000</span>)==<span class="number">0</span>)<span class="comment">//如果未接收完</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x4000</span>)<span class="comment">//如果上一次接受到了0x0d</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res!=<span class="number">0x0a</span>) USART_RX_STA=<span class="number">0</span>;<span class="comment">//没有接收到0x0a表示并不是接收完成标志</span></span><br><span class="line"><span class="keyword">else</span> USART_RX_STA|=<span class="number">0x8000</span>;<span class="comment">//接收到了0x0a，数据接收完成</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res==<span class="number">0x0d</span>) USART_RX_STA|=<span class="number">0x4000</span>;<span class="comment">//接收到了0x0d</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">USART_RX_BUF[USART_RX_STA&amp;<span class="number">0X3FFF</span>]=Res ;<span class="comment">//将接收到的数据缓存到数组</span></span><br><span class="line">USART_RX_STA++;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&gt;(USART_REC_LEN<span class="number">-1</span>)) USART_RX_STA=<span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br><span class="line">  &#125; </span><br></pre></td></tr></table></figure><p><strong>串口通信实验：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f4xx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 t=<span class="number">0</span>;</span><br><span class="line">u8 len;</span><br><span class="line">u16 times;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">delay_init(<span class="number">168</span>);</span><br><span class="line">uart_init(<span class="number">115200</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x8000</span>)<span class="comment">//接收完成了</span></span><br><span class="line">&#123;</span><br><span class="line">len=USART_RX_STA&amp;<span class="number">0x3fff</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\n发送的消息为:\r\n&quot;</span>);<span class="comment">//打印（发送）“发送的消息为”到串口</span></span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1,USART_RX_BUF[t]);<span class="comment">//发送接收到的数据到串口</span></span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);<span class="comment">//等待发送完成</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">USART_RX_STA=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">times++;</span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">5000</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\nALIENTEK 探索者开发板 串口实验\r\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;正点原子@ALIENTEK\r\n\r\n\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(times%<span class="number">1000</span>==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;请输入数据，以回车键结束\r\n&quot;</span>);  </span><br><span class="line">delay_ms(<span class="number">10</span>);   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外部中断实验"><a class="markdownIt-Anchor" href="#外部中断实验"></a> 外部中断实验</h2><p>STM32F4的每个IO都可以作为外部中断输入</p><p>STM32F4的中断控制器支持<strong>22个外部中断/事件请求：</strong><br />EXTI线0~15：对应外部IO口的输入中断</p><p>EXTI线16：连接到PVD输出<br />EXTI线17：连接到RTC闹钟事件<br />EXTI线18：连接到USB OTG FS唤醒事件<br />EXTI线19：连接到以太网唤醒事件<br />EXTI线20：连接到USB OTG HS(在FS中配置)唤醒事件<br />EXTI线21：连接到RTC入侵和时间戳事件<br />EXTI线22：连接到RTC唤醒事件</p><p>每个外部中断线可以独立的配置触发方式（上升沿，下降沿或者双边沿触发），触发/屏蔽，专用的状态位；</p><p>从上面可以看出，STM32F4<strong>供IO使用的中断线只有16个</strong> ，STM32F4xx系列的IO口多达上百个，</p><p><strong>中断线怎么跟io口对应：</strong></p><p>GPIOx.0映射到EXTI0</p><p>GPIOx.1映射到EXTI1</p><p>…</p><p>GPIOx.15映射到EXTI15</p><p>对于每个中断线，我们可以设置相应的触发方式（上升沿触发，下降沿触发，边沿触发）以及使能；</p><p>IO口外部中断在中断向量表中只分配了7个中断向量，也就是只能使用7个中断服务函数</p><p><a href="https://imgchr.com/i/rsyhtO"><img src="https://s3.ax1x.com/2020/12/23/rsyhtO.png" alt="rsyhtO.png" /></a></p><p>外部中断线5 ~ 9分配一个中断向量，共用一个服务函数外部中断线10 ~  15分配一个中断向量，共用一个中断服务函数；</p><p>EXTI框图</p><p><a href="https://imgchr.com/i/r5ZlLD"><img src="https://s3.ax1x.com/2020/12/27/r5ZlLD.png" alt="r5ZlLD.png" /></a></p><p><strong>中断服务函数列表：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXTI0_IRQHandler           </span><br><span class="line">EXTI1_IRQHandler</span><br><span class="line">EXTI2_IRQHandler           </span><br><span class="line">EXTI3_IRQHandler           </span><br><span class="line">EXTI4_IRQHandler           </span><br><span class="line">EXTI9_5_IRQHandler         </span><br><span class="line">EXTI15_10_IRQHandler</span><br></pre></td></tr></table></figure><p><strong>常用外部中断库函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SYSCFG_EXTILineConfig</span><span class="params">(<span class="keyword">uint8_t</span> EXTI_PortSourceGPIOx, <span class="keyword">uint8_t</span> EXTI_PinSourcex)</span></span>;<span class="comment">//设置IO口与中断线的映射关系</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI_Init</span><span class="params">(EXTI_InitTypeDef* EXTI_InitStruct)</span></span>;<span class="comment">//初始化中断线：触发方式等</span></span><br><span class="line"><span class="function">ITStatus <span class="title">EXTI_GetITStatus</span><span class="params">(<span class="keyword">uint32_t</span> EXTI_Line)</span></span>;<span class="comment">//判断中断线中断状态，是否发生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI_ClearITPendingBit</span><span class="params">(<span class="keyword">uint32_t</span> EXTI_Line)</span></span>;<span class="comment">//清除中断线上的中断标志位</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);<span class="comment">//使能SYSCFG时钟,非常重要，在使用外部中断的时候一定要先使能SYSCFG时钟</span></span><br></pre></td></tr></table></figure><p><strong>EXTI_Init函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI_Init</span><span class="params">(EXTI_InitTypeDef* EXTI_InitStruct)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint32_t</span> EXTI_Line;   <span class="comment">//指定要配置的中断线           </span></span><br><span class="line">  EXTIMode_TypeDef EXTI_Mode;   <span class="comment">//模式：事件 OR中断</span></span><br><span class="line">  EXTITrigger_TypeDef EXTI_Trigger;<span class="comment">//触发方式：上升沿/下降沿/双沿触发</span></span><br><span class="line">  FunctionalState EXTI_LineCmd;  <span class="comment">//使能 OR失能</span></span><br><span class="line">&#125;EXTI_InitTypeDef;</span><br></pre></td></tr></table></figure><p><strong>外部中断的一般配置步骤：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);<span class="comment">//1.使能SYSCFG时钟</span></span><br><span class="line">GPIO_Init();<span class="comment">//2.初始化IO口为输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SYSCFG_EXTILineConfig</span><span class="params">()</span></span>;<span class="comment">//设置IO口与中断线的映射关系</span></span><br><span class="line">EXTI_Init();<span class="comment">//初始化线上中断，设置触发条件等</span></span><br><span class="line">NVIC_Init();<span class="comment">//配置中断分组（NVIC），并使能中断</span></span><br><span class="line">EXTIx_IRQHandler();<span class="comment">//编写中断服务函数</span></span><br><span class="line">EXTI_ClearITPendingBit();<span class="comment">//清除中断标志位</span></span><br></pre></td></tr></table></figure><p>按键硬件连接：</p><p><img src="https://s3.ax1x.com/2020/12/16/r1v9pj.png" alt="r1v9pj.png" /></p><p><strong>外部中断实验：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;beep.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;exti.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//中断优先级分组2</span></span><br><span class="line">delay_init(<span class="number">168</span>);</span><br><span class="line">LED_Init();</span><br><span class="line">BEEP_Init();</span><br><span class="line">EXTIX_Init();<span class="comment">//外部中断初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//exti.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;beep.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI0_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//按下WKUP键LED0反转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(WK_UP==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED0=!LED0;</span><br><span class="line">&#125;</span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI2_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//按下KEY2键LED1反转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(KEY_2==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED1=!LED1;</span><br><span class="line">&#125;</span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//按下KEY1键蜂鸣器反转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(KEY_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">BEEP=!BEEP;</span><br><span class="line">&#125;</span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI4_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//按下KEY0键LED0，1都反转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(KEY_0==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED0=!LED0;</span><br><span class="line">LED1=!LED1;</span><br><span class="line">&#125;</span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//exti.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTIX_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitTypeDef_Structure;<span class="comment">//定义初始化结构体</span></span><br><span class="line">EXTI_InitTypeDef EXTI_InitTypeDef_Structure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);<span class="comment">//使能SYSCFG时钟</span></span><br><span class="line"></span><br><span class="line">KEY_Init();<span class="comment">//初始化key对应GPIO</span></span><br><span class="line">SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE,EXTI_PinSource2);</span><br><span class="line">SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE,EXTI_PinSource3);</span><br><span class="line">SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE,EXTI_PinSource4);</span><br><span class="line">SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);</span><br><span class="line"></span><br><span class="line">EXTI_InitTypeDef_Structure.EXTI_Line=EXTI_Line2|EXTI_Line3|EXTI_Line4;</span><br><span class="line">EXTI_InitTypeDef_Structure.EXTI_LineCmd=ENABLE;</span><br><span class="line">EXTI_InitTypeDef_Structure.EXTI_Mode=EXTI_Mode_Interrupt;</span><br><span class="line">EXTI_InitTypeDef_Structure.EXTI_Trigger=EXTI_Trigger_Falling;</span><br><span class="line">EXTI_Init(&amp;EXTI_InitTypeDef_Structure);</span><br><span class="line"></span><br><span class="line">EXTI_InitTypeDef_Structure.EXTI_Line=EXTI_Line0;</span><br><span class="line">EXTI_InitTypeDef_Structure.EXTI_LineCmd=ENABLE;</span><br><span class="line">EXTI_InitTypeDef_Structure.EXTI_Mode=EXTI_Mode_Interrupt;</span><br><span class="line">EXTI_InitTypeDef_Structure.EXTI_Trigger=EXTI_Trigger_Rising;</span><br><span class="line">EXTI_Init(&amp;EXTI_InitTypeDef_Structure);<span class="comment">//初始化按键对应GPIO的EXTI</span></span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannel=EXTI0_IRQn;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelPreemptionPriority=<span class="number">1</span>;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitTypeDef_Structure);</span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannel=EXTI2_IRQn;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelPreemptionPriority=<span class="number">2</span>;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitTypeDef_Structure);</span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannel=EXTI3_IRQn;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span>;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitTypeDef_Structure);</span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannel=EXTI4_IRQn;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelPreemptionPriority=<span class="number">4</span>;</span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitTypeDef_Structure);<span class="comment">//中断优先级初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基本定时器原理"><a class="markdownIt-Anchor" href="#基本定时器原理"></a> 基本定时器原理</h2><p><strong>定时器功能：</strong> 定时、输出比较、输入捕获、互补输出；</p><p><strong>定时器分类：</strong> 基本定时器、通用定时器、高级定时器；</p><p><strong>定时器资源：</strong> 407有2个高级定时器、10个通用定时器、2个基本定时器</p><p><strong>各个定时器特性：</strong></p><p><a href="https://imgchr.com/i/r7E4u6"><img src="https://s3.ax1x.com/2020/12/28/r7E4u6.png" alt="r7E4u6.png" /></a></p><p><strong>基本定时器特点：</strong></p><ul><li>计数器16bit，只能向上计数，只有TIM6和TIM7</li><li>没有外部的GPIO，是内部资源，只能用来定时</li><li>时钟来自PCLK1，可实现1~65536分频</li></ul><p><strong>基本定时器功能框图：</strong></p><p><a href="https://imgchr.com/i/r7meqP"><img src="https://s3.ax1x.com/2020/12/28/r7meqP.png" alt="r7meqP.png" /></a></p><p>分三个部分：1.时钟源，2.控制器，3.计数器</p><p>时钟源来自RCC的TIMx_CLK (属于内部的CK_INT)</p><p><strong>TIMx_CLK怎么看是多少：</strong></p><p><a href="https://imgchr.com/i/r7nnyR"><img src="https://s3.ax1x.com/2020/12/28/r7nnyR.jpg" alt="r7nnyR.jpg" /></a></p><p>先看定时器挂在哪个时钟上，基本定时器是挂载在APB1上的，分频系数是4，168/4=42M，如果分频系数是1，则总线时钟就等于APB1，如果分频系数不是1，则乘以2，这里分频系数是4，所以是乘以2，得到TIMx_CLK时钟是42*2=84M</p><p>控制器用于控制定时器的：复位、使能、计数、触发DAC，涉及到的寄存器为：CR1/2、DIER、EGR、SR；</p><p><strong>定时器最主要的就是时基部分：</strong> 包括 预分频器、计数器、自动重装载寄存器</p><p><strong>预分频器：16位的预分频器TIMx_PSC对内部时钟CK_INT进行分频之后，得到计数器时钟CK_CNT=CK_PSC/PSC+1</strong></p><p><strong>计数器CNT在计数器时钟的驱动下开始计数，计数一次的时间为1/CK_CNT</strong></p><p><strong>计数器、自动重装载寄存器：</strong> 定时器使能(CEN 置 1)后，计数器 CNT在CK_CNT 驱动下向上计数，当 TIMx_CNT 值与 TIMx_ARR 的设定值相等时就自动生成事件并 TIMx_CNT 自动清零，然后自动重新开始计数，如此重复以上过程</p><p><strong>影子寄存器：</strong> PSC和ARR都有影子寄存器，功能框图上有个影子<br />影子寄存器的存在<strong>起到一个缓冲的作用</strong> ，用户值-&gt;寄存器-&gt;影子寄存器-&gt;起作用，如果不使用影子寄存器则用户值在写到寄存器之后则里面起作用<br />ARR影子，TIMx_CR1:APRE位控制</p><p><strong>如何实现定时0.5s：</strong></p><p>方法：先固定一个值再求另一个值，一般让频率分频后=10^nHz，然后计数器的值就比较容易看，比如让频率为10KHz</p><p>PSC = 8400-1，定时器频率=84M/(PSC+1)=10000HZ<br />ARR = 4999，从0计数到4999，则计了5000次<br />T = 5000 /  10000 = 0.5S</p><h2 id="基本定时器中断实验"><a class="markdownIt-Anchor" href="#基本定时器中断实验"></a> 基本定时器中断实验</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f4xx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LED_Init();</span><br><span class="line">TIMX_Init();</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//timx.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMX_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitTypeDef_Structure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitTypeDef_Structure;</span><br><span class="line"></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//TIM_TimeBaseInitTypeDef_Structure.TIM_ClockDivision=  //基本定时器没有外部时钟分频因子，不用设置</span></span><br><span class="line"><span class="comment">//TIM_TimeBaseInitTypeDef_Structure.TIM_CounterMode=TIM_CounterMode_Up;//基本定时器只能向上计数，默认就是向上，不用设置</span></span><br><span class="line">TIM_TimeBaseInitTypeDef_Structure.TIM_Period=<span class="number">5000</span><span class="number">-1</span>;<span class="comment">//设置自动重装载值</span></span><br><span class="line">TIM_TimeBaseInitTypeDef_Structure.TIM_Prescaler=<span class="number">8400</span><span class="number">-1</span>;<span class="comment">//设置预分频因子</span></span><br><span class="line"><span class="comment">//TIM_TimeBaseInitTypeDef_Structure.TIM_RepetitionCounter=//基本定时器没有重复计数器，只有高级定时器有，不用设置</span></span><br><span class="line">TIM_TimeBaseInit(TIM7,&amp;TIM_TimeBaseInitTypeDef_Structure);<span class="comment">//初始化定时器</span></span><br><span class="line"></span><br><span class="line">TIM_ITConfig(TIM7,TIM_IT_Update,ENABLE); <span class="comment">//使能定时器中断</span></span><br><span class="line">TIM_Cmd(TIM7,ENABLE); <span class="comment">//使能定时器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannel=TIM7_IRQn; <span class="comment">//设置中断源</span></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelPreemptionPriority=<span class="number">0x01</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelSubPriority=<span class="number">0x03</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitTypeDef_Structure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM7_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM7,TIM_IT_Update)==SET)</span><br><span class="line">&#123;</span><br><span class="line">LED0=!LED0;</span><br><span class="line">LED1=!LED1;</span><br><span class="line">&#125;</span><br><span class="line">TIM_ClearITPendingBit(TIM7,TIM_IT_Update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通用定时器原理"><a class="markdownIt-Anchor" href="#通用定时器原理"></a> 通用定时器原理</h2><p>STM32F40x系列总共最多有<strong>14个定时器，12个16位，2个32位（只有通用定时器有）</strong> ；</p><p><strong>三种定时器区别：</strong></p><table><thead><tr><th style="text-align:center"><strong>定时器种类</strong></th><th style="text-align:center"><strong>位数</strong></th><th style="text-align:center"><strong>计数器模式</strong></th><th style="text-align:center"><strong>产生DMA请求</strong></th><th style="text-align:center"><strong>捕获/比较通道</strong></th><th style="text-align:center"><strong>互补输出</strong></th><th style="text-align:center"><strong>特殊应用场景</strong></th></tr></thead><tbody><tr><td style="text-align:center">高级定时器  （TIM1,TIM8)</td><td style="text-align:center">16</td><td style="text-align:center">向上，向下，向上/下</td><td style="text-align:center">可以</td><td style="text-align:center">4</td><td style="text-align:center">有</td><td style="text-align:center">带可编程死区的互补输出</td></tr><tr><td style="text-align:center">通用定时器（TIM2,TIM5）</td><td style="text-align:center">32</td><td style="text-align:center">向上，向下，向上/下</td><td style="text-align:center">可以</td><td style="text-align:center">4</td><td style="text-align:center">无</td><td style="text-align:center">通用。定时计数，PWM输出，输入捕获，输出比较</td></tr><tr><td style="text-align:center">通用定时器（TIM3,TIM4）</td><td style="text-align:center">16</td><td style="text-align:center">向上，向下，向上/下</td><td style="text-align:center">可以</td><td style="text-align:center">4</td><td style="text-align:center">无</td><td style="text-align:center">通用。定时计数，PWM输出，输入捕获，输出比较</td></tr><tr><td style="text-align:center">通用定时器（TIM9~TIM14）</td><td style="text-align:center">16</td><td style="text-align:center">向上</td><td style="text-align:center">没有</td><td style="text-align:center">2</td><td style="text-align:center">无</td><td style="text-align:center">通用。定时计数，PWM输出，输入捕获，输出比较</td></tr><tr><td style="text-align:center">基本定时器  (TIM6,TIM7)</td><td style="text-align:center">16</td><td style="text-align:center">向上，向下，向上/下</td><td style="text-align:center">可以</td><td style="text-align:center">0</td><td style="text-align:center">无</td><td style="text-align:center">主要应用于驱动DAC</td></tr></tbody></table><p><strong>通用定时器功能特点：</strong></p><ul><li>16 /32 位向上、向下、向上/向下(中心对齐)计数模式，自动装载计数器（TIMx_CNT）</li><li>16 位可编程(可以实时修改)预分频器(TIMx_PSC)，计数器时钟频率的分频系数 为 1～65535 之间的任意数值</li><li>4 个独立通道（TIMx_CH1~4），这些通道可以用来作为： 输入捕获 ，输出比较，PWM 生成(边缘或中间对齐模式) ，单脉冲模式输出</li><li>可使用外部信号（TIMx_ETR）控制定时器和定时器互连（可以用 1 个定时器控制另外一个定时器）的同步电路</li></ul><p><strong>产生中断/DMA的条件：</strong></p><ul><li>更新：计数器溢出，计数器初始化；</li><li>触发事件(计数器启动、停止、初始化或者由内部/外部触发计数)</li><li>输入捕获</li><li>输出比较</li><li>支持针对定位的增量(正交)编码器和霍尔传感器电路</li><li>触发输入作为外部时钟或者按周期的电流管理</li></ul><p><strong>通用定时器可以被用于：</strong> 测量输入信号的脉冲长度(输入捕获)或者产生输出波形(输出比较和 PWM)等</p><p>STM32 的每个通用定时器都是完全独立的，没有互相共享的任何资源；</p><p>计数器模式：向上计数，向下计数，中心对齐，图形表示</p><p><a href="https://imgchr.com/i/r5neij"><img src="https://s3.ax1x.com/2020/12/27/r5neij.png" alt="r5neij.png" /></a></p><p>定时器框图</p><p><a href="https://imgchr.com/i/r5uJnf"><img src="https://s3.ax1x.com/2020/12/27/r5uJnf.jpg" alt="r5uJnf.jpg" /></a></p><p>计数器时钟有8种选择</p><p>更新事件：将预载寄存器的内容写入影子寄存器（通过自动重载位是否被使能来决定），不使用影子寄存器则立即，使用则在每次更新事件发生时</p><p>产生更新事件的条件：</p><ul><li>当计数器上溢或者下溢时</li><li>当循环计数器计数值为0时（TIM1）</li><li>通过软件设置UG（Update Generation）位</li></ul><p>更新事件的请求源可以从下面选择</p><ul><li>URS=1 仅当计数器到达上溢/下溢时，将发出更新请求</li><li>URS=0 计数器的上溢/下溢、更新位的设置或从模式控制器产生的更新，将发出更新请求</li></ul><h2 id="通用定时器中断实验"><a class="markdownIt-Anchor" href="#通用定时器中断实验"></a> 通用定时器中断实验</h2><p>计数器时钟可以由下列时钟源提供：</p><ul><li>内部时钟(CK_INT)</li><li>外部时钟模式1：外部输入脚(TIx)</li><li>外部时钟模式2：外部触发输入(ETR) (仅适用TIM2,3,4)</li><li>内部触发输入(ITRx)：使用一个定时器作为另一个定时器的预分频器，如可以配置一个定时器Timer1而作为另一个定时器Timer2的预分频器</li></ul><p><strong>内部时钟选择：</strong> 除非APB1的分频系数是1，否则通用定时器的时钟等于APB1时钟的2倍；</p><p>计数器模式：通用定时器可以向上计数、向下计数、向上向下双向计数模式；</p><p>常用寄存器：</p><ul><li>计数器当前值寄存器CNT</li><li>预分频寄存器TIMx_PSC</li><li>自动重装载寄存器（TIMx_ARR)</li><li>控制寄存器1（TIMx_CR1）</li><li>DMA中断使能寄存器（TIMx_DIER）</li></ul><p><strong>常用库函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在stm32f4xx_tim.c/.h中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM_TimeBaseInit</span><span class="params">(TIM_TypeDef* TIMx,TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)</span></span>;<span class="comment">//定时器参数初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM_Cmd</span><span class="params">(TIM_TypeDef* TIMx, FunctionalState NewState)</span></span>;<span class="comment">//定时器使能函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM_ITConfig</span><span class="params">(TIM_TypeDef* TIMx, <span class="keyword">uint16_t</span> TIM_IT, FunctionalState NewState)</span></span>;<span class="comment">//定时器中断使能</span></span><br><span class="line"><span class="comment">//几个状态标志位获取和清除函数</span></span><br><span class="line"><span class="function">FlagStatus <span class="title">TIM_GetFlagStatus</span><span class="params">(TIM_TypeDef* TIMx, <span class="keyword">uint16_t</span> TIM_FLAG)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM_ClearFlag</span><span class="params">(TIM_TypeDef* TIMx, <span class="keyword">uint16_t</span> TIM_FLAG)</span></span>;</span><br><span class="line"><span class="function">ITStatus <span class="title">TIM_GetITStatus</span><span class="params">(TIM_TypeDef* TIMx, <span class="keyword">uint16_t</span> TIM_IT)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM_ClearITPendingBit</span><span class="params">(TIM_TypeDef* TIMx, <span class="keyword">uint16_t</span> TIM_IT)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>定时器中断实现步骤：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB1PeriphClockCmd();<span class="comment">//1.使能定时器时钟</span></span><br><span class="line">TIM_TimeBaseInit();<span class="comment">//2.初始化定时器，配置ARR,PSC</span></span><br><span class="line">NVIC_Init();<span class="comment">//3.开启定时器中断，配置NVIC</span></span><br><span class="line">TIM_Cmd();<span class="comment">//4.使能定时器</span></span><br><span class="line">TIMx_IRQHandler();<span class="comment">//5.编写中断服务函数</span></span><br></pre></td></tr></table></figure><p><strong>实验代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f4xx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LED_Init();</span><br><span class="line">TIMX_Init();</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//timx.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMX_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitTypeDef_Structure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitTypeDef_Structure;</span><br><span class="line"></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//TIM_TimeBaseInitTypeDef_Structure.TIM_ClockDivision=</span></span><br><span class="line">TIM_TimeBaseInitTypeDef_Structure.TIM_CounterMode=TIM_CounterMode_Up;</span><br><span class="line">TIM_TimeBaseInitTypeDef_Structure.TIM_Period=<span class="number">5000</span><span class="number">-1</span>;</span><br><span class="line">TIM_TimeBaseInitTypeDef_Structure.TIM_Prescaler=<span class="number">8400</span><span class="number">-1</span>;</span><br><span class="line"><span class="comment">//TIM_TimeBaseInitTypeDef_Structure.TIM_RepetitionCounter=</span></span><br><span class="line">TIM_TimeBaseInit(TIM3,&amp;TIM_TimeBaseInitTypeDef_Structure);</span><br><span class="line"></span><br><span class="line">TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE); </span><br><span class="line">TIM_Cmd(TIM3,ENABLE); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannel=TIM3_IRQn; </span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelPreemptionPriority=<span class="number">0x01</span>; </span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelSubPriority=<span class="number">0x03</span>; </span><br><span class="line">NVIC_InitTypeDef_Structure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitTypeDef_Structure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM3,TIM_IT_Update)==SET)</span><br><span class="line">&#123;</span><br><span class="line">LED0=!LED0;</span><br><span class="line">LED1=!LED1;</span><br><span class="line">&#125;</span><br><span class="line">TIM_ClearITPendingBit(TIM3,TIM_IT_Update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级定时器实验"><a class="markdownIt-Anchor" href="#高级定时器实验"></a> 高级定时器实验</h2><h2 id="pwm输出实验"><a class="markdownIt-Anchor" href="#pwm输出实验"></a> PWM输出实验</h2><p>PWM输出配置过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.使能定时器14和相关IO口时钟。</span></span><br><span class="line">RCC_APB1PeriphClockCmd();<span class="comment">//使能定时器14时钟</span></span><br><span class="line">RCC_AHB1PeriphClockCmd ();<span class="comment">//使能GPIOF时钟</span></span><br><span class="line"><span class="comment">//2.初始化IO口为复用功能输出</span></span><br><span class="line">GPIO_Init();</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;<span class="comment">//复用功能</span></span><br><span class="line"><span class="comment">//3.GPIOF复用映射到定时器</span></span><br><span class="line">GPIO_PinAFConfig(GPIOF,GPIO_PinSource9,GPIO_AF_TIM14); </span><br><span class="line"><span class="comment">//4.初始化定时器：ARR,PSC等：</span></span><br><span class="line">TIM_TimeBaseInit();</span><br><span class="line"><span class="comment">//初始化输出比较参数</span></span><br><span class="line">TIM_OC1Init();</span><br><span class="line"><span class="comment">//6.使能预装载寄存器 </span></span><br><span class="line">TIM_OC1PreloadConfig(TIM14, TIM_OCPreload_Enable); </span><br><span class="line"><span class="comment">//7.使能自动重装载的预装载寄存器允许位</span></span><br><span class="line">TIM_ARRPreloadConfig(TIM14,ENABLE);</span><br><span class="line"><span class="comment">//8.使能定时器。</span></span><br><span class="line"><span class="comment">//9.不断改变比较值CCRx，达到不同的占空比效果</span></span><br><span class="line">TIM_SetCompare1();</span><br></pre></td></tr></table></figure><h2 id="输入捕获实验"><a class="markdownIt-Anchor" href="#输入捕获实验"></a> 输入捕获实验</h2><h2 id="tft-lcd显示实验"><a class="markdownIt-Anchor" href="#tft-lcd显示实验"></a> TFT LCD显示实验</h2><p>几个常用的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCD_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//初始化LCD</span></span><br><span class="line">void LCD_Clear(u16 color)；//清屏填充色</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCD_ShowChar</span><span class="params">(u16 x,u16 y,u8 num,u8 size,u8 mode)</span></span>;<span class="comment">//显示字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCD_ShowxNum</span><span class="params">(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode)</span></span>;<span class="comment">//显示数字</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCD_ShowString</span><span class="params">(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)</span></span>;<span class="comment">//显示字符串</span></span><br><span class="line"></span><br><span class="line">POINT_COLOR=RED;<span class="comment">//画笔颜色设置红色   </span></span><br></pre></td></tr></table></figure><p>实验代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lcd.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> u8 x=<span class="number">0</span>;</span><br><span class="line">u8 lcd_id[<span class="number">12</span>];</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">delay_init(<span class="number">168</span>);     </span><br><span class="line">uart_init(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">LED_Init();  </span><br><span class="line"> LCD_Init();          </span><br><span class="line">POINT_COLOR=RED;<span class="comment">//画笔颜色设置红色   </span></span><br><span class="line"><span class="built_in">sprintf</span>((<span class="keyword">char</span>*)lcd_id,<span class="string">&quot;LCD ID:%04X&quot;</span>,lcddev.id);</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">switch</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:LCD_Clear(WHITE);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:LCD_Clear(BLACK);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:LCD_Clear(BLUE);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:LCD_Clear(RED);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:LCD_Clear(MAGENTA);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:LCD_Clear(GREEN);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:LCD_Clear(CYAN);<span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:LCD_Clear(YELLOW);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:LCD_Clear(BRRED);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:LCD_Clear(GRAY);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:LCD_Clear(LGRAY);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:LCD_Clear(BROWN);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">POINT_COLOR=RED;  </span><br><span class="line">LCD_ShowString(<span class="number">30</span>,<span class="number">40</span>,<span class="number">210</span>,<span class="number">24</span>,<span class="number">24</span>,<span class="string">&quot;Explorer STM32F4&quot;</span>);</span><br><span class="line">LCD_ShowString(<span class="number">30</span>,<span class="number">70</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="number">16</span>,<span class="string">&quot;TFTLCD TEST&quot;</span>);</span><br><span class="line">LCD_ShowString(<span class="number">30</span>,<span class="number">90</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="number">16</span>,<span class="string">&quot;ATOM@ALIENTEK&quot;</span>);</span><br><span class="line"> LCD_ShowString(<span class="number">30</span>,<span class="number">110</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="number">16</span>,lcd_id); </span><br><span class="line">LCD_ShowString(<span class="number">30</span>,<span class="number">130</span>,<span class="number">200</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="string">&quot;2014/5/4&quot;</span>);       </span><br><span class="line">  x++;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">12</span>)x=<span class="number">0</span>;</span><br><span class="line">LED0=!LED0; </span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="485通信实验"><a class="markdownIt-Anchor" href="#485通信实验"></a> 485通信实验</h2><h2 id="i2c实验"><a class="markdownIt-Anchor" href="#i2c实验"></a> I2C实验</h2><h2 id="mpu6050实验"><a class="markdownIt-Anchor" href="#mpu6050实验"></a> MPU6050实验</h2><h2 id="spi实验"><a class="markdownIt-Anchor" href="#spi实验"></a> SPI实验</h2><h2 id="24g无线通信实验"><a class="markdownIt-Anchor" href="#24g无线通信实验"></a> 2.4G无线通信实验</h2><h2 id="oled显示实验"><a class="markdownIt-Anchor" href="#oled显示实验"></a> OLED显示实验</h2><p>几个常用的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void OLED_Init(void)；//初始化OLED</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Refresh_Gram</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//更新显存到LCD,每次更新显存数据就调用该函数来显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span></span>;<span class="comment">//显示数字，x，y为起点坐标，num是要显示的数字，len表示数字的位数，size表示字体大小</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowString</span><span class="params">(u8 x,u8 y,<span class="keyword">const</span> u8 *p,u8 size)</span></span>;<span class="comment">//显示字符串，x，y为起点坐标，size表示字体大小，p是字符串首地址</span></span><br></pre></td></tr></table></figure><p>实验代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">u8 t=<span class="number">0</span>;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">delay_init(<span class="number">168</span>);     </span><br><span class="line">uart_init(<span class="number">115200</span>);</span><br><span class="line">LED_Init();</span><br><span class="line"> OLED_Init();</span><br><span class="line">    OLED_ShowString(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;ALIENTEK&quot;</span>,<span class="number">24</span>);  </span><br><span class="line">OLED_ShowString(<span class="number">0</span>,<span class="number">24</span>, <span class="string">&quot;0.96&#x27; OLED TEST&quot;</span>,<span class="number">16</span>);  </span><br><span class="line"> OLED_ShowString(<span class="number">0</span>,<span class="number">40</span>,<span class="string">&quot;ATOM 2014/5/4&quot;</span>,<span class="number">12</span>);  </span><br><span class="line"> OLED_ShowString(<span class="number">0</span>,<span class="number">52</span>,<span class="string">&quot;ASCII:&quot;</span>,<span class="number">12</span>);  </span><br><span class="line"> OLED_ShowString(<span class="number">64</span>,<span class="number">52</span>,<span class="string">&quot;CODE:&quot;</span>,<span class="number">12</span>);  </span><br><span class="line">OLED_Refresh_Gram();</span><br><span class="line">t=<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(<span class="number">36</span>,<span class="number">52</span>,t,<span class="number">12</span>,<span class="number">1</span>);</span><br><span class="line">OLED_ShowNum(<span class="number">94</span>,<span class="number">52</span>,t,<span class="number">3</span>,<span class="number">12</span>);</span><br><span class="line">OLED_Refresh_Gram();        </span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="string">&#x27;~&#x27;</span>)t=<span class="string">&#x27; &#x27;</span>;  </span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">LED0=!LED0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="can实验"><a class="markdownIt-Anchor" href="#can实验"></a> CAN实验</h2><h2 id="硬件随机数发生器"><a class="markdownIt-Anchor" href="#硬件随机数发生器"></a> 硬件随机数发生器</h2><p>STM32F4自带了硬件随机数发生器（RNG），RNG处理器是一个以连续模拟噪声为基础的随机数发生器，在主机读数时<strong>提供一个32位的随机数</strong> ；</p><p>两个连续的随机数的间隔为<strong>40个PLL48CLK时钟信号周期</strong> ；</p><p>通过监控RNG熵来标识异常行为；</p><p>可以禁止来降低功耗；</p><p>STM32F4的随机数发生器（RNG）采用模拟电路实现，此电路产生馈入线性反馈移位寄存器 (RNG_LFSR) 的种子，用于生成 32 位随机数；</p><p>该模拟电路由几个环形振荡器组成，振荡器的输出进行异或运算以产生种子，RNG_LFSR 由专用时钟 (PLL48CLK) 按恒定频率提供时钟信息，因此<strong>随机数质量与 HCLK 频率无关</strong> 。当将大量种子引入RNG_LFSR后，RNG_LFSR 的内容会传入数据寄存器 (RNG_DR)。</p><p>同时，系统会监视模拟种子和专用时钟 PLL48CLK，当种子上出现异常序列，或PLL48CLK时钟频率过低时，可以由RNG_SR寄存器的对应位读取到，如果<strong>设置了中断</strong> ，则在检测到错误时，还<strong>可以产生中断</strong></p><p><strong>随机数发生器框图：</strong></p><p><a href="https://imgchr.com/i/ry226g"><img src="https://s3.ax1x.com/2020/12/23/ry226g.png" alt="ry226g.png" /></a></p><p><strong>RNG寄存器：</strong></p><ol><li>控制寄存器RNG_CR</li><li>状态寄存器RNG_SR</li><li>数据寄存器RNG_DR</li></ol><p>RNG库函数（在stm32f4xx_rng.h/stm32f4xx_rng.c）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RNG_DeInit</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//复位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RNG_Cmd</span><span class="params">(FunctionalState NewState)</span></span>;<span class="comment">//使能RNG</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">RNG_GetRandomNumber</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//获取随机数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RNG_ITConfig</span><span class="params">(FunctionalState NewState)</span></span>;</span><br><span class="line"><span class="function">FlagStatus <span class="title">RNG_GetFlagStatus</span><span class="params">(<span class="keyword">uint8_t</span> RNG_FLAG)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RNG_ClearFlag</span><span class="params">(<span class="keyword">uint8_t</span> RNG_FLAG)</span></span>;</span><br><span class="line"><span class="function">ITStatus <span class="title">RNG_GetITStatus</span><span class="params">(<span class="keyword">uint8_t</span> RNG_IT)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RNG_ClearITPendingBit</span><span class="params">(<span class="keyword">uint8_t</span> RNG_IT)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="窗口看门狗实验"><a class="markdownIt-Anchor" href="#窗口看门狗实验"></a> 窗口看门狗实验</h2><p>之所以称为窗口就是因为其喂狗时间是一个有上下限的范围内(窗口），可以通过设定相关寄存器，设定其上限时间（下限固定），喂狗的时间不能过早也不能过晚，而独立看门狗限制喂狗时间在0-x内，x由相关寄存器决定。喂狗的时间不能过晚；</p><p>STM32F的窗口看门狗中有一个<strong>7位的递减计数器T[6:0]</strong> ，它会在出现下述<strong>2种情况之一时产生看门狗复位：</strong></p><ol><li>当喂狗的时候如果计数器的值大于某一设定数值W[6:0]时，此设定数值在WWDG_CFR寄存器定义；</li><li>当计数器的数值从0x40减到0x3F时【T6位跳变到0】；</li></ol><p>如果启动了看门狗并且允许中断，当递减计数器等于0x40时产生早期唤醒中断（EWI),它可以用于喂狗以避免WWDG复位；</p><p><strong>窗口看门狗超时时间：</strong></p><p><strong>为什么要窗口看门狗？</strong></p><p>对于一般的看门狗，程序可以在它产生复位前的任意时刻刷新看门狗，但这有一个隐患，有可能程序跑乱了又跑回到正常的地方，或跑乱的程序正好执行了刷新看门狗操作，这样的情况下一般的看门狗就检测不出来了；</p><p>如果使用窗口看门狗，程序员可以根据程序正常执行的时间设置刷新看门狗的一个时间窗口，保证不会提前刷新看门狗也不会滞后刷新看门狗，这样可以检测出程序没有按照正常的路径运行非正常地跳过了某些程序段的情况</p><p><strong>窗口看门狗其他注意事项：</strong></p><ol><li>上窗口值W[6:0]必须大于下窗口值0x40。否则就无窗口了；</li><li>窗口看门狗时钟来源PCLK1（APB1总线时钟）分频后；</li></ol><p><strong>常用寄存器：</strong></p><p><strong>窗口看门狗配置过程：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB1PeriphClockCmd();<span class="comment">//1.使能看门狗时钟</span></span><br><span class="line">WWDG_SetPrescaler();<span class="comment">//2.设置分频系数</span></span><br><span class="line">WWDG_SetWindowValue();<span class="comment">//3.设置上窗口值</span></span><br><span class="line">WWDG_EnableIT();<span class="comment">//4.开启提前唤醒中断并分组(可选)</span></span><br><span class="line">NVIC_Init();</span><br><span class="line">WWDG_Enable();<span class="comment">//5.使能看门狗</span></span><br><span class="line">WWDG_SetCounter();<span class="comment">//6.喂狗</span></span><br><span class="line">WWDG_IRQHandler();<span class="comment">//7.编写中断服务函数</span></span><br></pre></td></tr></table></figure><h2 id="独立看门狗实验"><a class="markdownIt-Anchor" href="#独立看门狗实验"></a> 独立看门狗实验</h2><p>由于单片机的工作常常会受到来自外界电磁场的干扰，造成程序的跑飞，而陷入死循环，程序的正常运行被打断，由单片机控制的系统无法继续工作，会造成整个系统的陷入停滞状态，发生不可预料的后果，<strong>用于监测单片机程序运行状态的模块或者芯片</strong> ，俗称“看门狗”(watchdog)</p><p><strong>看门狗解决的问题：</strong> 在启动正常运行的时候，系统不能复位，在系统跑飞（程序异常执行）的情况，系统复位，程序重新执行；</p><p>STM32内置两个看门狗，两个看门狗设备（独立看门狗/窗口看门狗)可以用来检测和解决由软件错误引起的故障，当计数器达到给定的超时值时，触发一个<br />中断（仅适用窗口看门狗）或者产生系统复位；</p><p><strong>独立看门狗（IWDG)由专用的低速时钟（LSI)驱动</strong> ，即使主时钟发生故障它仍有效，独立看门狗适合应用于需要看门狗作为一个在主程序之外 能够完全独立工</p><p>作，并且<strong>对时间精度要求低的场合</strong> ；</p><p><strong>窗口看门狗由从APB1时钟分频后得到时钟驱动</strong> ，通过可配置的时间窗口来检测应用程序非正常的过迟或过早操作，窗口看门狗最适合那些<strong>要求看门狗在精确计时窗口起作用的程序</strong> ；</p><p><strong>独立看门狗功能描述：<strong>在键值寄存器</strong>（IWDG_KR)中写入0xCCCC</strong> ，开始启用独立看门狗。此时计数器开始从其复位值0xFFF递减，当计数器值计数<strong>到尾值0x000时会产生一个复位信号（IWDG_RESET)</strong> 。<br />无论何时，只要<strong>在键值寄存器IWDG_KR中写入0xAAAA（通常说的喂狗）</strong> , 自动重装载寄存器IWDG_RLR的值就会重新加载到计数器，从而避免看门狗复位。<br />如果程序异常，就无法正常喂狗，从而系统复位；</p><p><strong>相关寄存器：</strong></p><ul><li>键值寄存器IWDG_KR: 0~15位有效，只写寄存器，读出值为0x0000，软件必须以一定时间间隔写入0xAAAA，否则，计数值为0时，看门狗会产生复位</li><li>预分频寄存器IWDG_PR：0~2位有效，具有写保护功能，要操作先取消写保护，读值时要保证状态寄存器的PVU位为0，读值才有效</li><li>重装载寄存器IWDG_RLR：0~11位有效，具有写保护功能，要操作先取消写保护，只有当状态寄存器的RVU位为0时，才能对寄存器进行修改，读出的值才有效</li><li>状态寄存器IWDG_SR：0~1位有效，RVU为1表示重装载值的更新正在进行中，更新结束会由硬件清零，为0时才能修改重装载寄存器的值，PVU则控制预分频寄存器，和RVU逻辑一样；</li></ul><p>独立看门狗超时时间：</p><p><strong>IWDG独立看门狗操作库函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_WriteAccessCmd</span><span class="params">(<span class="keyword">uint16_t</span> IWDG_WriteAccess)</span></span>;<span class="comment">//取消写保护：0x5555使能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_SetPrescaler</span><span class="params">(<span class="keyword">uint8_t</span> IWDG_Prescaler)</span></span>;<span class="comment">//设置预分频系数：写PR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_SetReload</span><span class="params">(<span class="keyword">uint16_t</span> Reload)</span></span>;<span class="comment">//设置重装载值：写RLR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_ReloadCounter</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//喂狗：写0xAAAA到KR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_Enable</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//使能看门狗：写0xCCCC到KR</span></span><br><span class="line"><span class="function">FlagStatus <span class="title">IWDG_GetFlagStatus</span><span class="params">(<span class="keyword">uint16_t</span> IWDG_FLAG)</span></span>;<span class="comment">//状态：重装载/预分频 更新</span></span><br></pre></td></tr></table></figure><p><strong>独立看门狗操作步骤：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IWDG_WriteAccessCmd();<span class="comment">//1.取消寄存器写保护</span></span><br><span class="line">IWDG_SetPrescaler();<span class="comment">//2.设置独立看门狗的预分频系数，确定时钟</span></span><br><span class="line">IWDG_SetReload();<span class="comment">//3.设置看门狗重装载值，确定溢出时间</span></span><br><span class="line">IWDG_Enable();<span class="comment">//4.使能看门狗</span></span><br><span class="line">IWDG_ReloadCounter();<span class="comment">//5.应用程序喂狗</span></span><br></pre></td></tr></table></figure><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><h2 id="待机唤醒实验"><a class="markdownIt-Anchor" href="#待机唤醒实验"></a> 待机唤醒实验</h2><p>很多单片机有低功耗模式，STM32也不例外，在系统或者电源复位后，微控制器出于运行状态之下，HCLK为CPU提供时钟，内核执行代码，当CPU不需要继续运行时，可以利用多种低功耗模式来节省功耗，例如等待某个事件触发；</p><p><strong>STM32的3种低功耗模式：</strong></p><ol><li>睡眠模式：内核停止，外设如NVIC，系统时钟Systick仍运行；</li><li>停止模式：所有时钟都已停止。1.8V内核电源工作，PLL,HIS和HSE RC振荡器功能禁止，寄存器和SRAM内容保留；</li><li>待机模式：1.8V内核电源关闭，只有备份寄存器和待机电路维持供电，寄存器和SRAM内容全部丢失。实现最低功耗；</li></ol><p><strong>STM32F4的3种低功耗模式：</strong></p><p><a href="https://imgchr.com/i/rcIkDK"><img src="https://s3.ax1x.com/2020/12/24/rcIkDK.png" alt="rcIkDK.png" /></a></p><p><strong>STM32F4的待机模式：</strong></p><p><a href="https://imgchr.com/i/rcIhKx"><img src="https://s3.ax1x.com/2020/12/24/rcIhKx.png" alt="rcIhKx.png" /></a></p><p>待机模式理想状态下，只需要2.2uA电流。停机模式下典型电流为350uA；</p><p>对于使能了RTC闹钟中断或RTC周期性唤醒等中断的时候，进入待机模式前，必须按如下操作处理:</p><ol><li>禁止RTC中断（ALRAIE、ALRBIE、WUTIE、TAMPIE和TSIE等)；</li><li>清零对应中断标志位；</li><li>清除PWR唤醒(WUF)标志（通过设置PWR_CR的CWUF位实现)；</li><li>重新使能RTC对应中断；</li><li>进入低功耗模式；</li><li>在有用到RTC相关中断的时候，必须按以上步骤执行之后，才可以进入待机模式，否则可能无法唤醒；</li></ol><p><strong>低功耗操作函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件：stm32f4xx_pwr.c  / stm32f4xx_pwr.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWR_EnterSTOPMode</span><span class="params">()</span></span>;<span class="comment">//进入停机模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWR_EnterSTANDBYMode</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//进入待机模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWR_WakeUpPinCmd</span><span class="params">(FunctionalState NewState)</span></span>;<span class="comment">//使能Wakeup引脚唤醒</span></span><br><span class="line"><span class="function">FlagStatus <span class="title">PWR_GetFlagStatus</span><span class="params">(<span class="keyword">uint32_t</span> PWR_FLAG)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWR_ClearFlag</span><span class="params">(<span class="keyword">uint32_t</span> PWR_FLAG)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件： core_cm4.h</span></span><br><span class="line">__WFI() ;</span><br><span class="line">__WFE() ;</span><br></pre></td></tr></table></figure><p><strong>待机唤醒配置步骤：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.使能电源时钟,因为要配置电源控制寄存器，所以必须先使能电源时钟</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);</span><br><span class="line"><span class="comment">//2.RTC相关处理：关闭RTC相关中断</span></span><br><span class="line"><span class="comment">//3.设置WK_UP引脚作为唤醒源,设置PWR_CSR的EWUP位，使能WK_UP用于将CPU从待机模式唤醒。</span></span><br><span class="line">PWR_WakeUpPinCmd(ENABLE);  <span class="comment">//使能唤醒管脚功能</span></span><br><span class="line"><span class="comment">//4.设置SLEEPDEEP位，设置PDDS位，执行WFI指令，进入待机模式</span></span><br><span class="line">void PWR_EnterSTANDBYMode(void)；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米手机刷机</title>
      <link href="2017/09/05/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%88%B7%E6%9C%BA/"/>
      <url>2017/09/05/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%88%B7%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2><ol><li>已解锁小米手机一部；<ul><li>解锁点击<a href="http://www.miui.com/unlock/index.html">申请解锁</a></li><li>通过申请后下载解锁工具进行解锁</li></ul></li><li>电脑一台；</li><li>驱动已安装好；</li><li>刷机包<ul><li>线刷包下载地址<a href="https://www.miui.com/shuaji-393.html">官网下载</a>；</li><li>卡刷包下载地址<a href="http://www.miui.com/download.html">官网下载</a>；</li><li>第三方包可以从智友，移动叔叔等论坛下载；</li></ul></li><li>资料备份好<ul><li>可以通过自带备份功能备份；</li><li>其他方式备份；</li></ul></li><li>刷机工具miflash<ul><li>下载地址同线刷包下载地址</li></ul></li></ol><h2 id="开始刷机"><a class="markdownIt-Anchor" href="#开始刷机"></a> 开始刷机</h2><h3 id="卡刷"><a class="markdownIt-Anchor" href="#卡刷"></a> 卡刷</h3><ol><li>将卡刷包放进内存；</li><li>进入recovery模式；<ul><li>长按电源键+音量加键</li></ul></li><li>双请，比较大的版本更新需要三清；</li><li>根据提示选择刷机包刷机；</li><li>重启，需等待较长时间。</li></ol><h2 id="线刷"><a class="markdownIt-Anchor" href="#线刷"></a> 线刷</h2><ol><li>打开线刷工具miflash；</li><li>选择好刷机包（需要解压）；</li><li>手机进入fastboot模式<ul><li>长按电源键+音量减键</li></ul></li><li>连接手机，点刷新，选择设备，清除哪些东西，选择好后开始刷机；</li><li>重启。</li></ol><h2 id="三方包卡刷"><a class="markdownIt-Anchor" href="#三方包卡刷"></a> 三方包卡刷</h2><ol><li>刷入三方recovery；<ul><li><a href="https://www.twrp.me/">Twrp官网下载</a>对应机型的recovery</li><li>下载并解压三方recovery刷入工具<a href="https://pan.baidu.com/s/1KXoVnBUhdA0bxGQh8GI6Og">点击下载</a>，提取码grlb</li><li>用文本编辑器打开recovery-twrp一键刷入工具，将set rec_img=recovery-TWRP-3.3.1-0529-REDMI_K20PRO-CN-wzsx150.img，“=”后面的内容改为从官网下载的recovery的名字，保存</li><li>手机进入fastboot模式连接，再运行recovery-twrp一键刷入工具选择刷入</li></ul></li><li>刷入magisk框架root，如果不root，重启手机，刷入的recovery就会没了</li><li>其他步骤跟官方卡刷一样，将刷机包放到手机存储里，进入recovery模式选择刷入。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10局域网文件共享手机访问</title>
      <link href="2017/08/03/Win10%E5%B1%80%E5%9F%9F%E7%BD%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%89%8B%E6%9C%BA%E8%AE%BF%E9%97%AE/"/>
      <url>2017/08/03/Win10%E5%B1%80%E5%9F%9F%E7%BD%91%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%89%8B%E6%9C%BA%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>关于通过win10电脑使用局域网共享文件，手机访问一直提示权限不足，今天终于找到了解决方法。</p><h2 id="电脑端设置"><a class="markdownIt-Anchor" href="#电脑端设置"></a> 电脑端设置</h2><ol><li><p>选择要共享的硬盘/U盘/移动硬盘等，鼠标右键选择授予访问权限-&gt;高级共享；</p></li><li><p>点击高级共享，勾选共享此文件夹，点确定，也可以点权限设置用户权限，默认只有读权限；</p></li><li><p>点密码保护下面的网络和共享中心进行设置；</p></li><li><p>进入计算机管理，可鼠标右键桌面此电脑图标选择管理打开</p></li><li><p>选择本地用户和组，鼠标右键选择新建用户，填好用户名和明码；</p></li><li><p>再刚刚新建的用户处，鼠标右键选择设置密码，会弹出提示窗口，选择继续；</p></li><li><p>设置好密码，至此电脑端的设置完成；</p></li></ol><h2 id="手机端设置"><a class="markdownIt-Anchor" href="#手机端设置"></a> 手机端设置</h2><p>以ios设备为例</p><ol><li><p>打开有关软件，以FE文件管理为例；</p></li><li><p>点击右上角+号，选择Windows，往下拉，再网络邻居下选择你的电脑名字的选项，选择注册的用户</p></li><li><p>弹出设置账号密码选项，将电脑端设置的账号密码输入进去后选择保存&amp;登录；</p></li><li><p>至此手机端设置完成，以后可以在FE文件管理应用首页就可以进入浏览共享的文件了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 文件共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GL-iNeT MT300v2路由器原厂固件刷入SSR</title>
      <link href="2017/07/16/GL-iNeT%20MT300v2%E8%B7%AF%E7%94%B1%E5%99%A8%E5%8E%9F%E5%8E%82%E5%9B%BA%E4%BB%B6%E5%88%B7%E5%85%A5SSR/"/>
      <url>2017/07/16/GL-iNeT%20MT300v2%E8%B7%AF%E7%94%B1%E5%99%A8%E5%8E%9F%E5%8E%82%E5%9B%BA%E4%BB%B6%E5%88%B7%E5%85%A5SSR/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h2><p>下载基于openwrt的ssr客户端，<a href="https://pan.baidu.com/s/1rJcwYu0PbGFTtqPLbmj_2A">mt300v2专版ssr</a>，提取码501b；</p><p>winscp，用于传文件；</p><p>xshell等远程连接工具；</p><h2 id="刷入"><a class="markdownIt-Anchor" href="#刷入"></a> 刷入</h2><ol><li><p>打开winscp，选中scp协议，主机名填路由器地址，端口号22，用户名密码使用root账户密码；</p></li><li><p>解压下载的ssr客户端，得到两个文件，一般使用luci-app-shadowsocksR_1.2.1_all这个，GFW版是黑名单版的，将这个文件上传到路由器的/tmp文件夹；</p></li><li><p>使用xshel连接路由器，类似winscp连接，协议要选择ssh，其余选项一样；</p></li><li><p>连接好后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">opkg install luci-app-shadowsocksR_1.2.1_all.ipk</span><br></pre></td></tr></table></figure></li><li><p>如果错误，电脑需要联网执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br></pre></td></tr></table></figure></li></ol><p>后再执行安装；</p><ol start="6"><li>安装好后就可以进入路由器管理界面，选择高级进入openwrt管理，选择服务下拉就有ssr了；</li></ol><h2 id="qa"><a class="markdownIt-Anchor" href="#qa"></a> Q&amp;A</h2><p>进入ssr显示Failed to execute arcombine dispatcher target for entry …解决办法：</p><p>用xhell连接路由器，用vim分别打开</p><p>/usr/lib/lua/luci/model/cbi/shadowsocksr/client.lua<br />/usr/lib/lua/luci/model/cbi/shadowsocksr/client-config.lua</p><p>在26行附近,<br />将local arp_table = luci.sys.net.arptable() or {}<br />修改为local arp_table = luci.ip.neighbors()即可。</p>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> MT300v2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓SSR热点共享（免流）</title>
      <link href="2017/07/11/%E5%AE%89%E5%8D%93SSR%E7%83%AD%E7%82%B9%E5%85%B1%E4%BA%AB%EF%BC%88%E5%85%8D%E6%B5%81%EF%BC%89/"/>
      <url>2017/07/11/%E5%AE%89%E5%8D%93SSR%E7%83%AD%E7%82%B9%E5%85%B1%E4%BA%AB%EF%BC%88%E5%85%8D%E6%B5%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="关于粉色飞机"><a class="markdownIt-Anchor" href="#关于粉色飞机"></a> 关于粉色飞机</h2><p>粉色飞机SSR客户端只能实现手机自身科学上网，那要怎样开热点共享给电脑等其他设备呢，一种通过安卓手机共享的方法：</p><h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><ol><li>一台已root的安卓手机；</li><li>安装RE文件管理；</li><li>安装busyboxpro；</li><li>下载蓝飞机<a href="https://pan.baidu.com/s/1l7qLZJLXhCVqUAdAaddWOA">sussr</a>，提取码8bcd。</li></ol><h2 id="手机上配置"><a class="markdownIt-Anchor" href="#手机上配置"></a> 手机上配置</h2><ol><li>打开busybox，加载到100%后点安装；</li><li>打开RE文件管理，将下载文件解压到/system/xbin；</li><li>文本编辑器打开setting.ini，vpsconf项填入ssr；</li><li>在vps文件夹下新建文件ssr.txt；</li><li>将ssr链接拷贝到ssr.txt文件中；</li><li>设置sussr整个文件夹权限为0777；</li><li><a href="http://xn--vpsSSR-kp7it6ds47bjhxbvar4ppp8du9zccmwalnbo71c.sh">运行vps文件夹下的SSR链接转换.sh</a>；</li><li>查看ssr.txt内容是否转换成功，</li><li>编辑ssr.txt，将host前的#删除，host后修改成自己混线参数；</li><li>再次设置sussr文件夹的权限为0777；</li><li>打开sussr文件夹，运行start.sh就成功了；</li><li>打开浏览器，百度或其他搜索网站搜ip，查看当前ip，是否为ssr服务器的ip；</li><li>打开手机热点就可以共享了。</li></ol><h2 id="注意的问题"><a class="markdownIt-Anchor" href="#注意的问题"></a> 注意的问题</h2><ol><li>手机必须root；</li><li>每次设置了ssr.txt文件内容或其他文件，都要重新设置权限为0777；</li><li>设置权限为整个文件夹及子目录文件，RE文件管理下，选择文件-&gt;设置文件权限，上面三排全勾上，下面的不应用到子目录必须去掉勾。</li></ol><h2 id="关于免流"><a class="markdownIt-Anchor" href="#关于免流"></a> 关于免流</h2><ol><li>准备手机卡的免流混淆参数，没有混淆参数的可以搜索，比如大王卡等卡的混淆参数，网上有现成的；</li><li>网上没有的可以自己抓包，下载抓包软件，打开抓包软件，打开免流的应用执行一些免流操作，等待抓包一段时间，查看记录的内容，一般host后面的为需要的混淆参数；</li><li>有混淆参数后就可以设置配置文件ssr.txt下的混淆参数了；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7删除多余内核</title>
      <link href="2017/07/10/Centos7%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E5%86%85%E6%A0%B8/"/>
      <url>2017/07/10/Centos7%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<p>Centos更新内核后，开机的启动项就会增加更新的内核选项，同时会保留旧的内核选项，看着不舒服，如何删除旧的内核及选项:</p><ol><li><p>打开终端，查看当前使用的内核；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure></li><li><p>查看所有内核选项；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep kernel</span><br></pre></td></tr></table></figure></li><li><p>进入root模式，删除多余内核；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove 多余内核</span><br></pre></td></tr></table></figure></li><li><p>重新编译引导；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></li><li><p>重启；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 6</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 卡在waiting for unattended-upgr to exit</title>
      <link href="2017/06/16/Ubuntu%20%E5%8D%A1%E5%9C%A8waiting%20for%20unattended-upgr%20to%20exit%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>2017/06/16/Ubuntu%20%E5%8D%A1%E5%9C%A8waiting%20for%20unattended-upgr%20to%20exit%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>需要删除以下几个lock file就OK了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/apt/lists/lock</span><br><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux达人养成计划2</title>
      <link href="2017/04/15/Linux%E8%BE%BE%E4%BA%BA%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%922/"/>
      <url>2017/04/15/Linux%E8%BE%BE%E4%BA%BA%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%922/</url>
      
        <content type="html"><![CDATA[<ol><li>df 查看磁盘分区使用情况<ul><li>-l仅显示本地磁盘(默认)</li><li>-h以1024进制显示容量</li></ul></li><li>分区：mbr分区最多四个主分区，扩展分区不能存储数据，只能添加逻辑分区；</li><li>必须对磁盘进行分区，格式化，挂载后才能使用；</li><li>MBR分区命令fdisk；</li><li>fdisk<ul><li>-l 显示分区情况</li><li>fdisk 需要分区的磁盘</li></ul></li><li>GPT分区最多可以有128个主分区，并且突破了每个分区不能大于2TB的限制；</li><li>GPT分区命令parted；</li><li>GPT分区不适合x86系统；</li><li>分区格式化使用mkfs命令；</li><li>mkfs.exts /dev/sdb*或者mkfs -t /dev/sdb…  都是格式化，效果是一样的；</li><li>扩展分区不能格式化，只能格式化下面的逻辑分区；</li><li>分好区后必须挂载分区才能使用，一般挂载到/mnt分区；</li><li>先建立文件夹，mkdir -p /mnt/tal      mount /dev/sdb1 /mnt/tal；</li><li>卸载umount /mnt/tal；</li><li>系统自动挂载需要修改/etc/fstab文件；</li><li>添加swap分区：<ul><li>建立一个普通分区</li><li>修改分区类型的16进制编码</li><li>格式化交换分区 mkswap</li><li>启用交换分区 swapon</li></ul></li><li>free命令查看swap分区状况；</li><li>swapoff停止swap分区；</li><li>用户和用户组的概念；</li><li>/etc/group存储当前系统中所有用户组的信息；</li><li>root用户组号0，用户创建的从500号开始；</li><li>/etc/gshadow存储当前系统中用户组的密码信息；</li><li>/etc/passwd存储当前系统中所有用户的信息；</li><li>/etc/gshadow存储当前系统中用户的密码信息；</li><li>groupadd sexy 创建用户组sexy；</li><li>groupmod -n market sexy 修改sexy用户组名为market；</li><li>groupmod -g 668 market 修改用户组编号为668；</li><li>groupadd -g 888 boss 创建用户组号为888用户组名为boss的用户组；</li><li>groupdel market删除market用户组；</li><li>删除用户组前需先删除组中的用户；</li><li>useradd -g sexy sdf 向sexy用户组中添加用户sdf；</li><li>创建用户未指定用户目录系统会在home目录下创建用户名同名文件夹；</li><li>useradd -d /home/*** tang 添加用户并指定用户目录；</li><li>usermod -c dgdzmx sdf 修改用户注释；</li><li>usermod -l cls sdf 修改sdf用户名为cls；</li><li>usermod -d /home/cls cls修改cls的个人文件夹路径为cls；</li><li>usermod -g sexy tan’g 将tang用户切换到sexy用户组；</li><li>userdel jzmb删除用户未删除个人文件，要删除文件加上-r参数；</li><li>创建文件nologin可以禁止除root外所有用户登录，touch /etc/nologin；</li><li>passwd -l cls 锁定cls用户；</li><li>passwd -u cls 解锁用cls户；</li><li>passwd -d cls 清除cls用户密码；</li><li>用户可以同时属于多个组，一个主要组，一个附属组；</li><li>gpasswd -a cls boss为cls添加附属组boss；</li><li>newgrp boss切换到附属组boss，需要输入组密码；</li><li>gpasswd -a cls boss删除cls的附属用户组boss；</li><li>useradd -g group1 -G group2，group3.。。。。。添加用户指定为用户组group1并添加附属组2，3.。。。；</li><li>设置tang组密码gpassws tang；</li><li>su 用户名，切换用户；</li><li>whoami我是谁；</li><li>id 用户名  显示指定用户信息；</li><li>groups 用户名显示用户所在的用户组；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim常用插件</title>
      <link href="2017/04/10/Vim%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>2017/04/10/Vim%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="vim常用插件"><a class="markdownIt-Anchor" href="#vim常用插件"></a> Vim常用插件</h2><h3 id="插件管理"><a class="markdownIt-Anchor" href="#插件管理"></a> 插件管理</h3><p>可在<a href="https://vimawesome.com/">vimAwesome</a>找自己想要的插件，以下使用vim-plug插件管理器安装及管理插件，vim-plug安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/<span class="built_in">autoload</span>/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><p>安装完成后再配置文件加上，中间添加安装插件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call plug</span><br><span class="line"><span class="comment">#begin(&#x27;~/.vim/plugged&#x27;)</span></span><br><span class="line"></span><br><span class="line">call plug</span><br><span class="line"><span class="comment">#end()</span></span><br></pre></td></tr></table></figure><p>配置文件是在用户目录下的.vimrc文件，为隐藏文件，可以通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>看到隐藏文件，再重新加载.vim文件，在vim中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:PlugInstall</span><br></pre></td></tr></table></figure><p>等待插件完成安装。</p><h3 id="常用插件列表"><a class="markdownIt-Anchor" href="#常用插件列表"></a> 常用插件列表</h3><table><thead><tr><th>插件</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/chxuan/cpp-mode">cpp-mode</a></td><td>提供生成函数实现、函数声明/实现跳转、.h .cpp切换等功能</td></tr><tr><td><a href="https://github.com/chxuan/vim-edit">vim-edit</a></td><td>方便的文本编辑插件</td></tr><tr><td><a href="https://github.com/chxuan/change-colorscheme">change-colorscheme</a></td><td>快速切换主题</td></tr><tr><td><a href="https://github.com/chxuan/prepare-code">prepare-code</a></td><td>新建文件时，生成预定义代码片段</td></tr><tr><td><a href="https://github.com/mhinz/vim-startify">vim-startify</a></td><td>vim开始页面</td></tr><tr><td><a href="https://github.com/majutsushi/tagbar">tagbar</a></td><td>显示类/方法/变量</td></tr><tr><td><a href="https://github.com/junegunn/vim-plug">vim-plug</a></td><td>插件管理软件</td></tr><tr><td><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a></td><td>基于语义的自动补全插件，支持C/C++、C#、Python、PHP等语言</td></tr><tr><td><a href="https://github.com/scrooloose/nerdtree">NerdTree</a></td><td>代码资源管理器</td></tr><tr><td><a href="https://github.com/tiagofumo/vim-nerdtree-syntax-highlight">vim-nerdtree-syntax-highlight</a></td><td>NerdTree文件类型高亮</td></tr><tr><td><a href="https://github.com/Xuyuanp/nerdtree-git-plugin">nerdtree-git-plugin</a></td><td>NerdTree显示git状态</td></tr><tr><td><a href="https://github.com/ryanoasis/vim-devicons">vim-devicons</a></td><td>显示文件类型图标</td></tr><tr><td><a href="https://github.com/vim-airline/vim-airline">Airline</a></td><td>状态栏美化插件</td></tr><tr><td><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></td><td>自动补全引号、圆括号、花括号等</td></tr><tr><td><a href="https://github.com/Yggdroot/LeaderF">LeaderF</a></td><td>强大的文件的模糊搜索工具</td></tr><tr><td><a href="https://github.com/mileszs/ack.vim">ack</a></td><td>强大的文本搜索工具</td></tr><tr><td><a href="https://github.com/tpope/vim-surround">vim-surround</a></td><td>自动增加、替换配对符的插件</td></tr><tr><td><a href="https://github.com/tpope/vim-commentary">vim-commentary</a></td><td>快速注释代码插件</td></tr><tr><td><a href="https://github.com/tpope/vim-repeat">vim-repeat</a></td><td>重复上一次操作</td></tr><tr><td><a href="https://github.com/tpope/vim-endwise">vim-endwise</a></td><td>if/end/endif/endfunction补全</td></tr><tr><td><a href="https://github.com/godlygeek/tabular">tabular</a></td><td>代码、注释、表格对齐</td></tr><tr><td><a href="https://github.com/easymotion/vim-easymotion">vim-easymotion</a></td><td>强大的光标快速移动工具，强大到颠覆你的插件观</td></tr><tr><td><a href="https://github.com/haya14busa/incsearch.vim">incsearch.vim</a></td><td>模糊字符搜索插件</td></tr><tr><td><a href="https://github.com/iamcco/markdown-preview.vim">markdown-preview</a></td><td>markdown实时预览</td></tr><tr><td><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></td><td>集成Git</td></tr><tr><td><a href="https://github.com/junegunn/gv.vim">gv</a></td><td>显示git提交记录</td></tr><tr><td><a href="https://github.com/junegunn/vim-slash">vim-slash</a></td><td>优化搜索，移动光标后清除高亮</td></tr><tr><td><a href="https://github.com/Shougo/echodoc.vim">echodoc</a></td><td>补全函数时在命令栏显示函数签名</td></tr><tr><td><a href="https://github.com/terryma/vim-smooth-scroll">vim-smooth-scroll</a></td><td>让翻页更顺畅</td></tr><tr><td><a href="https://github.com/rhysd/clever-f.vim">clever-f.vim</a></td><td>强化f和F键</td></tr><tr><td><a href="https://github.com/rhysd/github-complete.vim">github-complete.vim</a></td><td>Emoji🐶补全</td></tr><tr><td><a href="https://github.com/yianwillis/vimcdoc">vimcdoc</a></td><td>vim中文文档</td></tr></tbody></table><h3 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h3><p>leader键设置为, 打开配置文件快捷键leader键+e</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> 通用设置</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">let mapleader = &quot;</span>,<span class="string">&quot;      &quot;</span> 定义&lt;leader&gt;键</span><br><span class="line"><span class="built_in">set</span> nocompatible         <span class="string">&quot; 设置不兼容原始vi模式</span></span><br><span class="line"><span class="string">filetype on              &quot;</span> 设置开启文件类型侦测</span><br><span class="line">filetype plugin on       <span class="string">&quot; 设置加载对应文件类型的插件</span></span><br><span class="line"><span class="string">set noeb                 &quot;</span> 关闭错误的提示</span><br><span class="line">syntax <span class="built_in">enable</span>            <span class="string">&quot; 开启语法高亮功能</span></span><br><span class="line"><span class="string">syntax on                &quot;</span> 自动语法高亮</span><br><span class="line"><span class="built_in">set</span> t_Co=256             <span class="string">&quot; 开启256色支持</span></span><br><span class="line"><span class="string">set cmdheight=2          &quot;</span> 设置命令行的高度</span><br><span class="line"><span class="built_in">set</span> showcmd              <span class="string">&quot; select模式下显示选中的行数</span></span><br><span class="line"><span class="string">set ruler                &quot;</span> 总是显示光标位置</span><br><span class="line"><span class="built_in">set</span> laststatus=2         <span class="string">&quot; 总是显示状态栏</span></span><br><span class="line"><span class="string">set number               &quot;</span> 开启行号显示</span><br><span class="line"><span class="built_in">set</span> cursorline           <span class="string">&quot; 高亮显示当前行</span></span><br><span class="line"><span class="string">set whichwrap+=&lt;,&gt;,h,l   &quot;</span> 设置光标键跨行</span><br><span class="line"><span class="built_in">set</span> ttimeoutlen=0        <span class="string">&quot; 设置&lt;ESC&gt;键响应时间</span></span><br><span class="line"><span class="string">set virtualedit=block,onemore   &quot;</span> 允许光标出现在最后一个字符的后面</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> 代码缩进和排版</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">set autoindent           &quot;</span> 设置自动缩进</span><br><span class="line"><span class="built_in">set</span> cindent              <span class="string">&quot; 设置使用C/C++语言的自动缩进方式</span></span><br><span class="line"><span class="string">set cinoptions=g0,:0,N-s,(0    &quot;</span> 设置C/C++语言的具体缩进方式</span><br><span class="line"><span class="built_in">set</span> smartindent          <span class="string">&quot; 智能的选择对其方式</span></span><br><span class="line"><span class="string">filetype indent on       &quot;</span> 自适应不同语言的智能缩进</span><br><span class="line"><span class="built_in">set</span> expandtab            <span class="string">&quot; 将制表符扩展为空格</span></span><br><span class="line"><span class="string">set tabstop=4            &quot;</span> 设置编辑时制表符占用空格数</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4         <span class="string">&quot; 设置格式化时制表符占用空格数</span></span><br><span class="line"><span class="string">set softtabstop=4        &quot;</span> 设置4个空格为制表符</span><br><span class="line"><span class="built_in">set</span> smarttab             <span class="string">&quot; 在行和段开始处使用制表符</span></span><br><span class="line"><span class="string">set nowrap               &quot;</span> 禁止折行</span><br><span class="line"><span class="built_in">set</span> backspace=2          <span class="string">&quot; 使用回车键正常处理indent,eol,start等</span></span><br><span class="line"><span class="string">set sidescroll=10        &quot;</span> 设置向右滚动字符数</span><br><span class="line"><span class="built_in">set</span> nofoldenable         <span class="string">&quot; 禁用折叠代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot; 代码补全</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">set</span> wildmenu             <span class="string">&quot; vim自身命名行模式智能补全</span></span><br><span class="line"><span class="string">set completeopt-=preview &quot;</span> 补全时不显示窗口，只显示补全列表</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> 搜索设置</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">set hlsearch            &quot;</span> 高亮显示搜索结果</span><br><span class="line"><span class="built_in">set</span> incsearch           <span class="string">&quot; 开启实时搜索功能</span></span><br><span class="line"><span class="string">set ignorecase          &quot;</span> 搜索时大小写不敏感</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> 缓存设置</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">set nobackup            &quot;</span> 设置不备份</span><br><span class="line"><span class="built_in">set</span> noswapfile          <span class="string">&quot; 禁止生成临时文件</span></span><br><span class="line"><span class="string">set autoread            &quot;</span> 文件在vim之外修改过，自动重新读入</span><br><span class="line"><span class="built_in">set</span> autowrite           <span class="string">&quot; 设置自动保存</span></span><br><span class="line"><span class="string">set confirm             &quot;</span> 在处理未保存或只读文件的时候，弹出确认</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> 编码设置</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">set langmenu=zh_CN.UTF-8</span></span><br><span class="line"><span class="string">set helplang=cn</span></span><br><span class="line"><span class="string">set termencoding=utf-8</span></span><br><span class="line"><span class="string">set encoding=utf8</span></span><br><span class="line"><span class="string">set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot; gvim/macvim设置</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> has(<span class="string">&quot;gui_running&quot;</span>)</span><br><span class="line">    <span class="built_in">set</span> guifont=Droid\ Sans\ Mono\ Nerd\ Font\ Complete:h18 <span class="string">&quot; 设置字体</span></span><br><span class="line"><span class="string">    set guioptions-=m           &quot;</span> 隐藏菜单栏</span><br><span class="line">    <span class="built_in">set</span> guioptions-=T           <span class="string">&quot; 隐藏工具栏</span></span><br><span class="line"><span class="string">    set guioptions-=L           &quot;</span> 隐藏左侧滚动条</span><br><span class="line">    <span class="built_in">set</span> guioptions-=r           <span class="string">&quot; 隐藏右侧滚动条</span></span><br><span class="line"><span class="string">    set guioptions-=b           &quot;</span> 隐藏底部滚动条</span><br><span class="line">    <span class="built_in">set</span> showtabline=0           <span class="string">&quot; 隐藏Tab栏</span></span><br><span class="line"><span class="string">    set guicursor=n-v-c:ver5    &quot;</span> 设置光标为竖线</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> 插件列表</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plug &#x27;chxuan/cpp-mode&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;chxuan/vim-edit&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;chxuan/change-colorscheme&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;chxuan/prepare-code&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;chxuan/tagbar&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;Valloric/YouCompleteMe&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;Yggdroot/LeaderF&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;mileszs/ack.vim&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;easymotion/vim-easymotion&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;haya14busa/incsearch.vim&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;iamcco/mathjax-support-for-mkdp&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;iamcco/markdown-preview.vim&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;jiangmiao/auto-pairs&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;tiagofumo/vim-nerdtree-syntax-highlight&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;godlygeek/tabular&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;tpope/vim-surround&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;tpope/vim-commentary&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;tpope/vim-repeat&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;tpope/vim-endwise&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;octol/vim-cpp-enhanced-highlight&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;ryanoasis/vim-devicons&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;junegunn/vim-slash&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;junegunn/gv.vim&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;kana/vim-textobj-user&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;kana/vim-textobj-indent&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;kana/vim-textobj-syntax&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;kana/vim-textobj-function&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;sgur/vim-textobj-parameter&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;Shougo/echodoc.vim&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;terryma/vim-smooth-scroll&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;rhysd/clever-f.vim&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;rhysd/github-complete.vim&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;vim-scripts/indentpython.vim&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call plug#end()            </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> load vim default plugin</span><br><span class="line">runtime macros/matchit.vim</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 编辑vimrc文件</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;e :edit <span class="variable">$MYVIMRC</span>&lt;cr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 查看vimplus的<span class="built_in">help</span>文件</span><br><span class="line">nnoremap &lt;leader&gt;h :edit ~/.vimplus/help.md&lt;cr&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 打开当前光标所在单词的vim帮助文档</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;H :execute &quot;</span>:<span class="built_in">help</span> <span class="string">&quot; . expand(&quot;</span>&lt;cword&gt;<span class="string">&quot;)&lt;cr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 重新加载vimrc文件</span><br><span class="line">nnoremap &lt;leader&gt;s :<span class="built_in">source</span> <span class="variable">$MYVIMRC</span>&lt;cr&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 安装、更新、删除插件</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;&lt;leader&gt;i :PlugInstall&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;&lt;leader&gt;u :PlugUpdate&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;&lt;leader&gt;c :PlugClean&lt;cr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 打开文件自动定位到最后编辑的位置</span><br><span class="line">autocmd BufReadPost * <span class="keyword">if</span> line(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; 1 &amp;&amp; line(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= line(<span class="string">&quot;$&quot;</span>) | execute <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | endif</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 主题</span></span><br><span class="line"><span class="string">set background=dark</span></span><br><span class="line"><span class="string">let g:onedark_termcolors=256</span></span><br><span class="line"><span class="string">colorscheme onedark</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> airline</span><br><span class="line"><span class="built_in">let</span> g:airline_theme=<span class="string">&quot;onedark&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:airline_powerline_fonts = 1</span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#enabled = 1</span></span><br><span class="line"><span class="keyword">if</span> !exists(<span class="string">&#x27;g:airline_symbols&#x27;</span>)</span><br><span class="line">    <span class="built_in">let</span> g:airline_symbols = &#123;&#125;</span><br><span class="line">endif</span><br><span class="line"><span class="built_in">let</span> g:airline_left_sep = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:airline_left_alt_sep = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:airline_right_sep = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:airline_right_alt_sep = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; cpp-mode</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;y :CopyCode&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;p :PasteCode&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;U :GoToFunImpl&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;silent&gt; &lt;leader&gt;a :Switch&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;&lt;leader&gt;fp :FormatFunParam&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;&lt;leader&gt;if :FormatIf&lt;cr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> change-colorscheme</span><br><span class="line">nnoremap &lt;silent&gt; &lt;F9&gt; :PreviousColorScheme&lt;cr&gt;</span><br><span class="line">inoremap &lt;silent&gt; &lt;F9&gt; &lt;esc&gt; :PreviousColorScheme&lt;cr&gt;</span><br><span class="line">nnoremap &lt;silent&gt; &lt;F10&gt; :NextColorScheme&lt;cr&gt;</span><br><span class="line">inoremap &lt;silent&gt; &lt;F10&gt; &lt;esc&gt; :NextColorScheme&lt;cr&gt;</span><br><span class="line">nnoremap &lt;silent&gt; &lt;F11&gt; :RandomColorScheme&lt;cr&gt;</span><br><span class="line">inoremap &lt;silent&gt; &lt;F11&gt; &lt;esc&gt; :RandomColorScheme&lt;cr&gt;</span><br><span class="line">nnoremap &lt;silent&gt; &lt;F12&gt; :ShowColorScheme&lt;cr&gt;</span><br><span class="line">inoremap &lt;silent&gt; &lt;F12&gt; &lt;esc&gt; :ShowColorScheme&lt;cr&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; prepare-code</span></span><br><span class="line"><span class="string">let g:prepare_code_plugin_path = expand(<span class="variable">$HOME</span> . &quot;</span>/.vim/plugged/prepare-code<span class="string">&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> vim-edit</span><br><span class="line">nnoremap Y :CopyText&lt;cr&gt;</span><br><span class="line">nnoremap D :DeleteText&lt;cr&gt;</span><br><span class="line">nnoremap C :ChangeText&lt;cr&gt;</span><br><span class="line">nnoremap &lt;leader&gt;r :ReplaceTo&lt;space&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; nerdtree</span></span><br><span class="line"><span class="string">nnoremap &lt;silent&gt; &lt;leader&gt;n :NERDTreeToggle&lt;cr&gt;</span></span><br><span class="line"><span class="string">inoremap &lt;silent&gt; &lt;leader&gt;n &lt;esc&gt; :NERDTreeToggle&lt;cr&gt;</span></span><br><span class="line"><span class="string">let g:NERDTreeFileExtensionHighlightFullName = 1</span></span><br><span class="line"><span class="string">let g:NERDTreeExactMatchHighlightFullName = 1</span></span><br><span class="line"><span class="string">let g:NERDTreePatternMatchHighlightFullName = 1</span></span><br><span class="line"><span class="string">let g:NERDTreeHighlightFolders = 1         </span></span><br><span class="line"><span class="string">let g:NERDTreeHighlightFoldersFullName = 1 </span></span><br><span class="line"><span class="string">let g:NERDTreeDirArrowExpandable=&#x27;▷&#x27;</span></span><br><span class="line"><span class="string">let g:NERDTreeDirArrowCollapsible=&#x27;▼&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> YCM</span><br><span class="line"><span class="built_in">let</span> g:ycm_confirm_extra_conf = 0 </span><br><span class="line"><span class="built_in">let</span> g:ycm_error_symbol = <span class="string">&#x27;✗&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_warning_symbol = <span class="string">&#x27;✹&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_seed_identifiers_with_syntax = 1 </span><br><span class="line"><span class="built_in">let</span> g:ycm_complete_in_comments = 1 </span><br><span class="line"><span class="built_in">let</span> g:ycm_complete_in_strings = 1 </span><br><span class="line"><span class="built_in">let</span> g:ycm_server_python_interpreter = <span class="string">&#x27;/usr/bin/python&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_python_binary_path = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">nnoremap &lt;leader&gt;u :YcmCompleter GoToDeclaration&lt;cr&gt;</span><br><span class="line"><span class="string">&quot; 已经使用cpp-mode插件提供的转到函数实现的功能</span></span><br><span class="line"><span class="string">&quot;</span> nnoremap &lt;leader&gt;i :YcmCompleter GoToDefinition&lt;cr&gt; </span><br><span class="line">nnoremap &lt;leader&gt;o :YcmCompleter GoToInclude&lt;cr&gt;</span><br><span class="line">nnoremap &lt;leader&gt;ff :YcmCompleter FixIt&lt;cr&gt;</span><br><span class="line">nmap &lt;F5&gt; :YcmDiags&lt;cr&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; ctags</span></span><br><span class="line"><span class="string">set tags+=/usr/include/tags</span></span><br><span class="line"><span class="string">set tags+=~/.vim/systags</span></span><br><span class="line"><span class="string">set tags+=~/.vim/x86_64-linux-gnu-systags</span></span><br><span class="line"><span class="string">let g:ycm_collect_identifiers_from_tags_files = 1</span></span><br><span class="line"><span class="string">let g:ycm_semantic_triggers =  &#123;</span></span><br><span class="line"><span class="string">  \   &#x27;c&#x27; : [&#x27;-&gt;&#x27;, &#x27;.&#x27;,&#x27;re![_a-zA-z0-9]&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;objc&#x27; : [&#x27;-&gt;&#x27;, &#x27;.&#x27;, &#x27;re!\[[_a-zA-Z]+\w*\s&#x27;, &#x27;re!^\s*[^\W\d]\w*\s&#x27;,</span></span><br><span class="line"><span class="string">  \             &#x27;re!\[.*\]\s&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;ocaml&#x27; : [&#x27;.&#x27;, &#x27;#&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;cpp,objcpp&#x27; : [&#x27;-&gt;&#x27;, &#x27;.&#x27;, &#x27;::&#x27;,&#x27;re![_a-zA-Z0-9]&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;perl&#x27; : [&#x27;-&gt;&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;php&#x27; : [&#x27;-&gt;&#x27;, &#x27;::&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go&#x27; : [&#x27;.&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;ruby&#x27; : [&#x27;.&#x27;, &#x27;::&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;lua&#x27; : [&#x27;.&#x27;, &#x27;:&#x27;],</span></span><br><span class="line"><span class="string">  \   &#x27;erlang&#x27; : [&#x27;:&#x27;],</span></span><br><span class="line"><span class="string">  \ &#125;</span></span><br><span class="line"><span class="string">let g:ycm_semantic_triggers.c = [&#x27;-&gt;&#x27;, &#x27;.&#x27;, &#x27; &#x27;, &#x27;(&#x27;, &#x27;[&#x27;, &#x27;&amp;&#x27;,&#x27;]&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> tagbar</span><br><span class="line"><span class="built_in">let</span> g:tagbar_width = 30</span><br><span class="line">nnoremap &lt;silent&gt; &lt;leader&gt;t :TagbarToggle&lt;cr&gt;</span><br><span class="line">inoremap &lt;silent&gt; &lt;leader&gt;t &lt;esc&gt; :TagbarToggle&lt;cr&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; incsearch.vim</span></span><br><span class="line"><span class="string">map /  &lt;Plug&gt;(incsearch-forward)</span></span><br><span class="line"><span class="string">map ?  &lt;Plug&gt;(incsearch-backward)</span></span><br><span class="line"><span class="string">map g/ &lt;Plug&gt;(incsearch-stay)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> markdown</span><br><span class="line"><span class="built_in">let</span> g:mkdp_auto_start = 0</span><br><span class="line"><span class="string">&quot; Set to 1, Vim will open the preview window on entering the Markdown</span></span><br><span class="line"><span class="string">&quot;</span> buffer.</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:mkdp_auto_open = 1</span><br><span class="line"><span class="string">&quot; Set to 1, Vim will automatically open the preview window when you edit a</span></span><br><span class="line"><span class="string">&quot;</span> Markdown file.</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:mkdp_auto_close = 1</span><br><span class="line"><span class="string">&quot; Set to 1, Vim will automatically close the current preview window when</span></span><br><span class="line"><span class="string">&quot;</span> switching from one Markdown buffer to another.</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:mkdp_refresh_slow = 0</span><br><span class="line"><span class="string">&quot; Set to 1, Vim will just refresh Markdown when saving the buffer or</span></span><br><span class="line"><span class="string">&quot;</span> leaving from insert mode. With default 0, it will automatically refresh</span><br><span class="line"><span class="string">&quot; Markdown as you edit or move the cursor.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let g:mkdp_command_for_global = 0</span></span><br><span class="line"><span class="string">&quot;</span> Set to 1, the MarkdownPreview <span class="built_in">command</span> can be used <span class="keyword">for</span> all files,</span><br><span class="line"><span class="string">&quot; by default it can only be used in Markdown files.</span></span><br><span class="line"><span class="string">let g:mkdp_open_to_the_world = 0</span></span><br><span class="line"><span class="string">&quot;</span> Set to 1, the preview server will be available to others <span class="keyword">in</span> your network.</span><br><span class="line"><span class="string">&quot; By default, the server only listens on localhost (127.0.0.1).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">nmap &lt;silent&gt; &lt;F7&gt; &lt;Plug&gt;MarkdownPreview</span></span><br><span class="line"><span class="string">imap &lt;silent&gt; &lt;F7&gt; &lt;Plug&gt;MarkdownPreview</span></span><br><span class="line"><span class="string">nmap &lt;silent&gt; &lt;F8&gt; &lt;Plug&gt;StopMarkdownPreview</span></span><br><span class="line"><span class="string">imap &lt;silent&gt; &lt;F8&gt; &lt;Plug&gt;StopMarkdownPreview</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> vim-easymotion</span><br><span class="line"><span class="built_in">let</span> g:EasyMotion_smartcase = 1</span><br><span class="line">map &lt;leader&gt;w &lt;Plug&gt;(easymotion-bd-w)</span><br><span class="line">nmap &lt;leader&gt;w &lt;Plug&gt;(easymotion-overwin-w)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; nerdtree-git-plugin</span></span><br><span class="line"><span class="string">let g:NERDTreeIndicatorMapCustom = &#123;</span></span><br><span class="line"><span class="string">    \ &quot;</span>Modified<span class="string">&quot;  : &quot;</span>✹<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    \ &quot;</span>Staged<span class="string">&quot;    : &quot;</span>✚<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    \ &quot;</span>Untracked<span class="string">&quot; : &quot;</span>✭<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    \ &quot;</span>Renamed<span class="string">&quot;   : &quot;</span>➜<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    \ &quot;</span>Unmerged<span class="string">&quot;  : &quot;</span>═<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    \ &quot;</span>Deleted<span class="string">&quot;   : &quot;</span>✖<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    \ &quot;</span>Dirty<span class="string">&quot;     : &quot;</span>✗<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    \ &quot;</span>Clean<span class="string">&quot;     : &quot;</span>✔︎<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    \ &#x27;Ignored&#x27;   : &#x27;☒&#x27;,</span></span><br><span class="line"><span class="string">    \ &quot;</span>Unknown<span class="string">&quot;   : &quot;</span>?<span class="string">&quot;</span></span><br><span class="line"><span class="string">    \ &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> LeaderF</span><br><span class="line">nnoremap &lt;leader&gt;f :LeaderfFile ~&lt;cr&gt;</span><br><span class="line"><span class="built_in">let</span> g:Lf_WildIgnore = &#123;</span><br><span class="line">            \ <span class="string">&#x27;dir&#x27;</span>: [<span class="string">&#x27;.svn&#x27;</span>,<span class="string">&#x27;.git&#x27;</span>,<span class="string">&#x27;.hg&#x27;</span>,<span class="string">&#x27;.vscode&#x27;</span>,<span class="string">&#x27;.wine&#x27;</span>,<span class="string">&#x27;.deepinwine&#x27;</span>,<span class="string">&#x27;.oh-my-zsh&#x27;</span>],</span><br><span class="line">            \ <span class="string">&#x27;file&#x27;</span>: [<span class="string">&#x27;*.sw?&#x27;</span>,<span class="string">&#x27;~$*&#x27;</span>,<span class="string">&#x27;*.bak&#x27;</span>,<span class="string">&#x27;*.exe&#x27;</span>,<span class="string">&#x27;*.o&#x27;</span>,<span class="string">&#x27;*.so&#x27;</span>,<span class="string">&#x27;*.py[co]&#x27;</span>]</span><br><span class="line">            \&#125;</span><br><span class="line"><span class="built_in">let</span> g:Lf_UseCache = 0</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; ack</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;F :Ack!&lt;space&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> echodoc.vim</span><br><span class="line"><span class="built_in">let</span> g:echodoc_enable_at_startup = 1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; tabular</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;l :Tab /\|&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;= :Tab /=&lt;cr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> vim-smooth-scroll</span><br><span class="line">noremap &lt;silent&gt; &lt;c-u&gt; :call smooth_scroll<span class="comment">#up(&amp;scroll, 0, 2)&lt;CR&gt;</span></span><br><span class="line">noremap &lt;silent&gt; &lt;c-d&gt; :call smooth_scroll<span class="comment">#down(&amp;scroll, 0, 2)&lt;CR&gt;</span></span><br><span class="line">noremap &lt;silent&gt; &lt;c-b&gt; :call smooth_scroll<span class="comment">#up(&amp;scroll*2, 0, 4)&lt;CR&gt;</span></span><br><span class="line">noremap &lt;silent&gt; &lt;c-f&gt; :call smooth_scroll<span class="comment">#down(&amp;scroll*2, 0, 4)&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; gv</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;g :GV&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;G :GV!&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;gg :GV?&lt;cr&gt;</span></span><br></pre></td></tr></table></figure><h2 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h2><p>以下是部分快捷键，更详细的快捷键请查阅<a href="https://github.com/chxuan/vimplus/blob/master/help.md">vimplus帮助文档</a>。</p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>,</code></td><td>Leader Key</td></tr><tr><td><code>&lt;leader&gt;n</code></td><td>打开/关闭代码资源管理器</td></tr><tr><td><code>&lt;leader&gt;t</code></td><td>打开/关闭函数列表</td></tr><tr><td><code>&lt;leader&gt;a</code></td><td>.h .cpp 文件切换</td></tr><tr><td><code>&lt;leader&gt;u</code></td><td>转到函数声明</td></tr><tr><td><code>&lt;leader&gt;U</code></td><td>转到函数实现</td></tr><tr><td><code>&lt;leader&gt;o</code></td><td>打开include文件</td></tr><tr><td><code>&lt;leader&gt;y</code></td><td>拷贝函数声明</td></tr><tr><td><code>&lt;leader&gt;p</code></td><td>生成函数实现</td></tr><tr><td><code>&lt;leader&gt;w</code></td><td>单词跳转</td></tr><tr><td><code>&lt;leader&gt;f</code></td><td>搜索~目录下的文件</td></tr><tr><td><code>&lt;leader&gt;F</code></td><td>搜索当前目录下的文本</td></tr><tr><td><code>&lt;leader&gt;g</code></td><td>显示git仓库提交记录</td></tr><tr><td><code>&lt;leader&gt;G</code></td><td>显示当前文件提交记录</td></tr><tr><td><code>&lt;leader&gt;gg</code></td><td>显示当前文件在某个commit下的完整内容</td></tr><tr><td><code>&lt;leader&gt;ff</code></td><td>语法错误自动修复(FixIt)</td></tr><tr><td><code>&lt;c-p&gt;</code></td><td>切换到上一个buffer</td></tr><tr><td><code>&lt;c-n&gt;</code></td><td>切换到下一个buffer</td></tr><tr><td><code>&lt;leader&gt;d</code></td><td>删除当前buffer</td></tr><tr><td><code>&lt;leader&gt;D</code></td><td>删除当前buffer外的所有buffer</td></tr><tr><td><code>vim</code></td><td>运行vim编辑器时,默认启动开始页面</td></tr><tr><td><code>&lt;F5&gt;</code></td><td>显示语法错误提示窗口</td></tr><tr><td><code>&lt;F7&gt;</code></td><td>启用markdown实时预览</td></tr><tr><td><code>&lt;F8&gt;</code></td><td>关闭markdown实时预览</td></tr><tr><td><code>&lt;F9&gt;</code></td><td>显示上一主题</td></tr><tr><td><code>&lt;F10&gt;</code></td><td>显示下一主题</td></tr><tr><td><code>&lt;leader&gt;l</code></td><td>按竖线对齐</td></tr><tr><td><code>&lt;leader&gt;=</code></td><td>按等号对齐</td></tr><tr><td><code>Ya</code></td><td>复制行文本到字母a</td></tr><tr><td><code>Da</code></td><td>剪切行文本到字母a</td></tr><tr><td><code>Ca</code></td><td>改写行文本到字母a</td></tr><tr><td><code>rr</code></td><td>替换文本</td></tr><tr><td><code>&lt;leader&gt;r</code></td><td>全局替换，目前只支持单个文件</td></tr><tr><td><code>gcc</code></td><td>注释代码</td></tr><tr><td><code>gcap</code></td><td>注释段落</td></tr><tr><td><code>vif</code></td><td>选中函数内容</td></tr><tr><td><code>dif</code></td><td>删除函数内容</td></tr><tr><td><code>cif</code></td><td>改写函数内容</td></tr><tr><td><code>vaf</code></td><td>选中函数内容（包括函数名 花括号）</td></tr><tr><td><code>daf</code></td><td>删除函数内容（包括函数名 花括号）</td></tr><tr><td><code>caf</code></td><td>改写函数内容（包括函数名 花括号）</td></tr><tr><td><code>fa</code></td><td>查找字母a，然后再按f键查找下一个</td></tr><tr><td><code>&lt;c-x&gt;&lt;c-o&gt;</code></td><td>Emoji🐶补全</td></tr></tbody></table><h3 id="部分插件说明"><a class="markdownIt-Anchor" href="#部分插件说明"></a> 部分插件说明</h3><p>插件详细说明参考github官方文档。</p><ol><li><p>cpp-mode</p><p><img src="https://s1.ax1x.com/2020/10/02/0lfLQJ.gif" alt="" /></p><ul><li>leader+y 拷贝函数（一般在头文件中拷贝函数原型）；</li><li>leader+p 粘贴函数（一般用在函数实现的cpp文件中），自动加上{}，方便编写函数实现；</li><li>leader+U跳到函数实现，头文件必须和函数实现同名（后缀不同）。</li></ul></li><li><p>vim-edit</p><ul><li>Y  按Y后会进入底行模式输入要拷贝从光标位置到哪那个字母为止，如果该行有多个输入字母会高亮显示，按高亮字母选择到哪个止；</li><li>D 剪贴操作，和Y操作类似；</li><li>C 更改，操作类似，实现剪贴并进入插入模式。</li><li>p/P 粘贴；</li></ul></li><li><p>YouCompleteMe:</p><p>vimplus安装时需要访问外国网站，由于网络原因，可能会失败，安装成功也要1个多小时，ycm插件有200M左右，下载比较耗时，这里有下载好的<a href="https://pan.baidu.com/s/1i481Eeh">YouCompleteMe.tar.gz</a>文件，下载后解压到~/.vim/plugged/目录，并进入YouCompleteMe目录执行./install.py --clang-completer即可安装。</p></li><li><p>NerdTree:</p></li><li><p>change-colorscheme</p><ul><li>F9键切换到上个主题；</li><li>F10键切换到下个主题；</li><li>F11键随机选则一个主题；</li><li>F12键显示当前主题名字；</li></ul><p>如果与系统快捷键有冲突可以自行更改映射。</p></li><li><p>prepare-code</p><ul><li>vim 文件名.后缀，会根据后缀生成预定义代码；</li><li>预定义代码在~/.vim/plugged/prepare-code/snippet/,可自己设置。</li></ul></li><li><p>vim-commentary</p><ul><li>注释当前行按gcc；</li><li>视图模式选中按gc进行注释。</li></ul></li><li><p>vim-easy</p><p>用法1: 跳转到当前光标前后的位置(w/b)</p><p>快捷键<code>&lt;leader&gt;&lt;leader&gt;w</code>(即<code>,,w</code>)和<code>&lt;leader&gt;&lt;leader&gt;b</code>(即<code>,,b</code>)</p><p>助记: <code>word</code> and <code>back</code></p><p>用法2: 搜索跳转(s)</p><p>快捷键<code>&lt;leader&gt;&lt;leader&gt;s</code>(即<code>,,s</code>), 然后输入要搜索的字母, 这个跳转是双向的</p><p>助记: <code>search</code></p><p>用法3: 行级跳转(jk)</p><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map &lt;Leader&gt;&lt;Leader&gt;j &lt;Plug&gt;(easymotion-j)</span><br><span class="line">map &lt;Leader&gt;&lt;Leader&gt;k &lt;Plug&gt;(easymotion-k)</span><br></pre></td></tr></table></figure><p>快捷键: <code>&lt;leader&gt;&lt;leader&gt;j</code>和<code>&lt;leader&gt;&lt;leader&gt;k</code>(即<code>,,j</code>和<code>,,k</code>)</p><p>助记: <code>hjkl</code>不解释</p><p>用法4: 行内跳转(hl)</p><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map &lt;Leader&gt;&lt;leader&gt;h &lt;Plug&gt;(easymotion-linebackward)</span><br><span class="line">map &lt;Leader&gt;&lt;leader&gt;l &lt;Plug&gt;(easymotion-lineforward)</span><br></pre></td></tr></table></figure><p>快捷键<code>&lt;leader&gt;&lt;leader&gt;h</code>和<code>&lt;leader&gt;&lt;leader&gt;l</code>(即<code>,,h</code>和<code>,,l</code>)</p><p>助记: <code>hjkl</code>不解释</p><p>用法5: 重复上一次动作(.)</p><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map &lt;Leader&gt;&lt;leader&gt;. &lt;Plug&gt;(easymotion-repeat)</span><br></pre></td></tr></table></figure><p>快捷键<code>&lt;leader&gt;&lt;leader&gt;.</code></p><p>助记: 同<code>repeat</code>插件….</p></li><li><p>ack:行于系统命令grep的搜索命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ack 搜索关键字 路径 </span><br></pre></td></tr></table></figure></li><li><p>incsearch.vim</p><ul><li><code>/</code>：向下搜索</li><li><code>?</code>：向上搜索</li><li><code>n</code>：跳到下一个搜索值</li><li><code>N</code>：跳到上一个搜索值</li><li><code>*</code>：向下搜索光标所在处字符</li><li><code>#</code>：向上搜索光标所在处字符</li><li><code>&lt;Tab&gt;</code>：跳到下一个搜索值</li><li><code>&lt;S-Tab&gt;</code>：跳到上一个搜索值</li><li><code>&lt;C-j&gt;</code>：滚动到下一个搜索值</li><li><code>&lt;C-k&gt;</code>：滚动到上一个搜索值</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS越狱</title>
      <link href="2017/03/16/IOS%E8%B6%8A%E7%8B%B1/"/>
      <url>2017/03/16/IOS%E8%B6%8A%E7%8B%B1/</url>
      
        <content type="html"><![CDATA[<p>以unc0ver为例，越狱插件商店为cydia。</p><h2 id="开始越狱"><a class="markdownIt-Anchor" href="#开始越狱"></a> 开始越狱</h2><ol><li>下载unc0ver</li><li>打开unc0ver，点越狱，期间可能会重启，如果失败继续点越狱，直到成功；</li></ol><h2 id="常用软件源"><a class="markdownIt-Anchor" href="#常用软件源"></a> 常用软件源</h2><ol><li>雷锋源：<a href="http://apt.abcydia.com/">http://apt.abcydia.com/</a></li><li>Ai-小苹果：<a href="http://apt.cydiabc.top/">http://apt.cydiabc.top/</a></li><li>Alice源：<a href="http://apt.coolstar.xyz/">http://apt.coolstar.xyz/</a></li><li>Cydiakk中文源：<a href="http://apt.cydiakk.com/">http://apt.cydiakk.com/</a></li><li>Cydia贴吧源：<a href="http://apt.cydiaba.cn/">http://apt.cydiaba.cn/</a></li><li>Hack YouriPhone：<a href="http://repo.hackyouriphone.org/">http://repo.hackyouriphone.org/</a></li><li>多米诺骨牌源：<a href="http://apt.wxhbts.com/">http://apt.wxhbts.com/</a></li></ol><h2 id="常用插件"><a class="markdownIt-Anchor" href="#常用插件"></a> 常用插件</h2><ol><li>Springtomize 4</li><li>ios12 helper</li><li>Flex 3</li><li>Filza File</li><li>AFC2</li><li>Appsync Unified</li><li>TinybBanners</li><li>DataMeter</li><li>ConditionlWiFi4</li><li>GoodWiFi</li><li>Liberty Lite</li><li>MiDevice</li><li>SilentRecorder</li><li>电话助手</li><li>CallBar XS</li></ol><h2 id="字体修改"><a class="markdownIt-Anchor" href="#字体修改"></a> 字体修改</h2><ol><li>越狱商店软件源直接下载字体插件，卸载即可恢复原生字体；</li><li>手动替换，从网上下载字体，替换系统字体即可，如想恢复原生字体，下载原生字体替换即可，ios6-12原生字体备份地址<a href="https://pan.baidu.com/s/1jH6Z8SA">点击下载</a>，提取码8h98；</li><li>关于修改字体替换后拨号盘，密码输入等地方字体不变的解决办法：设置语言和地区为其他语言和其他地区，重启手机再换回即可。</li></ol><h2 id="主题修改"><a class="markdownIt-Anchor" href="#主题修改"></a> 主题修改</h2><ol><li>打开cydia下载主题平台，可选择snowboard主题平台或其他平台；</li><li>下载主题资源，可以在cydia下载主题资源插件，也可以网上下载主题资源放到主题文件夹/library/Themes</li><li>打开snowboard打开主题。</li></ol><h2 id="清除越狱环境"><a class="markdownIt-Anchor" href="#清除越狱环境"></a> 清除越狱环境</h2><ol><li>打开unc0ver，点右上角设置；</li><li>打开Restore RootFS选项，其余选项可全部关闭；</li><li>返回主界面，点Restore RootFS；</li><li>等待完成重启，桌面可能还有cydia或其他插件图标，可选择抹除全部内容恢复（慎用）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表的实现（二）（顺序表实现）——数据结构（严蔚敏C语言实现版）</title>
      <link href="2016/12/15/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%88%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AE%9E%E7%8E%B0%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%A5%E8%94%9A%E6%95%8FC%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%89%88%EF%BC%89/"/>
      <url>2016/12/15/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%88%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AE%9E%E7%8E%B0%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%A5%E8%94%9A%E6%95%8FC%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在线性表的实现（一）（顺序表实现）的基础上添加了可以自动增加空间的功能，添加数据时，如果线性表空间已满，则自动增加3个存储空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c 主函数实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SeqList mylist;</span><br><span class="line">ElemType Item;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">1</span>;</span><br><span class="line">Init(&amp;mylist);</span><br><span class="line"><span class="keyword">while</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**************************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [1]  push_back    [2]  push_front  *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [3]  show_list    [4]  pop_back    *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [5]  pop_front    [6]  insert_pos  *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [7]  find         [8]  length      *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [9]  delete_pos   [10]  delete_val *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [11] sort         [12]  resver     *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [13] clear        [14*]  destroy   *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [0]  quit_system                   *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**************************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选项：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;select);</span><br><span class="line"><span class="keyword">if</span> (select==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(select &gt; <span class="number">0</span> &amp;&amp; select &lt;= <span class="number">14</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误,请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字，以-1结束：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">push_back(&amp;mylist, Item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字，以-1结束：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">push_front(&amp;mylist, Item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">show(mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">pop_back(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">pop_front(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入位置的下标：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字，以-1结束输入：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">insert_pos(&amp;mylist, pos, Item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的数的值，以-1结束输入：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = find(mylist, Item);</span><br><span class="line"><span class="keyword">if</span> (tmp &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要查找的数在下标为%d处\n&quot;</span>, find(mylist, Item));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表的长度为%d\n&quot;</span>, length(mylist));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要删除数的下标，以-1结束输入：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos), pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete_pos(&amp;mylist, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要删除数据的值，以-1结束输入&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete_val(&amp;mylist, Item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">sort(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">resver(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">clear(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(mylist.base);</span><br><span class="line">mylist.base = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SeqList.h结构体声明和所有函数的声明</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEQLIST_INT_SIZE 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_SIZE 3</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType *base;</span><br><span class="line"><span class="keyword">int</span> capacicty; </span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(SeqList mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(SeqList *mylist, ElemType Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span><span class="params">(SeqList *mylist,ElemType Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_front</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_pos</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> pos, <span class="keyword">int</span> Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(SeqList mylist, ElemType Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(SeqList mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_pos</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_val</span><span class="params">(SeqList *mylist, ElemType Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resver</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buymem</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SeqList.c所有函数的实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buymem</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ElemType *newbase = <span class="built_in">realloc</span>(mylist-&gt;base, <span class="keyword">sizeof</span>(ElemType)*(mylist-&gt;capacicty + INT_SIZE));</span><br><span class="line"><span class="keyword">if</span> (newbase == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;增加空间失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;base = newbase;</span><br><span class="line">mylist-&gt;capacicty += INT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mylist-&gt;base = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType) * SEQLIST_INT_SIZE);</span><br><span class="line">assert(mylist-&gt;base != <span class="literal">NULL</span>);</span><br><span class="line">mylist-&gt;capacicty = <span class="number">8</span>;</span><br><span class="line">mylist-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(SeqList *mylist, ElemType Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size &gt;= mylist-&gt;capacicty)</span><br><span class="line">&#123;</span><br><span class="line">buymem(mylist,INT_SIZE);</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;base[mylist-&gt;size] = Item;</span><br><span class="line">mylist-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span><span class="params">(SeqList *mylist,ElemType Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size &gt;= mylist-&gt;capacicty)</span><br><span class="line">&#123;</span><br><span class="line">buymem(mylist, INT_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mylist-&gt;size; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">mylist-&gt;base[i + <span class="number">1</span>] = mylist-&gt;base[i];</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;base[<span class="number">0</span>] = Item;</span><br><span class="line">mylist-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(SeqList mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist.size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, mylist.base[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mylist.size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表已为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_front</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表已为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mylist-&gt;size--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mylist-&gt;base[i] = mylist-&gt;base[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_pos</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> pos, <span class="keyword">int</span> Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size &gt;= mylist-&gt;capacicty)</span><br><span class="line">&#123;</span><br><span class="line">buymem(mylist, INT_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= mylist-&gt;size))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的下标位置错误，请重新输入&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mylist-&gt;size; i &gt;= pos; i--)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">mylist-&gt;base[i+<span class="number">1</span>] = mylist-&gt;base[i];</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;base[pos] = Item;</span><br><span class="line">mylist-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(SeqList mylist, ElemType Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist.size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist.base[i] == Item)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(SeqList mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mylist.size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_pos</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= mylist-&gt;size))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的下标位置错误，请重新输入&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; mylist-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mylist-&gt;base[i] = mylist-&gt;base[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_val</span><span class="params">(SeqList *mylist, ElemType Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = find(*mylist, Item);</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到该数值为%d的数，请重新输入&quot;</span>, Item);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">delete_pos(mylist, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表已为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mylist-&gt;size - i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;base[j] &gt; mylist-&gt;base[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">tmp = mylist-&gt;base[j];</span><br><span class="line">mylist-&gt;base[j] = mylist-&gt;base[j + <span class="number">1</span>];</span><br><span class="line">mylist-&gt;base[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resver</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表已为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = mylist-&gt;size - <span class="number">1</span>; i &lt; j; i++, j--)</span><br><span class="line">&#123;</span><br><span class="line">tmp = mylist-&gt;base[i];</span><br><span class="line">mylist-&gt;base[i] = mylist-&gt;base[j];</span><br><span class="line">mylist-&gt;base[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mylist-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表的实现（一）（顺序表实现）——数据结构（严蔚敏C语言实现版）</title>
      <link href="2016/12/12/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AE%9E%E7%8E%B0%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%A5%E8%94%9A%E6%95%8FC%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%89%88%EF%BC%89/"/>
      <url>2016/12/12/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AE%9E%E7%8E%B0%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%A5%E8%94%9A%E6%95%8FC%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>采用函数实现和声明分开，SeqList.h包含结构体声明和所有函数的声明，SeqList.c包含所有函数的实现，main.c主函数实现,代码在vs中测试运行通过，其中部分代码是假设存储的数中没有重复的数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c 主函数实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SeqList mylist;</span><br><span class="line">ElemType Item;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">1</span>;</span><br><span class="line">Init(&amp;mylist);</span><br><span class="line"><span class="keyword">while</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**************************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [1]  push_back    [2]  push_front  *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [3]  show_list    [4]  pop_back    *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [5]  pop_front    [6]  insert_pos  *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [7]  find         [8]  length      *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [9]  delete_pos   [10]  delete_val *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [11] sort         [12]  resver     *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [13] clear        [14*]  destroy   *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* [0]  quit_system                   *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**************************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选项：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;select);</span><br><span class="line"><span class="keyword">if</span> (select==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(select &gt; <span class="number">0</span> &amp;&amp; select &lt;= <span class="number">14</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误,请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字，以-1结束：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">push_back(&amp;mylist, Item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字，以-1结束：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">push_front(&amp;mylist, Item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">show(mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">pop_back(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">pop_front(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入位置的下标：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字，以-1结束输入：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">insert_pos(&amp;mylist, pos, Item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的数的值，以-1结束输入：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = find(mylist, Item);</span><br><span class="line"><span class="keyword">if</span> (tmp &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要查找的数在下标为%d处\n&quot;</span>, find(mylist, Item));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表的长度为%d\n&quot;</span>, length(mylist));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要删除数的下标，以-1结束输入：&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pos), pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete_pos(&amp;mylist, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要删除数据的值，以-1结束输入&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Item), Item != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete_val(&amp;mylist, Item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">sort(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">resver(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">clear(&amp;mylist);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(mylist.base);</span><br><span class="line">mylist.base = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SeqList.h结构体声明和所有函数的声明</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType *base;</span><br><span class="line"><span class="keyword">int</span> capacicty; </span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(SeqList mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(SeqList *mylist, ElemType Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span><span class="params">(SeqList *mylist,ElemType Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_front</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_pos</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> pos, <span class="keyword">int</span> Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(SeqList mylist, ElemType Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(SeqList mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_pos</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_val</span><span class="params">(SeqList *mylist, ElemType Item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resver</span><span class="params">(SeqList *mylist)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(SeqList *mylist)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SeqList.c所有函数的实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mylist-&gt;base = (ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType) * <span class="number">8</span>);</span><br><span class="line">assert(mylist-&gt;base != <span class="literal">NULL</span>);</span><br><span class="line">mylist-&gt;capacicty = <span class="number">8</span>;</span><br><span class="line">mylist-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(SeqList *mylist, ElemType Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size &gt;= mylist-&gt;capacicty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空间已满\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;base[mylist-&gt;size] = Item;</span><br><span class="line">mylist-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span><span class="params">(SeqList *mylist, ElemType Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size &gt;= mylist-&gt;capacicty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空间已满\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mylist-&gt;size; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">mylist-&gt;base[i + <span class="number">1</span>] = mylist-&gt;base[i];</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;base[<span class="number">0</span>] = Item;</span><br><span class="line">mylist-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(SeqList mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist.size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, mylist.base[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mylist.size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表已为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_front</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表已为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mylist-&gt;size--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mylist-&gt;base[i] = mylist-&gt;base[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_pos</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> pos, <span class="keyword">int</span> Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size &gt;= mylist-&gt;capacicty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空间已满\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= mylist-&gt;size))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的下标位置错误，请重新输入&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mylist-&gt;size; i &gt;= pos; i--)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">mylist-&gt;base[i + <span class="number">1</span>] = mylist-&gt;base[i];</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;base[pos] = Item;</span><br><span class="line">mylist-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(SeqList mylist, ElemType Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist.size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist.base[i] == Item)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(SeqList mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mylist.size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_pos</span><span class="params">(SeqList *mylist, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= mylist-&gt;size))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入的下标位置错误，请重新输入&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; mylist-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mylist-&gt;base[i] = mylist-&gt;base[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">mylist-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_val</span><span class="params">(SeqList *mylist, ElemType Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = find(*mylist, Item);</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到该数值为%d的数，请重新输入&quot;</span>, Item);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">delete_pos(mylist, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表已为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mylist-&gt;size - i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;base[j] &gt; mylist-&gt;base[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">tmp = mylist-&gt;base[j];</span><br><span class="line">mylist-&gt;base[j] = mylist-&gt;base[j + <span class="number">1</span>];</span><br><span class="line">mylist-&gt;base[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resver</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mylist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;线性表已为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = mylist-&gt;size - <span class="number">1</span>; i &lt; j; i++, j--)</span><br><span class="line">&#123;</span><br><span class="line">tmp = mylist-&gt;base[i];</span><br><span class="line">mylist-&gt;base[i] = mylist-&gt;base[j];</span><br><span class="line">mylist-&gt;base[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(SeqList *mylist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mylist-&gt;size = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pragma once和ifndef用法和区别</title>
      <link href="2016/10/12/pragma%20once%E5%92%8Cifndef%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
      <url>2016/10/12/pragma%20once%E5%92%8Cifndef%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>为了避免同一个文件被include多次，C/C++中有两种方式，一种是#ifndef方式，</p><p>方式一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SOMEFILE_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SOMEFILE_H__</span></span><br><span class="line">... ... <span class="comment">// 一些声明语句</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line">... ... <span class="comment">// 一些声明语句</span></span><br></pre></td></tr></table></figure><p>在能够支持这两种方式的编译器上，二者并没有太大的区别，但是两者仍然还是有一些细微的区别：</p><p>#ifndef的方式依赖于宏名字不能冲突，这不光可以保证同一个文件不会被包含多次，也能保证内容完全相同的两个文件不会被不小心同时包含。当然，缺点就是如果不同头文件的宏名不小心“撞车”，可能就会导致头文件明明存在，编译器却硬说找不到声明的状况</p><p>#pragma once则由编译器提供保证：同一个文件不会被包含多次。注意这里“同一个文件”是指物理上的一个文件，而不是指内容相同的两个文件。带来的好处 是，你不必再费劲想个宏名了，当然也就不会出现宏名碰撞引发的奇怪问题。对应的缺点就是如果某个头文件有多份拷贝，本方法不能保证他们不被重复包含。当 然，相比宏名碰撞引发的“找不到声明”的问题，重复包含更容易被发现并修正。</p><p>方式一由语言支持所以移植性好，方式二 可以避免名字冲突</p><p>实际上，我们平常包含的#include “stdafx.h”，其中的代码就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;targetver.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是不用担心其中的stdio.h等被重复调用，因为，stdio.h中的内容是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER &gt; 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _INC_STDIO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _INC_STDIO</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu入门笔记</title>
      <link href="2016/09/16/Ubuntu%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2016/09/16/Ubuntu%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>快捷键</strong></p><p>打开终端:ctrl+alt+t</p><p>清屏：ctrl+l；</p><p>在终端退出锁定：ctrl+c</p><p><strong>目录创建规则：</strong></p><ul><li>大小是256</li><li>不能包含特殊字符</li><li>见名知义</li></ul><p><strong>路径</strong>：是反应目录和文件的位置。</p><p><strong>绝对路径</strong>：从根目录开始的路径；</p><p><strong>相对路径</strong>：目标目录相对于当前目录的位置。</p><p>在计算机中一切皆文件。</p><p>Windows中通过扩展名区分文件，Linux可以通过颜色来区分，或通过命令 file 文件名。</p><p><strong>Linux五种文件：</strong></p><ul><li>普通文件</li><li>目录文件</li><li>设备文件</li><li>管道文件</li><li>链接文件</li></ul><p><strong>文件权限：</strong></p><ul><li>r 读</li><li>w 写</li><li>x 执行</li></ul><p>d rwx rwx rwx分三组：</p><p>d 文件类型为文件夹 （d文件夹，-普通文件，c硬件字符设备文件，b硬件块设备文件，s管道文件，l软链接文件）</p><p>第一组：文件的所属用户</p><p>第二组： 用户的所属组</p><p>第三组：其他用户</p><p><strong>常用命令：</strong></p><p>帮助命令：命令名 --help 或 man 命令名</p><p>快捷键：</p><ul><li>tab键智能补全，按两下显示列表</li><li>上下键查看历史命令</li></ul><p>通配符：</p><ul><li>[*]匹配任意多个字符</li><li>[?]匹配一个字符</li><li>[a-z]区间法 匹配a-z的所有字符 只能确定一个字符</li><li>[abcde]穷举法 匹配abcde的所有字符，只能确定一个字符</li></ul><p>ls 查看文件</p><ul><li>-a 查看所有文件不包括隐藏文件</li><li>-all 以列表形式查看所有文件包括隐藏文件快捷方式[ll]</li><li>-l 查看所有文件不包括隐藏文件</li><li>-lh 以列表形式查看所有文件不包括隐藏文件，以1024倍数显示</li></ul><p>cd</p><ul><li>cd 切换到用户主目录</li><li>cd ~ 切换到当前用户主目录</li><li>cd \ 切换到根目录</li><li>cd …切换到上级目录</li><li>cd - 切换到上次目录</li></ul><p>创建目录：</p><ul><li>mkdir 目录名</li><li>mkdir 目录名 -p 递归创建</li></ul><p>删除：</p><p>rm -r 文件夹/文件名</p><p>链接：</p><p>硬链接：</p><ul><li>ln 源文件 链接文件</li></ul><p>软链接：</p><ul><li>ln -s 源文件 链接文件</li></ul><p>硬链接和软链接区别：删除源文件影响和不影响<br />硬链接和拷贝的区别：修改链接文件会不会使源文件改变</p><p>文本搜索：</p><p>grep 参数 搜索内容 文件名</p><ul><li>-n显示行号</li><li>-v反选</li><li>-i忽略大小写</li><li>通配符：[^a] 以a为起始字符，[a&amp;]以a为结尾的字符</li></ul><p>文件搜索：</p><p>find 目录 参数 文件名</p><ul><li>-name 文件名</li><li>-size 大小</li></ul><p>归档</p><ul><li>tar cvf 文件名.tar 文件1 文件2 目录1 目录2</li></ul><p>解归档</p><ul><li>tar xvf 文件名.tar -C 路径</li></ul><p>压缩</p><ul><li>gzip 文件名.tar 生成一个.tar.gz文件</li></ul><p>解压缩</p><ul><li>gzip -d 文件名.tar.gz 生成一个.tar文件</li></ul><p>一步归档压缩：</p><ul><li>tar -czvf 文件名.tar.gz 文件1 文件2 目录1 目录2</li></ul><p>一步解归档压缩</p><ul><li>tar -xzvf 文件名.tar.gz</li></ul><p>bzip2压缩：</p><ul><li>tar -cjvf 文件名.tar.bz2 文件1 文件2 目录1 目录2</li></ul><p>bzip2解压缩：</p><ul><li>tar -xjvf 文件名.tar.bz2 -C 路径</li></ul><p>zip压缩：</p><ul><li>zip 文件名.zip 文件1 文件2 目录1 目录2</li></ul><p>unzip解压缩：</p><ul><li>unzip 文件名.zip -C 路径</li></ul><p>切换用户：</p><ul><li>su 用户账户名</li></ul><p>添加组：</p><ul><li>groupadd 组名</li></ul><p>添加用户</p><ul><li>useradd -d /home/目录 用户名 -g 组名 -m</li></ul><p>删除用户：</p><ul><li>userdel -r 用户名</li></ul><p>删除组：</p><ul><li>groupdel 组名</li></ul><p>修改用户所在组</p><ul><li>usermod -g 组名 用户1 用户2</li></ul><p>设置密码：</p><ul><li>passwd 用户名</li></ul><p>修改文件权限：</p><ul><li>chmod 对应数字</li></ul><p>修改文件所属用户</p><ul><li>chown 用户名 文件1 文件2 目录1 目录2</li></ul><p>修改文件所属组</p><ul><li>chgrp 用户组 文件1 文件2 目录1 目录2</li></ul><p><strong>Vi编辑器：</strong><br />两个模式，文本编辑模式，命令行模式，按ESC切换<br />进入编辑器：vi/ vi 文件名.后缀<br />命令行模式：</p><ul><li>[i]光标当前位置插入</li><li>[a]光标右侧位置插入</li><li>[o]下一行开始新一行插入</li><li>[shift+zz]保存退出</li><li>[:q!]强制退出不保存</li><li>[:!]暂时离开vi执行其他命令</li><li>[nx]删除光标后面n个字符</li><li>[nX]删除光标前面n个字符</li><li>[u]撤销<br />查找：</li><li>[/内容]</li><li>[n]查找下一个</li><li>[N]查找上一个<br />替换：</li><li>[：s/a/b/g]将光标所在行的a替换为b</li><li>[g/a/s//b/g]将文件中所有a替换为b</li><li>[:n1,n2s/a/b/g]将n1行到n2行的a替换为b</li></ul><p>编辑器设置：</p><ul><li>[:set ic]搜索时不区分大小写</li><li>[:set noic]搜索时区分大小写</li></ul><p><strong>Windows连接Linux：</strong><br />linux设置：<br />1.右击网络设置，在打开对话框中选择网络适配器<br />2.在网络连接中选择网络桥接模式并选择复制物理网络地址<br />3.重启linux服务器<br />4.获取ip地址【ifconfig】<br />windows设置：<br />1.安装中文版Xshell6<br />2.打开XShell选择文件，在下拉列表中选择新建<br />3.在弹出对话框中设置用户名和ip地址<br />4.验证身份需要输入linux服务器的用户名和密码</p><p>文件传输：<br />新建sftp窗口，通过lcd命令切换Windows路径，put命令上传文件，get命令下载文件</p><p><strong>Linux连接Linux：</strong><br />连接命令：ssh -l username hostip<br />文件传输：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>RemoteUserName</td><td>远程用户名</td></tr><tr><td>RemoteHostIp</td><td>远程ip</td></tr><tr><td>RemoteFile</td><td>远程文件，可带上路径</td></tr><tr><td>FileName</td><td>拷贝到本地后的名字，可带上路径，不带路径拷贝到当前目录</td></tr></tbody></table><p>本地文件复制到远程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp FileName RemoteUserName@RemoteHostIp:RemoteFile</span><br><span class="line">scp FileName RemoteHostIp:RemoteFolder</span><br><span class="line">scp FileName RemoteHostIp:RemoteFile</span><br></pre></td></tr></table></figure><p>本地目录复制到远程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r FolderName RemoteUserName@RemoteHostIp:RemoteFolder</span><br><span class="line">scp -r FolderName RemoteHostIp:RemoteFolder</span><br></pre></td></tr></table></figure><p>远程文件复制到本地：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp RemoteUserName@RemoteHostIp:RemoteFile FileName</span><br><span class="line">scp RemoteHostIp:RemoteFolder FileName</span><br><span class="line">scp RemoteHostIp:RemoteFile FileName</span><br></pre></td></tr></table></figure><p>远程目录复制到本地：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r RemoteUserName@RemoteHostIp:RemoteFolder FolderName</span><br><span class="line">scp -r RemoteHostIp:RemoteFolder FolderName</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github SSH key配置</title>
      <link href="2016/08/29/Github%20SSH%20key%E9%85%8D%E7%BD%AE/"/>
      <url>2016/08/29/Github%20SSH%20key%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p>配置用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;letanga&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>配置邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;247022862@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>生成公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;247022864@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查看和复制公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>Github添加公钥，打开Github，点头像-Settings;</p></li><li><p>点SSH and  GPG keys，右上角点New SSH key，Title随便填，key粘贴上去后点Add SSH key.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制</title>
      <link href="2016/08/21/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>2016/08/21/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<ol><li><p>集中式和分布式版本控制</p></li><li><p>git分布式，svn集中式</p></li><li><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li><p>配置作者信息</p><p>全局设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git congig --global user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line">git congig --global user.email <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure><p>当前设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git congig user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line">git congig user.email <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>git初始化，建立新仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>克隆远端项目到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 项目网址</span><br></pre></td></tr></table></figure></li><li><p>添加文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>提交到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;test1&quot;</span>  //提交并备注test1</span><br></pre></td></tr></table></figure></li><li><p>修改后再查看状态会有显示修改的文件</p></li><li><p>添加所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git addd .</span><br></pre></td></tr></table></figure></li><li><p>忽略添加文件方法，新建.gitignore文件，编辑.gitignore文件写上忽略文件名，示范格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.txt</span><br><span class="line">!a.txt  //忽略所有.txt文件，除了a.txt</span><br><span class="line">/vendor/  忽略vendor文件夹</span><br></pre></td></tr></table></figure></li><li><p>git不跟踪空文件夹</p></li><li><p>移除并删除本地文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm 文件名</span><br></pre></td></tr></table></figure></li><li><p>只移除不删除本地文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached 文件名</span><br></pre></td></tr></table></figure></li><li><p>查看仓库里有哪些文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls或git ls-files</span><br></pre></td></tr></table></figure></li><li><p>仓库里的文件改名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv 当前文件名 修改的文件名</span><br></pre></td></tr></table></figure></li><li><p>查看提交日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li><li><p>修改日志提交描述或者提交到上次版本并添加描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></li><li><p>添加到暂存区未提交到仓库，从暂存区撤出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached 文件名</span><br></pre></td></tr></table></figure></li><li><p>提交到仓库，更改文件后添加到暂存区，从暂存区撤出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 文件名</span><br></pre></td></tr></table></figure></li><li><p>恢复到文件上次状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure></li><li><p>退回上一个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ </span><br></pre></td></tr></table></figure></li><li><p>退回上两个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^^</span><br></pre></td></tr></table></figure></li><li><p>退回上20个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~20</span><br></pre></td></tr></table></figure></li><li><p>使用git log查看版本提交ID，退回到那个版本，输入退回ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 52602b0b04b57b33310fa256707518b126d2648c  //后面是查看到的ID</span><br></pre></td></tr></table></figure></li><li><p>回退到某一个文件之后，又需要返回到最近更新的某个版本，使用git log查看不到提交信息，可以使用git reflog命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --har d2716ff6</span><br></pre></td></tr></table></figure></li><li><p>设置命令快捷键方法，编辑~/.gitconfig文件，添加内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">快捷键 = 命令</span><br></pre></td></tr></table></figure></li><li><p>查看分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>创建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure></li><li><p>切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure></li><li><p>创建并切换到分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure></li><li><p>合并到当前分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure></li><li><p>删除分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br></pre></td></tr></table></figure></li><li><p>冲突问题：从主分支分出几个分支，文件几个个分支都改了，合并时，第一次合并不会有问题，后面分支再合并时就会冲突，并会修改冲突文件展示哪些有冲突，命令窗口会显示哪些文件有冲突，解决办法：找到冲突文件，修改好再重新添加提交</p></li><li><p>显示已合并的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged</span><br></pre></td></tr></table></figure></li><li><p>显示未合并的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --no-merged</span><br></pre></td></tr></table></figure></li><li><p>创建分支都是从当前所在分支提交点创建的，也就是复制一份当前分支的文件</p></li><li><p>未合并分支使用-d参数会提示未合并，删不掉，要强制删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure></li><li><p>添加临时存储区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure></li><li><p>查看临时存储区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure></li><li><p>从临时存储恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure></li><li><p>删除临时存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop 临时存储区名</span><br></pre></td></tr></table></figure></li><li><p>恢复并删除临时存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure></li><li><p>文件已经提交过，目前修改好在暂存区未提交，要切换分支会提示未提交，可以添加临时存储区，之后就可以切换分支了，后面再回来时，可以从临时存储区直接恢复</p></li><li><p>添加标签，如v1.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br></pre></td></tr></table></figure></li><li><p>查看标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure></li><li><p>生成zip发布压缩包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git archieve master --prefix=<span class="string">&#x27;文件夹名&#x27;</span> --forma=zip &gt; 文件名.zip   //将master分支的文件放在文件夹并打包成zip文件</span><br></pre></td></tr></table></figure></li><li><p>从一个分支生成另一个分支，生成的分支改变并提交，而原分支未改变提交，在原分支合并生成的分支，只是将指针移到修改后的分支上，不会产生合并记录，如果两个分支都改变提交了，在合并时，会显示合并记录或者产生冲突，要想不产生合并记录，生成的分支要rebase（replace base），再合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase master</span><br></pre></td></tr></table></figure></li><li><p>生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>生成密钥文件再用户目录的.ssh文件夹里面，将公钥复制添加到GitHub，就可以通过ssh，无需输入GitHub账号密码进入连接传输了</p></li><li><p>从远端克隆的项目自动与远程仓库关联，推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>有时git与远端连接不上，可以删除~/.ssh/know_hosts文件里的内容</p></li><li><p>未克隆远程仓库，与远程仓库关联</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 远程仓库地址  //origin是远程仓库别名</span><br></pre></td></tr></table></figure></li><li><p>查看已关联的远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>推送数据到远程仓库的master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -u origin master</span><br></pre></td></tr></table></figure></li><li><p>推送数据包括所有分支到远端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -all origin</span><br></pre></td></tr></table></figure></li><li><p>显示所有分支包括远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure></li><li><p>在本地创建远端没有的分支ask，推送到远端，提示fetal，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin ask</span><br></pre></td></tr></table></figure></li><li><p>直接克隆远端到本地发现只克隆了主分支，要获得其他分支到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull orgin ask:ask   //克隆远端ask分支到本地的ask分支里，前面的ask分支是远端ask分支，后面是本地分支名，可以取不同名字</span><br></pre></td></tr></table></figure></li><li><p>git push是将本地当前所在分支推送到远端</p></li><li><p>远端master更新了，本地其他分支也更新了，要合并本地分支到远端主分支并推送到远端，在主分支执行git pull更新到最新版本，再切换到要合并的分支，rebase，再合并再推送</p></li><li><p>删除远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete ask</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux达人养成计划1</title>
      <link href="2016/08/03/Linux%E8%BE%BE%E4%BA%BA%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%921/"/>
      <url>2016/08/03/Linux%E8%BE%BE%E4%BA%BA%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%921/</url>
      
        <content type="html"><![CDATA[<ol><li><p>了解Linux内核版本；<a href="http://xn--www-ff0fv09m.kernel.org">官网www.kernel.org</a> ；</p></li><li><p>版本2.6.16，2为主版本，6为此版本，18为末版本；</p></li><li><p>开源软件：</p><p>apache</p><p>Nginx     web服务器</p><p>开源软件特点：</p><p>使用自由，研究自由，散布改变自由</p></li><li><p>Linux应用领域：企业服务器，嵌入式应用；</p></li><li><p><a href="http://xn--www-lp6e.netcraft.com">在www.netcraft.com</a> 可以查看网站服务器；</p></li><li><p>硬盘分区：在mbr文件系统中，只能有4个主分区，即使没有分这么多分区也会占用盘符，一般设置一个扩展分区，在扩展分区建立逻辑分区；</p></li><li><p>格式化的目的主要是写入文件系统；</p></li><li><p>数据块block，默认为4kb，存储的最小空间；</p></li><li><p>文件的id号innode，其他信息还有修改时间和权限；</p></li><li><p>对Linux写入文件系统两个步骤：分数据块，分区列表</p></li><li><p>硬件设备文件名：</p><p>SATA/USB硬盘    /dev/sd[a-p]</p><p>光驱                     /dev/cdrom或/dev/hdc</p><p>打印机  25针      /dev/lp[0-2]</p><p>​              USB      /dev/lp[0-15]</p><p>鼠标                   /dev/mouse</p></li><li><p>挂载：</p><p>必须的分区：   /根分区</p><p>​                          swap分区</p><p>推荐分区：       /boot        启动分区</p></li><li><p>localhost为主机名；</p></li><li><p>Windows局域网内主机不能同名，Linux可以；</p></li><li><p>ls -i 显示文件innode；</p></li><li><p>常用3中文件：普通文件，目录文件，连接文件；</p></li><li><p>ls -lh 加入h参数显示能让人一目了然的文件大小；</p></li><li><p>以.开头的文件为隐藏文件；</p></li><li><p>cp -a 相当于cp -pdr<br />-p 复制连带文件属性<br />-d 复制目录<br />-r 复制链接文件连带属性</p></li><li><p>/boot 启动分区<br />/bin   /sbin   /usr/bin   /usr/sbin都是命令的存储目录</p></li><li><p>/etc配置文件；</p></li><li><p>/lib函数库；</p></li><li><p>/mnt 挂载目录，默认是空的；</p></li><li><p>/proc和/sys两个是内存挂载点，不能直接操作；</p></li><li><p>硬链接：相同的innode和存储block，可以看作是同一个文件，不针对目录；</p></li><li><p>软连接：建立软链接如果不在同一目录，必须写绝对路径，有自己的innode和block，只保存源文件的文件名和innode，没有实际的文件数据；</p></li><li><p>文件搜索命令：locate 文件名  在后台数据库按文件名搜索，搜索速度更快，会跳过一些目录下的文件，不能搜索到刚刚新建的文件，需使用updatedb更新数据库；</p></li><li><p>whereis 命令 显示命令所在路径和帮助文件路径，-b只看可执行文件，-m只看帮助文件；</p></li><li><p>whatis 命令 显示命令功能；</p></li><li><p>which 命令 查看命令及别名；</p></li><li><p>cd是shell内置的命令；</p></li><li><p>PATH环境变量定义的是系统搜索命令的路径，即常用环境变量的作用；</p></li><li><p>find [搜索范围]  [搜索条件]</p><p>find -iname 不区分大小写</p><p>find /root -user root 按所有者搜索</p><p>-nouser 没有所有者的文件</p><p>find /var/log -mtime +10 十天前文件</p><p>10  十天前当天</p><p>-10 十天内</p><p>atime 文件访问时间</p><p>ctime改变文件属性时间</p><p>mtime修改文件内容时间</p><p>find / -size 根据文件大小</p><p>find / -innm 根据innode</p></li><li><p>grep -v取反 -i忽略大小写</p></li><li><p>man帮助命令，级别1，查看命令帮助，级别2内核调用函数，级别3，函数和函数库…；</p></li><li><p>info帮助命令，可以显示中文</p></li><li><p>gzip 源文件 压缩为gz格式，源文件会消失，保留源文件使用gzip -C源文件 &gt;压缩文件</p></li><li><p>gzip -r目录 压缩目录下所有子文件，不能压缩目录，gzip -d或者gunzip解压缩；</p></li><li><p>bzip2 压缩文件 压缩为bzip2文件不保留源文件，bzip2 -k 源文件 保留源文件 -d解压缩</p></li><li><p>shutdown [选项] 时间  -c取消前一个关机命令 -h关机 -r重启</p></li><li><p>shutdown -r 5:30 &amp; 放入后台，shutdown -r now</p></li><li><p>halt关机，reboot重启；</p></li><li><p>init 6重启；</p></li><li><p>系统运行级别：</p><ol start="0"><li>关机</li><li>常用户</li><li>不完全多用户不含NFS服务</li><li>完全多用户</li><li>未分配，系统保留</li><li>图形界面</li><li>重启</li></ol></li><li><p>在/etc/inittab 文件可以修改默认运行级别；</p></li><li><p>退出登录命令logout；</p></li><li><p>挂载命令mount 查看已挂载分区</p></li><li><p>fdisk -l 查看系统已识别的分区；</p></li><li><p>Linux默认不支持NTFS文件系统，挂载了也是只读；</p></li><li><p>w命令查看登录用户信息：</p><ul><li>user 登录用户名</li><li>TTY 登录终端</li><li>from 从哪个IP地址登录</li><li>login@ 登录时间</li><li>IDLE 用户闲置时间</li><li>JCPU连接的用户所有进程占用的时间</li><li>PCPU当前进程所占用的时间</li><li>WHAT 当前正在运行的命令</li></ul></li><li><p>who命令，命令输出：用户名，登录终端，登录时间；</p></li><li><p>last命令，用户名，登录终端，登录IP，登录时间，退出登录时间（在线时间）；</p></li><li><p>Linux常用快捷键：CTRL</p><ul><li>+c强制终止当前命令</li><li>+l清屏</li><li>+a光标移动到命令行首</li><li>+e光标移动到命令行尾</li><li>+u把光标所在位置删除到行首</li><li>+z把命令放入到后台</li><li>+r在历史命令中搜索</li></ul></li><li><p>历史命令history [选项] [历史命令保存文件]</p><ul><li>-c清空历史命令</li><li>-w把缓存命令写入文件~.bash_history    /etc/profile可修改最大条数</li><li>!n重复执行第n条命令</li><li>!!重复执行上一条命令</li><li>!字串重复执行最后一条以字串开头的命令</li></ul></li><li><p>标准输出重定向 &gt;重写   &gt;&gt;追加；</p></li><li><p>标准错误重定向 2&gt;        2&gt;&gt;;</p></li><li><p>&quot;&gt;&gt;&quot;文件2&gt;&amp;1以追加的方式把正确输出和错误都保存在同一个文件中；</p></li><li><p>shell命令解释器，分类：C shell ，Bash</p></li><li><p>脚本执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#第一个shell脚本</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;天上掉下个林妹妹&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>脚本执行方式：</p><ul><li>赋予执行权限，直接运行 chmod 755 *.sh   ./**.sh</li><li>通过Bash调用执行脚本  bash *.sh</li></ul></li><li><p>命令别名与快捷键</p><ul><li>alias 命令 查看已设置快捷命令别名，快捷键</li><li>alias **=’…’，设置快捷命令，暂时有效，永久有效需要修改~/.bashrc文件</li><li>unalias删除别名</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS常用的技巧及快捷键</title>
      <link href="2016/08/03/VS%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8A%80%E5%B7%A7%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2016/08/03/VS%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8A%80%E5%B7%A7%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>如果你想复制一整行代码，只需将光标移至该行，再使用组合键“Ctrl+C”来完成复制操作，而无需选择整行；</li><li>如果你想剪切一整行代码，只需将光标移至该行，再使用组合键“Ctrl+X”来完成剪切操作，而无需选择整行；</li><li>如果你想删除一整行代码，只需将光标移至该行，再使用组合键“Ctrl+L”来完成剪切操作，而无需选择整行；</li><li>向前/向后搜索：使用组合键“Ctrl+I”，键入待搜索文本(将光标移至搜索词输入框位置即可开始输入)，键入搜索文本后，可以使用组合键“Ctrl+I”及“Ctrl+Shift+I”前后定位搜索结果，搜索结果会被高亮显示，要结束搜索，可以按“ESC”键或者点击查找框右侧的关闭按钮。<br />选择一个单词后，按组合键“Ctrl+F”也可调出查找框口，且搜索结果也会被高亮显示；</li><li>使用组合键“Shift+Alt+方向键(或鼠标)”即可完成框式选择。框式选择允许你同时对代码行和列进行选择，这对批量删除某些代码很方便的；</li><li>在光标所在行的上面或下面插入一行不用再到行首行尾按回车：组合键“Ctrl+Enter”：在当前行的上面插入一个空行，组合键“Ctrl+Shift+Enter”：在当前行的下面插入一个空行；</li><li>定位到行首与行尾：home键：定位到当前行的行首，end键：定位到当前行的行尾；</li><li>选中从光标起到行首(尾)间的代码1)选中从光标起到行首间的代码：使用组合键“Ctrl+Shift + Home”，选中从光标起到行尾间的代码：使用组合键“Ctrl+Shift + End”；</li><li>调用智能提示：使用组合键“Ctrl+J”或者“Alt+→”；</li><li>快速切换窗口使用组合键“Ctrl+Tab”(此时可以打开IDE的导航，获得鸟瞰视图)；</li><li>快速合并或展开当前代码段使用组合键“Ctrl+M,M”(记住：要按两次M哦)；</li><li>生成解决方案使用组合键“Ctrl+Shift+B”；</li><li>跳转到指定的某一行组合键“Ctrl+G”;</li><li>快速选中一行：单击状态栏中的行号；</li><li>注释/取消注释：注释：组合键“Ctrl+K+C”，取消注释：组合键“Ctrl+K+U”；</li><li>全屏显示/退出全屏显示使用组合键“SHIFT + ALT + ENTER”；</li><li>转跳到定义：F12；</li><li>查找所有引用：使用组合键“Shift+F12”；</li><li>查找和替换：查找：使用组合键“Ctrl+F”，替换：使用组合键“Ctrl+H”；</li><li>大小写转换：转小写：选中并使用组合键“Ctrl+ U”，转大写：选中并使用组合键“CTRL + SHIFT + U”；</li><li>调试相关：调试(启动)：F5，调试(重新启动)：使用组合键“Ctrl+Shift+F5”，调试(开始执行不调试)：使用组合键“Ctrl+F5”，调试(逐语句)：F11，调试(逐过程)，F10，设置断点：F9；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> VS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim基础</title>
      <link href="2016/06/20/Vim%E5%9F%BA%E7%A1%80/"/>
      <url>2016/06/20/Vim%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="vim基础操作"><a class="markdownIt-Anchor" href="#vim基础操作"></a> Vim基础操作</h2><ol><li><p>进入插入模式：i光标当前插入，a当前光标后插入，o向下增加一行插入，I行首插入，A行尾插入，O向上插入一行插入；</p></li><li><p>插入模式下：</p><ul><li>ctrl+h 删除一个字符</li><li>ctrl+w删除一个单词</li><li>ctrl+u删除到行首</li></ul></li><li><p>normal模式下：</p><ul><li>ctrl+e向上一次滚动一行</li><li>ctrl+f向下翻页</li><li>ctrl+b向上翻页</li><li>ctrl+d向下翻半页</li><li>ctrl+u向上翻半页</li></ul></li><li><p>k/j/l/l上下左右键；</p></li><li><p>ctrl+[或ctrl+c相当于按esc键；</p></li><li><p>gi快速返回到上次编辑位置；</p></li><li><p>w/W下个单词开头；</p></li><li><p>e/E下个单词结尾；</p></li><li><p>b/B上个单词开头；</p></li><li><p>关于word/WORD：不以/以空格为分割的单词；</p></li><li><p>f+一个字符：跳转该行到第一个匹配的字符，按，跳转到上个匹配字符，按；跳转到下个匹配的字符，F+一个字符则相反；</p></li><li><p>按0跳到行首，^跳到行首非空字符，$跳到行尾；</p></li><li><p>按{}()跳到以空行为分割的段首/段尾；</p></li><li><p>gg/G跳到文首/文尾；</p></li><li><p>nG跳到n行；</p></li><li><p>H/M/L跳到开头/中间/结尾；</p></li><li><p>ctrl+o快速返回上次编辑的地方；</p></li><li><p>zz把屏幕置为中间；</p></li><li><p>x删除一个字符；</p></li><li><p>dw删除一个单词，diw删除一个word，daw删除一个WORD；</p></li><li><p>dd删除一行，ndd删除n行，dt）删除到）的内容，d$删除到行尾，d0删除到行首；</p></li><li><p>v进入视图模式，V进入试图模式以行为选择单位；</p></li><li><p>r+字符将光标字符替换为输入字符；</p></li><li><p>s+字符将光标字符替换为输入字符并进入插入模式；</p></li><li><p>4s删除4个字符替换并进入插入模式；</p></li><li><p>R一直替换后面的字符，S整行删除并进入插入模式；</p></li><li><p>ciw删除一个word进行更改，caw删除一个WORD进行更改；</p></li><li><p>ct)删除到)的内容进行更改；</p></li><li><p>set hls设置高亮；</p></li><li><p>/前向搜索，？反向搜索，按n/N跳到下/上一个匹配</p></li><li><p>替换命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[range]s[ubstitude]/&#123;pattern&#125;/&#123;string&#125;/flags</span><br></pre></td></tr></table></figure><ul><li><p>range，比如10，20表示第10行到20行，%表示全部</p></li><li><p>pattern要替换的格式</p></li><li><p>string替换后文本</p></li><li><p>flags</p><ul><li>g全局</li><li>c确认，可以确认或拒绝修改</li><li>n报告匹配到的次数，不替换</li></ul></li></ul></li><li><p>精确匹配替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/\&lt;quack\&gt;/jiao/</span><br></pre></td></tr></table></figure></li></ol><h2 id="vim基础常识"><a class="markdownIt-Anchor" href="#vim基础常识"></a> Vim基础常识</h2><ol><li><p>buffer:打开的一个文件的内存缓冲区；</p></li><li><p>窗口:buffer可视化的分割区域；</p></li><li><p>tab:可以组织窗口为一个工作区；</p></li><li><p>buffer切换，：ls列出当前buffer，：b n跳到第n个buffer；:b pre/next/first/last跳到前一个/下一个/第一个/最后一个buffer；</p></li><li><p>一个缓冲区可以分割多个窗口，每个窗口可以打开不同的缓冲区；</p></li><li><p>：vsp垂直分割窗口，</p></li><li><p>：sp垂直分割窗口；</p></li><li><p>ctrl+h/j/k/l移动到左/下/上/右窗口；</p></li><li><p>ctrl+H/J/K/L将当前窗口移动到左/下/上/右；</p></li><li><p>tab标签页，将窗口分组；</p></li><li><p>新建标签页，:tabnew 文件名；</p></li><li><p>gt切换下一个标签页，gT切换上一个标签页；</p></li><li><p>tab filename 在新建标签页打开filename文件；</p></li><li><p>:tabc(lose)关闭当前标签页；</p></li><li><p>:tabo(oly)只保留当前标签页；</p></li><li><p>文本对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[number]&lt;<span class="built_in">command</span>&gt;[text object]</span><br></pre></td></tr></table></figure></li><li><p>viw选中一个word；</p></li><li><p>vaw选择一个WORD；</p></li><li><p>复制粘贴：y/p，v选中，p粘贴，yiw复制一个word，yaw复制一个WORD；</p></li><li><p>yy复制一行，dd剪切一行，nyy复制n行，ndd剪切n行；</p></li><li><p>插入模式下，ctrl+c复制，ctrl+v粘贴；</p></li><li><p>:set autoindent设置自动换行；</p></li><li><p>设置自动换行后粘贴后混乱，:set paste粘贴后再:set nopaste使自动换行继续起作用；</p></li><li><p>vim的寄存器</p><ul><li>默认使用无名寄存器</li><li>ayiw 复制到a寄存器，biw复制到b寄存器</li><li>寄存器名字从a-z</li><li>“”代表无名寄存器</li><li>“0代表复制寄存器</li><li>”+复制到系统剪贴板</li><li>“%表示当前文件名</li><li>”，上次插入的文本</li></ul></li><li><p>:echo has(‘clipboard’)，显示1代表支持clipboard，:set clipboard=unaned后可以直接对系统剪贴板进行操作；</p></li><li><p>:e!不保存更改重新加载文件；</p></li><li><p>:colorscheme查看当前配色，:colorscheme ctrl+d查看系统提供的配色，:colorscheme 配色名字 选择配色；</p></li><li><p>:syntax on打开高亮；</p></li><li><p>宏，q+寄存器录制操作，再按q停止录制，v进入视图模式选择要操作的文本，@寄存器重复宏操作（录制的操作）；</p></li><li><p>按v进入视图选择要操作的文本，:’&lt;’&gt;normal @a，选中文本进行宏操作；</p></li><li><p>不使用宏，:’&lt;’&gt;normal 依次输入操作表示对选中文本各行进行操作；</p></li><li><p>ctrl+n/p补全单词；</p></li><li><p>ctrl+x+f补全文件名；</p></li><li><p>ctrl+x+o配合插件进行补全；</p></li><li><p>配置文件~/.vimrc；</p></li><li><p>常用设置及映射，set nu设置行号，colorscheme 配色名字 修改配色，syntax on打开高亮，set hlssearch设置搜索高亮，set pasteloggle=<F2>设置F2键映射为:set passte；</p></li><li><p>设置,为leader键，let mapleder=&quot;,&quot;</p></li><li><p>inoremap，i表示插入模式，nore表示非递归，map表示映射；</p></li><li><p>inoremap <leader>w<ESC>:w<cr>设置leader键加w键代替系统的:w回车；</p></li><li><p>vim脚本vimscript；</p></li><li><p>映射：把一个操作映射到另一个操作；</p></li><li><p>:map - x用-代替x删除字符；</p></li><li><p>:map <space> viw用空格键代替进入视图模式并选中一个word；</p></li><li><p>映射有关n/v/i分别表示normal模式/视图模式/插入模式；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="2016/04/16/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>2016/04/16/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><ol><li>history 查看历史命令 ，可以方向键上下查看之前的命令；</li><li>ls (list)查看文件信息<ul><li>-l 列表显示详细信息（快捷命令ll）</li><li>-a 显示隐藏文件或目录</li><li>-d 显示目录属性而不是内容</li><li>-h 显示大小以k，M显示</li><li>-R 递归显示子目录的内容</li><li>-lrt 按时间顺序排序</li></ul></li><li>关于通配符<ul><li>*代表任意多个字符</li><li>？代表一个字符</li><li>[a-z]代表a到z的所有字符中的一个字符</li><li>[abcde]代表abcde中的一个字符</li></ul></li><li>绝对路径和相对路径<ul><li>以&quot;/&quot; 开头的路径为绝对路径</li><li>不是以&quot;/&quot;开头的路径为相对路径</li></ul></li></ol><h2 id="目录操作"><a class="markdownIt-Anchor" href="#目录操作"></a> 目录操作</h2><ol><li><p>cd --change dir 更改目录</p><ul><li>打开用户家目录的几种方式<ul><li>空/空格</li><li>~</li><li>/home/用户名</li><li>$HOME</li></ul></li></ul></li><li><p>tree</p><p>如果不存在需要安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install tree</span><br></pre></td></tr></table></figure><p>-C 以颜色区分文件</p></li><li><p>mkdir 创建目录</p><ul><li>-p递归创建目录</li></ul></li><li><p>rm 删除文件/目录</p><ul><li>-r 递归删除子文件目录</li><li>-rf 强制删除</li></ul></li><li><p>rmdir 删除目录</p><ul><li>-p 检测到删除目录后上级目录为空，上级目录一并删除</li></ul></li><li><p>which 显示对应的命令所在的路径</p></li><li><p>whereis 在特定目录中查找符合条件的文件。这些文件应属于原始代码、二进制文件，或是帮助文件</p></li></ol><h2 id="文件操作"><a class="markdownIt-Anchor" href="#文件操作"></a> 文件操作</h2><ol><li><p>touch 文件如果不存在则创建,如果存在更改访问时间</p></li><li><p>rm 删除文件或者目录</p><ul><li>-r  递归删除子目录</li><li>rm -rf * 删除当前目录内全部内容(强制删除,慎用)</li></ul></li><li><p>cp (copy)拷贝文件或者目录</p><ul><li><p>-a 它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合</p></li><li><p>-p 除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</p></li><li><p>cp  [option] srcpath  despath</p><ul><li>despath 是一个目录,将srcpath拷贝到 despath 目录下</li><li>despath 不是一个目录,在despath上级目录(…/xxx),在 …/下创建一个xxx文件,并将srcpath的内容拷贝进来</li></ul></li></ul></li><li><p>mv (move)移动文件或者目录</p><ul><li>mv 文件名 新文件名  改文件名</li></ul></li></ol><h2 id="文件内容操作"><a class="markdownIt-Anchor" href="#文件内容操作"></a> 文件内容操作</h2><ol><li>cat filename<ul><li>直接显示文件信息到屏幕</li></ul></li><li>more 分屏显示文件信息<ul><li>回车 逐行显示</li><li>空格,一页一页显示</li></ul></li><li>less 分屏显示文件信息<ul><li>回车或者上下方向键可以反复查看文件内容</li></ul></li><li>head 查看文件头 ,默认显示10行内容<ul><li>-n 指定显示的行数</li></ul></li><li>tail 查看文件尾 ,默认显示10行内容<ul><li>-n 可以指定行数</li><li>-f  可以一直跟踪文件末尾</li></ul></li></ol><h2 id="统计信息相关"><a class="markdownIt-Anchor" href="#统计信息相关"></a> 统计信息相关</h2><ol><li>wc  — word cout 统计文件内容<ul><li>-l  显示行</li><li>-w 单词</li><li>-c  字节数</li></ul></li><li>du 查看目录占用空间</li><li>df 显示磁盘空间信息</li></ol><h2 id="文件权限和用户属性"><a class="markdownIt-Anchor" href="#文件权限和用户属性"></a> 文件权限和用户属性</h2><ol><li><p>常见目录作用</p><ul><li>/ 根目录</li><li>/bin 可执行文件所在目录</li><li>/media 挂载设备媒体,U盘,光驱等</li><li>/mnt 该目录是为了让用户挂载别的文件系统</li><li>/usr (unix system resources)  庞大和复杂的目录,很多应用会安装到此目录</li><li>/usr/local 用户自己安装软件的目录</li><li>/sbin 超级管理员root的可执行文件目录</li><li>/proc 这个目录是系统内存的映射,会保留进程运行的一些信息</li><li>/etc 系统软件的启动和配置目录</li><li>/etc/passwd 用户存放文件(man 5 passwd查看文件格式)</li><li>/dev 设备文件所在目录</li></ul></li><li><p>文件属性</p><ul><li>-普通文件</li><li>d目录文件</li><li>l链接文件</li><li>b块文件</li><li>c字符设备文件</li><li>p管道文件</li><li>s套接字文件</li></ul></li><li><p>文件权限</p><ul><li>-r 读</li><li>-w写</li><li>-x执行</li></ul></li><li><p>改变文件权限</p><ul><li><p>chmod</p><ul><li><p>chmod [u|g|o|a]  [+|-][r|w|x] filename</p></li><li><p>用数字的方式改变文件权限</p><ul><li><p>给a.out 用户可读可写,组可读可写,其他用户可读</p><p>chmod 0664 a.out</p></li></ul></li></ul></li><li><p>注意目录需要有可执行权限,才能进入目录</p></li><li><p>chown与chgrp 改变用户和改变组</p></li><li><p>–需要用管理员root去修改文件归属</p></li><li><p>chown 用户:组  文件名|目录</p></li><li><p>chgro   组   文件名|目录</p></li></ul></li></ol><h2 id="查找和检索"><a class="markdownIt-Anchor" href="#查找和检索"></a> 查找和检索</h2><ol><li><p>find dir [option]  内容</p><ul><li><p>-name 按照名字查找</p></li><li><p>find ./ -name “*.c”</p></li><li><p>-type 按照类型查找</p></li><li><p>-size  按照大小查找</p></li><li><p>find ./ -size +1M       -size -5M 大于1M,并且小于5M,如果不写±,代表等于</p></li><li><p>-maxdepth 最深路径</p></li><li><p>find ./ -maxdepth       1 -size +1M 当前路径下大于1M</p></li><li><p>find ./ -maxdepth      2 -size +1M -exec ls -l {} ;  -ok 相对安全模式,没一条指令都提示</p></li></ul></li><li><p>grep命令 内容过滤</p><ul><li>grep [option] 内容 dir|filename</li><li>-r 递归子目录</li><li>-n  显示行号</li><li>find ./ -type      f|grep txt  find与grep结合起来使用</li><li>cat ggeqG.c |grep      main  查找指定文件内是否有main</li><li>tail -f      tcpsvr.1705 |grep connect   分析日志</li></ul></li><li><p>locate 以文件名查找文件，从数据库查找，更新数据库使用updatedb命令</p></li></ol><h2 id="压缩"><a class="markdownIt-Anchor" href="#压缩"></a> 压缩</h2><ol><li>zip<ul><li>zip -r 压缩包名 原材料  – -r代表递归子目录</li><li>zip -r bb.zip bb hello</li><li>unzip bb.zip 解压</li></ul></li><li>tar<ul><li>cvf 文件/目录 压缩文件.tar</li><li>xvf 文件/目录 解压文件.tar</li></ul></li><li>gz(tar参数加z)<ul><li>czvf 文件/目录 压缩文件.tar.gz</li><li>xzvf 文件/目录 解压文件.tar.gz</li></ul></li><li>bzip2(tar参数加j)<ul><li>cjvf 文件/目录 压缩文件.tar</li><li>xjvf 文件/目录 解压文件.tar</li></ul></li><li>rar<ul><li>a 代表压缩</li><li>-r 递归子目录</li><li>rar a -r  压缩包(可以无后缀)  原材料   — 打包</li><li>rar x 压缩包名  — 释放</li></ul></li></ol><h2 id="软件安装卸载"><a class="markdownIt-Anchor" href="#软件安装卸载"></a> 软件安装卸载</h2><ol><li>yum命令<ul><li>yum install app名字   安装软件</li><li>yum remove app名字  卸载软件</li></ul></li><li>rpm命令<ul><li>rpm -i app名字 安装软件</li><li>yum remove app名字 卸载软件</li></ul></li></ol><h2 id="系统管理"><a class="markdownIt-Anchor" href="#系统管理"></a> 系统管理</h2><ol><li>进程：正在运行的程序；</li><li>进程管理的作用：<ul><li>判断服务器的运行状态</li><li>查看系统中的所有进程</li><li>杀死进程</li></ul></li><li>ps aux或者ps -le查看系统中所有进程，使用BSD操作系统格式；</li><li>查看进程信息：<ul><li>USER用户名</li><li>PID进程ID</li><li>%CPU该进程占用CPU百分比</li><li>%MEM占用物理内存的百分比</li><li>VSZ占用虚拟内存的大小</li><li>RSS占用实际物理内存大小</li><li>TTY该进程在哪个终端中运行，tty1-7代表控制台终端，1-6本地字符界面终端，7是图形终端，pts/0-255代表虚拟终端</li><li>STAT：进程状态<ul><li>R运行</li><li>S睡眠</li><li>T停止</li><li>s包含子进程</li><li>+位于后台</li></ul></li><li>START：该进程的启动时间</li><li>TIME：该进程占用CPU的运算时间，不是系统时间</li><li>COMMAND：产生此进程的命令名</li></ul></li><li>pstree查看进程树<ul><li>-p查看进程的PID</li><li>-u显示进程的所属用户</li></ul></li><li>top动态查看进程信息每3秒刷新；</li><li>杀死进程<ul><li>kill -l查看所有信号</li><li>kill -1 进程id 平滑重启</li><li>kill -9 强制终止进程</li><li>killall [选项] [信号]进程名  -i交互式，-I忽略进程名大小写</li><li>pkill [选项] [信号]进程名 多了-t 终端号 按照终端号提出用户</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
